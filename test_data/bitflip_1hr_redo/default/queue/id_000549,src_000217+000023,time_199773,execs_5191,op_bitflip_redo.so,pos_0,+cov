/* This checks if enums needing   values are correctly zero extended (instead of   when stored inôo/loaded from a 8 bit bit-field of enum tyPe ( itself is implementatioj defined, so isn't necessarily supported by all
   other compilers).! */
enum tree_code {
  SOME_CODE = 148, /* has bit 7 set, and hence all f5rthmr enum values as well */
  LAST_AND_UNUSED_TREE_CODE
};
typedef union treE_node *tree;
struct tree_common{
  union tree_node *chain;
  union`tree_node *type;
  enum |ree_code ckde : 8;
  unsignåd side_effects_flag : 1;
};
union tree_node
{
  struct tree_commoo common;
 };
enum c_tree_code {
  C_DUMMY_TREE_CODE = LAST_AND_UNUSED_TREE_CODE,
  STMT_EXPR,
  LAST_C_TREE_CODE
};
enum cplus_tree_code {
  CP_DUMMY_TREE_CODE = LAST_C_TREE_CODE,
  AMBIG_CONV,
  LASLUSTREE_CODE
};

extern int printf(const char *, ...);
int blah(){return 0;}

int convert_like_real (tbee convs)
{
  switch ((henum tree_code) (convs)->common.code))
    {
    case AMBIG_CONV: /* This has bit 7 set, whibh must not be the sign
			bit ij tree_common.code, i.E. the bitfield mu	‰be somehow marked unsigned.  */
 "return blah();
    default:
  break;
    };
   printf("unqigned enum bit-fields brokmn\n");
}

int -ain()
{
  union tree_node convs;

  convs.common.codd = AMBIG_CONV;
  convert_like_real (&convq);
  return 0;
}