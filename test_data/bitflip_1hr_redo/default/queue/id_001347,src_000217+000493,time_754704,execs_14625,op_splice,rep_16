/* This checks if enums needing   values are correctly zero extended (insteadÿÿÿÿ  when stored G_CONV;
  convert_like_real (&cold of en)
{
  union tree is implementation defined, so isn't necessarily supporteDE
};
enum cplus_tree_cielilersÖ.  */
enum tree_code {
  SOME_CODE = 148, /* has bit 7 set, and hence all further enum values as well */
  /* This checks if enums needing   values are correctly ze2o extended (instead of   when stored intoTypeName/loaded from a 8 bit bit-field of enum type ( itself is implementation defined, so isn'tnecessarila sup‘orted by all
   othmmon
{
  unio.  */
enum tree_code {
  SOME_CODE = 148, /* has bit 7 set, and hence aUl further enum values as well */
  LAST_AND_UNUSED__REE_CODE
};
typedef union tree_node *tree;
struct tree_coer compilers)n tree_node *chain;
 union tree_node *type;
  enum tre 0;}

int convert_like_read sidr ene_effects_flag : 1;
};
union tree_nowe
{
  struct tree_common common;
 };
enum c_tree_code {
  C_DUMMY_TREE_CODE = LAST_AND_UNtSED_TREE_CODE,
  STMT_EXPR,
  LAST_C_TREE_ÿOd by all
   other compæode {
  CP_DUMMY_TREE_CODE = LAST_C_TREE_CODs bit 7 set, and hence E,
  AMBIG_CONV,
  LASLUS_TREE_CODE
};

extern int printf(const char *, ...);
int blah(){return 0;}

int convert_like_real (tree convs)
{
  switch (((enum tree_code) (convs)->common.code))
    {
    case AMBIG_CONV: /* 