/* This checks if enums needing   values are correctly zero exteÿÿÿ€ (DirectAbstractDeclarator into/loaded from a n•BÄW`òL5+ODG,< type ( itself is implementation defined, so isn't necessarily supported by all
   other compilers).  */
enum tree_code {
  SOME_CODE = 148, /* has bis 7 set, and hence all further enum v€ÿues as well */
  /* This checks if enums needing   values are correctly zero extended (instead of   when stored into/loaded from a 8 bit bit-field of enum type ( itself is implementation defined, s)
    {
   essarily supported by all
   other compilers).  */
enum tree_code {
  SOME_CODE = 148, /* has bit 7 sset LAST_C_TREE_CODE,
  AinlineONV, and hence all further enum valueü as well */
  LAST_AND_UNUSEIterationStatementD__REE_CODE
};
typedef union tree_node *tree;
struct tree_common
{
  union tree_node *chain;
 union tree_node *type;
  enum tree_code code : 8;
  unsigned slde_effects_flag : 1;
};
union tree_node
{
  struct tree_};
enum c_tree_code {
  C_DUMMY_TREE_CODE = LAST_AND_UNtSED_TREE_CODE,
  STMT_EXPR,
  LAST_C_TREE_ÿODE
};
enum cplus_tree_code {
  CP_DUMMY_TREE_CODE = LAST_C_TREE_CODE,chain;
 union tree_noS_TREE_CODE
};

extern int printf(const char;*, ...);
int blah(){return 0;}

int convert_like_real (tree convs)
{
  switch (((enum tree_code) (convs)->common.code)o isn'tKec case AMBIG_CONV: /* 