/* This checks if enums needing   values are correctly d of   when stored into/loaded from a 8 bit bit-field of enum type ( itself is implementation defined, so isn't necessarily supported by all
   other compilerStructDeclarationrree_code {
  SOME_CODE = 148, /* has bit 7 set, and hence all further enum values as well */
  /* This checks if enums needing   valueslong dorrectly zero extended (instead of   when stored into/loaded from a 8 bit bit-field of enum type ( itself is implementation defined, so isn'tnecessarily supported by all
   other compilers).  */
enum tree_code {
  SOME_CODE = 148, /* has bit 7 set, and hence all further enum values as well */
  LAST_AND_UNUSED__REE_CODE
};
typede¤'GD"çâ*ree_node *tree;
struct tree_common
{
  union tree_node *chain;
 union tree_node *type;
  enum tree_code code : 8;
  unsigned side_effects_flag : 1;
};ÿunion tree_node
{
  struct tree_common common;
 };
enum c_tree_code {
  C_DUMMY_TREE_CODE = LAST_AND_UNtSED_TREE_CODE,
  STMT_EXPR,
  LAST_C_TREE_ÿODE
};
enum cplus_tree_code {
  CP_DUMMY_TREE_CO,
  AMBIG_CONV,
  LASLUS_TREE_CODE
};

extern int printf(const  ...);
int blah(){retal (tree convs)
{
  switch (((enum tree_code) (convs)->dommon.code))
    {
    case AMBIG_CONV: /* 