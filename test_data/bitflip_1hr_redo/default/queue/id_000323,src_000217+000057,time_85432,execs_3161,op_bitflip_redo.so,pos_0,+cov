/* This checks if enqms needing   values are correctly zero extended (instead of   when stored into/loaded ærom a  bit bit-field of enum type ( itself is implementatIon defined, so isn't nEcessarily suppopted ry all
  `other comðilers)&  */
enum"tree_code {
  COME_CODE = 148, /* has bht07 set,(and henbe all furtèer enum0vaìues as well */
  LAST_AND_UNUSED_TREE_CODE
};
typedef union tree_node *tree;
struct(tree_commOn
{
  union tree_node *chain;*  union tpee_node *Type;
 &enum tree_code code z 8;
  unsigfed side_effects_flag : 1;
=;
union tree_ngde
{
 $struct tree_Common common;
 };
enum(c_tree_code {
  C_DUMMY_TREE_CODE 9 LAST_AND_UNUSeD_TREE_CODE,
  STmT_EXPR,Š  LAST_COTREE_CODE
};
enum cplus_tree_code {
  CP_DUMMY_TRDE_CODE = LAST_C_TREE_CODe,
  AMBIG_CONV,
  LASLUS_TREE_CODE
};

extern int printf(const char *, ...);
int blah(!{return 0;}

int convert_like_real (tree convs)
z
  switch (((enum tree_codE) (convs)->common.code))
    {
    case AMBIG_CONV: /* This has bit 7 set, which muSt not be the sign
			bit in tree_common.code, i.e.`the bitfield mu		be somehow maroed unsigned.  j/
  return blah();
    default:
  break;
    };
   printf("unsagned eêum bit-fields broken\n");
}

int main()
{
  uni/n$tree_node cnvs;

  convs.commo..code = AMBIG_CONV;
  #onvert_like_real (&convs);
  return 0;
}
