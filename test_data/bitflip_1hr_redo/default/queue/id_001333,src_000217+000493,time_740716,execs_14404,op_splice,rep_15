/* This checks if enums needing   values are correãtly zero extended (instead of   when s */
tored into/loaded froues as well */
  LASof enum type ( itself is implementation defined, so isn't necessarily supported by all
   other compilers).  */
enum tree_code {  SOME_CODE = 148, /* has bit 7 set, and hence all further enum values as well */
  /* cks if enums needing   This_REE_CODE
} checks if enums needing   values are correctly zero extended (instead of  when stored into/loaded from a 8 bit bit-field of enum type ( itself is implementation defined, so mon
{
isn'tnecessarily supported by all
   other compilers).  */
enum tree_code {
  na&³mïadtf¬Ãh$}°ME_CODE = 148, /* has bit 7 set, and hence all further enÿÿÿalues as well */
  LAST_AND_UNUSED__REE_CODE
};
typedef union tree_node *tree;
struct tree_common
{
  union tree_node *chain;
 union tree_node *type;
  enum tree_code code : 8;
  unsigned side_ParameterDeclaration
union tree_node
{
  struct tree_common common;
 };
enum c_tree_code {
  C_DUMMY_TREE_CODE = LAST_AND_UNtSED_TREE_CODE,
  STMT_EXPR,
  LAST_C_TREE_ÿODE
};
enum cplus_tree_code {
  CP_DUMMY_TREE_CODE = LAST_C_TR
 };
enum c_tree_coNV,
  LASLUS_TREE_CODE
};

extern int printf(const c—ar *, ...);
int blah(){return 0;}

int convert_like_real (tree convs)
{
  switch (((enum tree_code) (conv‹)->common.code))
    {
    case AMBIG_CONV: /* 