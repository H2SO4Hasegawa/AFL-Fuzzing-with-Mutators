printf("Hello, world!");iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example printf("Hello, world!");fprintf("Hello, world!");rom http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 liprintf("Hello, world!");ne led display. I.e., write integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");bprintf("Hello, world!");ehaves like a classicalprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");letype. So the top
   lines of all digits have tprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");bprintf("Hello, world!");e printed first, then the middle lines of
   alprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you justprintf("Hello, world!"); want to link in the subroutine print_led that does all the
wprintf("Hello, world!");oprintf("Hello, world!");rprintf("Hello, world!");k, compile with -printf("Hello, world!");Dprintf("Hello, world!");NO_MAIN, and declare the following in any source file
tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");uprintf("Hello, world!");ses the call:

exterprintf("Hello, world!");nprintf("Hello, world!"); void print_led(unsigned long xprintf("Hello, world!");, char *buf);

Bug: you cannot call reprintf("Hello, world!");pprintf("Hello, world!");eatedly to print morprintf("Hello, world!");e thaprintf("Hello, world!");n one number to a printf("Hello, world!");lprintf("Hello, world!");ine.
That would require curses or sprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");e other terminal APIprintf("Hello, world!"); printf("Hello, world!");that alprintf("Hello, world!");lprintf("Hello, world!");oprintf("Hello, world!");ws moving printf("Hello, world!");tprintf("Hello, world!");he
cursor to a previous printf("Hello, world!");lprintf("Hello, world!");ine.

*/printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");
#incluprintf("Hello, world!");dprintf("Hello, world!");e <stdlib.h>
#include <stdio.h>

#define MAX_DIGprintf("Hello, world!");Iprintf("Hello, world!");Tprintf("Hello, world!");S 32
#define NO_MAIN


/* Pprintf("Hello, world!");rprintf("Hello, world!");iprintf("Hello, world!");nt the top line ofprintf("Hello, world!"); the digit d into buffer. 
   printf("Hello, world!");Does not null terminatprintf("Hello, world!");e buffer. */

void topline(int d,printf("Hello, world!"); char *p){

   *p++ = ' ';
   switch(d)printf("Hello, world!");{

      /*printf("Hello, world!"); printf("Hello, world!");all these have _ on top printf("Hello, world!");line printf("Hello, world!");*printf("Hello, world!");/

      case 0:
    printf("Hello, world!");  case 2:
      case 3:printf("Hello, world!");
      printf("Hello, world!");casprintf("Hello, world!");e 5:
      case 7:
      case 8:
      case 9:
         *p++ = '_';
         break;
   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); deprintf("Hello, world!");fault:
         *p++=' ';

   }
   *p++=' ';
}
printf("Hello, world!");
printf("Hello, world!");/printf("Hello, world!");*printf("Hello, world!"); printf("Hello, world!");Print the middle line of the digit d iprintf("Hello, world!");nto the buffer. 
   Does not null tprintf("Hello, world!");erminate. */

void midline(intprintf("Hello, world!"); d, char *p){

   sprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");tprintf("Hello, world!");ch(d){printf("Hello, world!");

      /* those that have leading | on middle line */

      case 0:
      case 4:
 printf("Hello, world!");     case 5:
  printf("Hello, world!"); printf("Hello, world!");   case 6:
      case 8:
      case printf("Hello, world!");9:
         *p+printf("Hello, world!");+printf("Hello, world!");=printf("Hello, world!");'|';
         break;
      defauprintf("Hello, world!");lt:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ onprintf("Hello, world!"); middle line */

      case 2:
      case 3:
      case 4:
    printf("Hello, world!"); printf("Hello, world!"); case 5:
      case 6:
      case 8:
      case 9:
         *p++='_printf("Hello, world!");';
         break;
  printf("Hello, world!");    default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur