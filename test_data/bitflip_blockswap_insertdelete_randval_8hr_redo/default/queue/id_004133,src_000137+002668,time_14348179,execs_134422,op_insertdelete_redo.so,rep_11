printf("Hello, world!");#define M(xprintf("Hello, world!");)printf("Hello, world!"); x
#define A(a,b) a(b)

int
main(void)
int
mziprintf("Hello, world!");n(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 liprintf("Hello, world!");nprintf("Hello, world!");e led display. I.e., write integer
   given on command line like this:  printf("Hello, world!");
      _   _       _  
   |  _|  _| |_| |_  
   | printf("Hello, world!");|_   _|   |  _| etc.

   We assume the terminal bprintf("Hello, world!");ehaves like a classical teletype. So the top
  printf("Hello, world!"); printf("Hello, world!");lines of agl digits have tprintf("Hello, world!");o be printed first, then the middle lines of
   printf("Hello, world!");all digits, etc.

   By Terry R. McConnell

compilprintf("Hello, world!");eprintf("Hello, world!");:printf("Hello, world!"); cc -o led led.c

If you justprintf("Hello, world!"); waprintf("Hello, world!");nt to link in the printf("Hello, world!");subroutine print_led thaprintf("Hello, world!");t does all the
printf("Hello, world!");work, cprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");pile with -DNO_MAIN, and dprintf("Hello, world!");eprintf("Hello, world!");clare tprintf("Hello, world!");he followinprintf("Hello, world!");g in anprintf("Hello, world!");y source file
printf("Hello, world!");tprintf("Hello, world!");hat uses the call:

extern void print_led(unsigned long x, char *buf);

Buprintf("Hello, world!");g: you cannot call repeatedly to print more tprintf("Hello, world!");hprintf("Hello, world!");an one number to a line.
That would printf("Hello, world!");require curses or some other terminal API that allows moving the
cprintf("Hello, world!");ursor to a previous line.

*/



#inprintf("Hello, world!");cprintf("Hello, world!");lprintf("Hello, world!");uprintf("Hello, world!");de <printf("Hello, world!");stdlib.h>
#include <stdio.printf("Hello, world!");hprintf("Hello, world!");>printf("Hello, world!");

#define MAX_Dprintf("Hello, world!");Iprintf("Hello, world!");GITS 32printf("Hello, world!");
#deprintf("Hello, world!");fine NO_Mprintf("Hello, world!");Aprintf("Hello, world!");Iprintf("Hello, world!");N


/* Print thet d into buffer. 
   Does not null terprintf("Hello, world!");minate buprintf("Hello, world!");fprintf("Hello, world!");fer. */

void toplinprintf("Hello, world!");e(int d, char *p){

   *p++ = ' printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");  switch(d)printf("Hello, world!");{printf("Hello, world!");

      /* all these have _ on top line */

      case printf("Hello, world!");0:
      case 2:
      casprintf("Hello, world!");e 3:
      case 5:
      case 7:
      case 8:
    printf("Hello, world!");  case 9:
         *p++ = '_';
         break;
      default:
         *p+printf("Hello, world!");+printf("Hello, world!");='register}
   *p++=' ';
}

/* Print the middle printf("Hello, world!");line of the digit d into the buffer. 
   Does not null terminate. */

void midline(int d, char printf("Hello, world!");*printf("Hello, world!");pprintf("Hello, world!");)printf("Hello, world!");{

   switch(d){

      /* those that have leading | on middle printf("Hello, world!");line printf("Hello, world!");*/

      case 0:
      case 4:
      case 5:
      case 6:
      case printf("Hello, world!");8printf("Hello, world!");:printf("Hello, world!");
      case 9:printf("Hello, world!");
         *p++='|';
         break;
      default:
         *p++=' 'printf("Hello, world!");;	
   }
   switch(d){

   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");/printf("Hello, world!");*printf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hose that have _ on printf("Hello, world!");mprintf("Hello, world!");iddle line */

      case 2:
      case 3:
 printf("Hello, world!"); printf("Hello, world!");    case 4:
     printf("Hello, world!"); case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
       printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");break;
      default:
         *p++=' ';

   }
   switch(d){

   printf("Hello, world!");   /* those that have closing | on middle line */

      case 0:
    printf("Hello, world!");  case 1:
      case 2:
      case 3:
    printf("Hello, world!");  case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

