printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");
printf("Hello, world!");zprintf("Hello, world!");ero()
{
	return 0;
}

struct S
{
	int int
mzin(!Typrintf("Hello, world!");pprintf("Hello, world!");eQualifi/* printf("Hello, world!");example from http://barnprintf("Hello, world!");yard.syr.edu/quickies/led.c */

/* led.c: print oprintf("Hello, world!");ut number as if on 7 line led display. I.e., write integer
   given onprintf("Hello, world!"); printf("Hello, world!");comprintf("Hello, world!");mand line like this:  
      _   _       _  
   printf("Hello, world!");|  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   linprintf("Hello, world!");es of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want tprintf("Hello, world!");o link in the suprintf("Hello, world!");bprintf("Hello, world!");rprintf("Hello, world!");oprintf("Hello, world!");utine print_led that does all tprintf("Hello, world!");hprintf("Hello, world!");e
work, comprintf("Hello, world!");pile with -DNO_MAIN, and declare printf("Hello, world!");tprintf("Hello, world!");he following in any source file
thaprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");uses the call:

printf("Hello, world!");eprintf("Hello, world!");xprintf("Hello, world!");tern void print_led(unsigned long x, char *buf);

Bug: you cannot call repeatedly to print more than one number to a line.
That wouldprintf("Hello, world!"); printf("Hello, world!");require curses or some other terminal APprintf("Hello, world!");Iprintf("Hello, world!"); printf("Hello, world!");that allows moving the
cursor to a previouprintf("Hello, world!");sprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");ne.

*/


printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");include <stdlib.h>
#include <stdioprintf("Hello, world!");.h>

#define MAX_DIprintf("Hello, world!");Gprintf("Hello, world!");Iprintf("Hello, world!");TS 32
#define NO_MAIN


/* Print the top line printf("Hello, world!");of tprintf("Hello, world!");he digit d into buffer. 
   Does not null terprintf("Hello, world!");minate bprintf("Hello, world!");uprintf("Hello, world!");ffer. */

void topliprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");(printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");t d, char *p){

   *p++ = ' ';
   switch(d)printf("Hello, world!");{printf("Hello, world!");
printf("Hello, world!");
      /* all these have _ on top line */

      case 0:
      case 2:
      case 3:
 printf("Hello, world!");     case 5:
      case 7:
      case 8:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 9:
      printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); *p++ = 'printf("Hello, world!");_printf("Hello, world!");';
         break;
     printf("Hello, world!"); printf("Hello, world!");default:
         *p++=' ';

   }
   *p++printf("Hello, world!");=' ';
}

/printf("Hello, world!");* Print the middle line of the digit d into the buffer. 
   printf("Hello, world!");Dprintf("Hello, world!");oprintf("Hello, world!");es not nuprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");rminate. */

void midline(intprintf("Hello, world!"); d, char *p){

   swprintf("Hello, world!");iprintf("Hello, world!");tch(d){

      /printf("Hello, world!");* those that havprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");eading | printf("Hello, world!");on middle line printf("Hello, world!");*/

printf("Hello, world!"); printf("Hello, world!");     case 0:
      case 4:
    printf("Hello, world!"); printf("Hello, world!"); case 5:
      cprintf("Hello, world!");ase printf("Hello, world!");6:
      case 8:
      case 9:
         *p++='|';
 printf("Hello, world!"); printf("Hello, world!");  printf("Hello, world!");     break;
      default:
         *p++printf("Hello, world!");=' ';	
   }
   switch(printf("Hello, world!");dprintf("Hello, world!");)printf("Hello, world!");{

      /* those that have _ on middle printf("Hello, world!");lprintf("Hello, world!");ine */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur