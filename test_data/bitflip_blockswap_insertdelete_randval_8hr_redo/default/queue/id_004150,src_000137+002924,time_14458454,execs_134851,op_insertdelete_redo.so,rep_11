#define M(x) x
#define A(a,b) a(b)
printf("Hello, world!");
int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syprintf("Hello, world!");r.edu/quickies/led.c */

/* led.c: print out number aprintf("Hello, world!");s if on 7 lineprintf("Hello, world!"); led display. I.e., printf("Hello, world!");wprintf("Hello, world!");rite integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

  printf("Hello, world!"); We assume the terminal behaves like a classicalprintf("Hello, world!"); teletype. So the top
   lines of agl digits havprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e subroutine print_led that dprintf("Hello, world!");oprintf("Hello, world!");es all the
work, compile with -DNO_Mprintf("Hello, world!");Aprintf("Hello, world!");IN, and declare the fprintf("Hello, world!");ollowinprintf("Hello, world!");g in aprintf("Hello, world!");nprintf("Hello, world!");yprintf("Hello, world!"); source filprintf("Hello, world!");eprintf("Hello, world!");
printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");t uses the call:

extern void print_led(unsigned long x, char *buf);

Bug: you cannot callprintf("Hello, world!"); repeatprintf("Hello, world!");edly to print more than one number to a line.printf("Hello, world!");
That would require curses or soprintf("Hello, world!");mprintf("Hello, world!");eprintf("Hello, world!"); othprintf("Hello, world!");er terminal API that allows moving the
cursor to a previous liprintf("Hello, world!");ne.
printf("Hello, world!");
printf("Hello, world!");*/



#printf("Hello, world!");iprintf("Hello, world!");nclude <stdlib.printf("Hello, world!");h>
#include <stdprintf("Hello, world!");iprintf("Hello, world!");oprintf("Hello, world!");.h>

#deprintf("Hello, world!");fineprintf("Hello, world!"); printf("Hello, world!");Mprintf("Hello, world!");Aprintf("Hello, world!");Xprintf("Hello, world!");_printf("Hello, world!");Dprintf("Hello, world!");Iprintf("Hello, world!");GITSprintf("Hello, world!"); 32
#defiprintf("Hello, world!");ne NO_MAIN


/* Print thet d into buffer. 
 printf("Hello, world!"); printf("Hello, world!"); Does not null terminate buprintf("Hello, world!");ffer. *printf("Hello, world!");/printf("Hello, world!");
printf("Hello, world!");
void topliprintf("Hello, world!");nprintf("Hello, world!");e(int d,printf("Hello, world!"); chaprintf("Hello, world!");rprintf("Hello, world!"); *p){

   *p++ = ' 'printf("Hello, world!");;printf("Hello, world!");
   switch(d){

      /* printf("Hello, world!");aprintf("Hello, world!");ll theseprintf("Hello, world!"); printf("Hello, world!");hprintf("Hello, world!");ave _ on top line */

      casprintf("Hello, world!");eprintf("Hello, world!"); 0:
      case 2:
      case 3:
      case 5:
      case 7printf("Hello, world!");:
      case 8:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 9printf("Hello, world!");:printf("Hello, world!");
         *p++ = '_';
printf("Hello, world!");         break;
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  default:
         *printf("Hello, world!");p++='register}
   *p++=' ';
}

/* Print the middle line of printf("Hello, world!");the digit d into the buffer. 
   Does not null terminate. */

void midlinprintf("Hello, world!");e(int d, char *p){

   switch(d){

      /printf("Hello, world!");*printf("Hello, world!"); printf("Hello, world!");those thaprintf("Hello, world!");t have leading | on middlprintf("Hello, world!");e line */
printf("Hello, world!");
printf("Hello, world!");      case 0:
      case 4:
 printf("Hello, world!"); printf("Hello, world!");   printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 5:
      case 6:
      case 8:
      case 9printf("Hello, world!");:printf("Hello, world!");
         *p++='|';
         break;
      default:
         *p++=' ';	printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");  }
   switch(printf("Hello, world!");d){

      /* those that have _ on middle line printf("Hello, world!");*/

      case 2:
      case 3:
      caseprintf("Hello, world!"); 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

