int
printf("Hello, world!");zero()
{
	printf("Hello, world!");return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., wrprintf("Hello, world!");ite integer
   given on printf("Hello, world!");command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");behaves like a classicprintf("Hello, world!");aprintf("Hello, world!");l teletype. So the top
   lines of all digits havprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");to be printed first, then the middle lines of
   all digits, etc.

   By printf("Hello, world!");Tprintf("Hello, world!");erry R. McConnell

compilprintf("Hello, world!");e: cc -o led led.c

If you just want to link in the printf("Hello, world!");sprintf("Hello, world!");uprintf("Hello, world!");bprintf("Hello, world!");rprintf("Hello, world!");outine print_led that does all the
work, printf("Hello, world!");compile with -printf("Hello, world!");Dprintf("Hello, world!");NO_MAIN, and printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");cprintf("Hello, world!");lare the following in any source file
thaprintf("Hello, world!");t uses the call:

extern void print_led(unsigneprintf("Hello, world!");dprintf("Hello, world!"); printf("Hello, world!");long x, char *buf);

Bug: you cannot call repeatedly to print more tprintf("Hello, world!");han one number to a line.
That would require printf("Hello, world!");cprintf("Hello, world!");urses orprintf("Hello, world!"); somprintf("Hello, world!");eprintf("Hello, world!"); other terminal API tprintf("Hello, world!");hat allows moving the
cursor to a previousprintf("Hello, world!"); printf("Hello, world!");line.

printf("Hello, world!");*/

printf("Hello, world!");

#includprintf("Hello, world!");e <stdlib.h>
#include <stdiprintf("Hello, world!");o.h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Print the top lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); of the digit d inprintf("Hello, world!");tprintf("Hello, world!");o buffer. 
   Does not null terminate buffer. */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){
printf("Hello, world!");
printf("Hello, world!");      /* all these haprintf("Hello, world!");ve _ on top line */printf("Hello, world!");
printf("Hello, world!");
      case 0:
printf("Hello, world!");      case 2:
 printf("Hello, world!");     case 3:
      case 5:
      caseprintf("Hello, world!"); printf("Hello, world!");7printf("Hello, world!");:printf("Hello, world!");
     printf("Hello, world!"); case 8:
      cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");e 9:
         *p++ = '_';
         brprintf("Hello, world!");eprintf("Hello, world!");ak;
      default:
  printf("Hello, world!");       *p++=' ';

   }
  printf("Hello, world!"); *p++=' ';printf("Hello, world!");
printf("Hello, world!");}printf("Hello, world!");
printf("Hello, world!");
/* Print the middprintf("Hello, world!");le line of the digit d printf("Hello, world!");into the buffer. 
   Does not null terminate. */

void midline(int d, char *p){printf("Hello, world!");

   switch(d){

      /* those that have leading | on middle line */

      case 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='|';
         break;
      dprintf("Hello, world!");efault:
         *p++=' ';	
   }
   switch(d){

      /* those that have printf("Hello, world!");_printf("Hello, world!"); printf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!"); middle line */

      cprintf("Hello, world!");aprintf("Hello, world!");se 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 9:
         *p++='_printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");         break;
      default:
         *p++=' ';

   }printf("Hello, world!");
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      cprintf("Hello, world!");ase 1:
      case 2:
      case3:
printf("Hello, world!");      case 4:
      case 7:
      printf("Hello, world!");case 8:
      case printf("Hello, world!");9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur