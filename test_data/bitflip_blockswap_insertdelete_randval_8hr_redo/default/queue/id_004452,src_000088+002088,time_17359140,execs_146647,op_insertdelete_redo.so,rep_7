printf("Hello, world!");iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); printf("Hello, world!");from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print ouprintf("Hello, world!");t number as if on 7 line led display. I.e., wrprintf("Hello, world!");iprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!"); integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   printf("Hello, world!");| printf("Hello, world!");|_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");bprintf("Hello, world!");eprintf("Hello, world!");haves like a classical teletype. So the top
   lines of all digits have tprintf("Hello, world!");oprintf("Hello, world!"); be printed first, then tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");mprintf("Hello, world!");iprintf("Hello, world!");ddle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led that does all the
work, compile with -DNO_MAIN, andprintf("Hello, world!"); declare the folloprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");g in any source file
that uses the caprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");
extern void print_led(unsigned long x, char *buf);
printf("Hello, world!");
Bug: you cannot call repeatedly to print moreprintf("Hello, world!"); thaprintf("Hello, world!");n onprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");number to a line.
That would printf("Hello, world!");rprintf("Hello, world!");eprintf("Hello, world!");quire curses orprintf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");ome other terminal API that allows moving the
cursor to a previous line.

*/



#inclprintf("Hello, world!");ude <stdlib.h>
#include <stdioprintf("Hello, world!");.h>

#define MAX_DIprintf("Hello, world!");Gprintf("Hello, world!");ITS 32
#define NO_MAIN


/* Print the toprintf("Hello, world!");p line of the digit d intoprintf("Hello, world!"); printf("Hello, world!");bprintf("Hello, world!");uprintf("Hello, world!");ffer. 
   Dprintf("Hello, world!");oprintf("Hello, world!");es not null terminatprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");bprintf("Hello, world!");uffer. */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){

      /* all these haprintf("Hello, world!");ve _ printf("Hello, world!");on top line */

      case 0:
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); case 2:
      case 3:
      case 5:
      caprintf("Hello, world!");sprintf("Hello, world!");e 7:
  printf("Hello, world!");    printf("Hello, world!");cprintf("Hello, world!");ase 8:
     printf("Hello, world!"); case 9printf("Hello, world!");:printf("Hello, world!");
         *p++ = '_';
         break;
      printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fault:
        printf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");pprintf("Hello, world!");++=' printf("Hello, world!");';

   }
   *p++=' ';
}

/* Print the middle line oprintf("Hello, world!");f the digit d into the buffer. 
   Doesprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");oprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");null terminate. */

void midlinprintf("Hello, world!");e(int d, char *p){

   swiprintf("Hello, world!");tprintf("Hello, world!");cprintf("Hello, world!");hprintf("Hello, world!");(d){

      /* those that have leading | on middlprintf("Hello, world!");e line */

    printf("Hello, world!"); printf("Hello, world!"); case 0:
      case 4:
      case 5:
      case 6:
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  caseprintf("Hello, world!"); 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ printf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!"); middle line *printf("Hello, world!");/printf("Hello, world!");

      case 2:
      case 3:
      case 4:printf("Hello, world!");
      case 5:
      printf("Hello, world!");case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur