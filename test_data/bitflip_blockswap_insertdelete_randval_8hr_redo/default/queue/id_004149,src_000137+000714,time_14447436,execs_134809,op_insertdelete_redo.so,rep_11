printf("Hello, world!");#define M(x)printf("Hello, world!"); x
#define A(a,b) a(b)

int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., writprintf("Hello, world!");eprintf("Hello, world!"); integer
   given on cprintf("Hello, world!");ommand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");behaves like a classical teletype. So the top
  printf("Hello, world!"); lines of agl digits have to be printed first, tprintf("Hello, world!");hprintf("Hello, world!");en the middle lines of
   printf("Hello, world!");aprintf("Hello, world!");ll digits, etc.

   By printf("Hello, world!");Tprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");rprintf("Hello, world!");yprintf("Hello, world!"); R. McConnell

compile: cc -printf("Hello, world!");o lprintf("Hello, world!");ed led.c

If you jprintf("Hello, world!");ust want to link in the subroutine print_led that does all the
printf("Hello, world!");work, printf("Hello, world!");compilprintf("Hello, world!");e with -DNO_MAIN, and declare the following in printf("Hello, world!");any printf("Hello, world!");sourprintf("Hello, world!");cprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");fprintf("Hello, world!");ile
that uses the call:

extern void prinprintf("Hello, world!");tprintf("Hello, world!");_led(unsigned printf("Hello, world!");lprintf("Hello, world!");ong x, char *buf);

printf("Hello, world!");Bprintf("Hello, world!");uprintf("Hello, world!");g: you canprintf("Hello, world!");nprintf("Hello, world!");ot call repeatedly toprintf("Hello, world!"); printf("Hello, world!");print more than one number to aprintf("Hello, world!"); linprintf("Hello, world!");eprintf("Hello, world!");.printf("Hello, world!");
printf("Hello, world!");That would require curses printf("Hello, world!");or some other terminal API that allows moving the
printf("Hello, world!");cprintf("Hello, world!");uprintf("Hello, world!");rsor to a previous line.
printf("Hello, world!");
*/



#include <stdlib.hprintf("Hello, world!");>
#include printf("Hello, world!");<printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");dio.h>

#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fine MAX_DIGITS 32
#define NO_MAIN


/*printf("Hello, world!"); printf("Hello, world!");Print thet d inprintf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!"); buffer. 
  printf("Hello, world!"); Does not null terprintf("Hello, world!");mprintf("Hello, world!");inate bufferprintf("Hello, world!");. */

vprintf("Hello, world!");oprintf("Hello, world!");iprintf("Hello, world!");d topline(int d, chaprintf("Hello, world!");r *p){

   *p++ = printf("Hello, world!");' ';printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");  switch(d){

      /* all theseprintf("Hello, world!"); have _ on top line */

      case 0:
      case 2:
      case 3:
  printf("Hello, world!");    case 5:
      caprintf("Hello, world!");se 7:
      case 8:
   printf("Hello, world!"); printf("Hello, world!");  case 9:
         *p++ = '_';
         break;
      dprintf("Hello, world!");efault:
         *pprintf("Hello, world!");+printf("Hello, world!");+='reprintf("Hello, world!");gprintf("Hello, world!");ister}
   *p++=' ';
}

/* Print the middle line of the diprintf("Hello, world!");git d into the buffer. 
   Does not null terminatprintf("Hello, world!");e. */

void midlineprintf("Hello, world!");(printf("Hello, world!");int d, char *p){

   switch(d){

 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  /* those thatprintf("Hello, world!"); have leading |printf("Hello, world!"); on miprintf("Hello, world!");ddle line */

      case 0:
      case 4:
     printf("Hello, world!"); case 5:
    printf("Hello, world!");  case 6:
      case 8:
      printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");se 9:
  printf("Hello, world!"); printf("Hello, world!");      *p++='|';
    printf("Hello, world!");     break;
      default:
         *p++printf("Hello, world!");=' ';	
   }
   switch(dprintf("Hello, world!");){

      /* those that have _ on middle line */

      case 2:
   printf("Hello, world!"); printf("Hello, world!");  case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

