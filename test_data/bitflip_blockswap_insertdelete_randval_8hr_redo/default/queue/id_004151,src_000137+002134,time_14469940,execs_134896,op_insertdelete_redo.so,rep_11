printf("Hello, world!");#printf("Hello, world!");defineprintf("Hello, world!"); M(x) x
#define A(a,b) a(b)

int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 lineprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");d display. I.e., write integer
   given on cprintf("Hello, world!");ommand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
 printf("Hello, world!");  |printf("Hello, world!"); printf("Hello, world!");|_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of agl digits have to be printed first, then the middle lines of
   all digits, etc.

   By printf("Hello, world!");Tprintf("Hello, world!");eprintf("Hello, world!");rry R. McConnell

compile: cc -o led led.c

If you just want to link in the printf("Hello, world!");sprintf("Hello, world!");uprintf("Hello, world!");broutine print_led thaprintf("Hello, world!");t does all the
work, compile with -DNO_MAIN, and declare the following in any source file
that uses the call:

extern void pprintf("Hello, world!");rprintf("Hello, world!");iprintf("Hello, world!");nt_led(unsprintf("Hello, world!");igned long x, charprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");buf);

Bug: you cannot call reprintf("Hello, world!");pprintf("Hello, world!");eatedly to pprintf("Hello, world!");rprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!"); more tprintf("Hello, world!");han oprintf("Hello, world!");ne nprintf("Hello, world!");umbeprintf("Hello, world!");rprintf("Hello, world!"); to a line.
That would reqprintf("Hello, world!");uire curses or some other terminal Aprintf("Hello, world!");Pprintf("Hello, world!");I that allows moving the
cursor to aprintf("Hello, world!"); previous line.

*/



#include <stdlib.printf("Hello, world!");h>
#include <stprintf("Hello, world!");dprintf("Hello, world!");io.h>printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");#define MAX_DIGITS 32
#deprintf("Hello, world!");fprintf("Hello, world!");iprintf("Hello, world!");ne NO_MAIprintf("Hello, world!");N


/* Print thet d into buffer. 
   Does not null termprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");ate buffer. */

void toplinprintf("Hello, world!");e(int d, char *p){printf("Hello, world!");
printf("Hello, world!");
   *p++ = ' ';
   switch(d){

      /* printf("Hello, world!");aprintf("Hello, world!");ll these haprintf("Hello, world!");vprintf("Hello, world!");eprintf("Hello, world!"); _ on top lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");/printf("Hello, world!");

      caseprintf("Hello, world!"); 0:
printf("Hello, world!");    printf("Hello, world!");  caprintf("Hello, world!");se 2:
      case 3:
      case 5:
      case printf("Hello, world!");7:
      case 8:
      case 9:
         *p++ = '_';
         break;
      default:
         *p+printf("Hello, world!");+printf("Hello, world!");='register}
   *p++=' ';
}

/printf("Hello, world!");* Print the middle line of the digit d into thprintf("Hello, world!");e buffer. 
   Does not null terminate. */

void midprintf("Hello, world!");line(int d, char *p){

   switch(d){

      /* those that have leading | on middle line */

      case 0printf("Hello, world!");:printf("Hello, world!");
      case 4:
      case 5:
      case 6:
      case 8:
      caseprintf("Hello, world!"); 9:
         *p++='|';
  printf("Hello, world!");       breprintf("Hello, world!");ak;
      default:
         *p++=' ';	
   }
   switch(d){

      printf("Hello, world!");/printf("Hello, world!");* those thprintf("Hello, world!");at have _ on mprintf("Hello, world!");iddle line */

 printf("Hello, world!");     case 2:
      case 3:
printf("Hello, world!");      casprintf("Hello, world!");e 4:
   printf("Hello, world!");   case 5:
      case 6:
      case 8:
      case 9:
       printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");p++='_';
         break;
      default:
         *p++=' ';
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");}printf("Hello, world!");
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

