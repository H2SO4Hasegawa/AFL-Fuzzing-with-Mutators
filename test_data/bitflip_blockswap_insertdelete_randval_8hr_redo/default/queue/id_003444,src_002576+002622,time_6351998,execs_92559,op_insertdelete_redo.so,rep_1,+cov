int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

printf("Hello, world!");/* led.c: print out number as if on 7 line led displprintf("Hello, world!");ay. I.e., write integer
   given on printf("Hello, world!");command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
  printf("Hello, world!"); lines of all digits hprintf("Hello, world!");aveprintf("Hello, world!"); printf("Hello, world!");to be printed first, tprintf("Hello, world!");hen the middle lines of
   all digits, etc.

   By Terry R. McConnell

printf("Hello, world!");compile: cc -o led led.c

Ifprintf("Hello, world!"); printf("Hello, world!");yprintf("Hello, world!");oprintf("Hello, world!");uprintf("Hello, world!"); just want to link in the subroutine print_led that does aprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");he
work, compile with -DNO_MAIN, and declare the following in any source file
printf("Hello, world!");that uprintf("Hello, world!");sprintf("Hello, world!");es the cprintf("Hello, world!");all:printf("Hello, world!");

exprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");n void print_led(unprintf("Hello, world!");signed long x, char *buf);

Bug: you printf("Hello, world!");cprintf("Hello, world!");annot call reprintf("Hello, world!");peatedly to print more than one number to a liprintf("Hello, world!");ne.
That would reqprintf("Hello, world!");uprintf("Hello, world!");ire curses or some other terminal API that allows moving the
cuprintf("Hello, world!");rsor to a previous line.

*/



#include <printf("Hello, world!");stdlprintf("Hello, world!");iprintf("Hello, world!");b.h>
#include <stdio.printf("Hello, world!");h>

#define MAX_DIGITS 32
#define NO_MAIN


/printf("Hello, world!");*printf("Hello, world!"); Print the top line of theprintf("Hello, world!"); printf("Hello, world!");digit d into buffer. 
   Does not null terminate printf("Hello, world!");bprintf("Hello, world!");uprintf("Hello, world!");fprintf("Hello, world!");fer. */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){

      /* all these have printf("Hello, world!");_printf("Hello, world!"); printf("Hello, world!");oprintf("Hello, world!");n top line */

      case 0printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    case 2:printf("Hello, world!");
printf("Hello, world!");      case 3:
      case 5:
      case 7:
      case 8:
      case 9:
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");*p++ = '_';
         break;
      default:
         *p++=' ';

   }
   *p++=' ';
}

/* Pprintf("Hello, world!");rint the middle line of the digit d into tprintf("Hello, world!");hprintf("Hello, world!");e buffer. 
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); Does not null terminate. */

void midline(int d, char *p){

   switch(d){

      /* those that have lprintf("Hello, world!");eprintf("Hello, world!");adingprintf("Hello, world!"); printf("Hello, world!");|printf("Hello, world!"); printf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!"); printf("Hello, world!");middprintf("Hello, world!");le line */

      case 0:
      case 4:
      case 5:
      case 6:
 printf("Hello, world!"); printf("Hello, world!");    caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");8:
      cprintf("Hello, world!");aprintf("Hello, world!");se 9:
         *p+printf("Hello, world!");+='|';
         break;
      defaprintf("Hello, world!");ult:
         *printf("Hello, world!");p++=' ';	
   }
   switch(d)printf("Hello, world!");{printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");      /* those that have _ on middle line */

      cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");2printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   return 0;

}
#endif

/* vim: set expandtab ts=4 