int
printf("Hello, world!");mprintf("Hello, world!");zin(!TypeQualifi/* exampleprintf("Hello, world!"); printf("Hello, world!");from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 liprintf("Hello, world!");ne led display. I.e., write integer
   given on command line like this:  
      _   _       _  
 printf("Hello, world!");  |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classicprintf("Hello, world!");alprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");letype. So the top
   lines of all digits have tprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");bprintf("Hello, world!");e printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you jprintf("Hello, world!");ust want to link in the subroutine print_led that printf("Hello, world!");dprintf("Hello, world!");oes all the
work, compile with -DNO_MAIN, printf("Hello, world!");and declare thprintf("Hello, world!");eprintf("Hello, world!"); following iprintf("Hello, world!");n any source file
tprintf("Hello, world!");hat uses the call:

extern void print_led(unsigned long x, char *buf);

Buprintf("Hello, world!");gprintf("Hello, world!");: yprintf("Hello, world!");oprintf("Hello, world!");uprintf("Hello, world!"); cannot call repeatedly to print more than one number toprintf("Hello, world!"); printf("Hello, world!");aprintf("Hello, world!"); line.
That would require printf("Hello, world!");curses or some other terminal API that allows mprintf("Hello, world!");oving the
cursor to a previous line.

*/



#include <stdlib.h>
#include <stdio.printf("Hello, world!");hprintf("Hello, world!");>printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fine MAX_DIGITprintf("Hello, world!");Sprintf("Hello, world!"); 32
#define NO_MAIN


/* Pprintf("Hello, world!");rintprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e top line of the digit d into buffer. 
   Does not nuprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!"); terminate buffer. */

void toplineprintf("Hello, world!");(printf("Hello, world!");iprintf("Hello, world!");nt d, char printf("Hello, world!");*printf("Hello, world!");p){

   *p++printf("Hello, world!"); printf("Hello, world!");= ' ';
printf("Hello, world!"); printf("Hello, world!");  switch(d){printf("Hello, world!");
printf("Hello, world!");
      printf("Hello, world!");/* all these have _ on printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!");p line */

      case 0:
      case 2:
      case printf("Hello, world!");3printf("Hello, world!");:
      printf("Hello, world!");case 5:
      caseprintf("Hello, world!"); 7:
      case 8:
      case 9:
       printf("Hello, world!");  *p++ = 'printf("Hello, world!");_printf("Hello, world!");';
         break;
     printf("Hello, world!"); printf("Hello, world!");default:
   printf("Hello, world!");     printf("Hello, world!"); printf("Hello, world!");*p++=' ';

   }
   *p++=' ';
}

/* Print the middle linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");of the digit d intprintf("Hello, world!");o the buffer. 
   Doeprintf("Hello, world!");s not null terminate. */

void midline(intprintf("Hello, world!"); d, char *p){

   switch(d){

      /* those thatprintf("Hello, world!"); printf("Hello, world!");hprintf("Hello, world!");ave leading | on middle line */

      case 0:
      caseprintf("Hello, world!"); printf("Hello, world!");4printf("Hello, world!");:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");5:
      printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 6:
      case 8:
   printf("Hello, world!");   cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");e 9:
         *p++='|';
         break;
      defaulprintf("Hello, world!");t:
         *p++=' ';	
   }
   switch(d){printf("Hello, world!");

      /* those that printf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");ve _ on middprintf("Hello, world!");lprintf("Hello, world!");e line */

    printf("Hello, world!");  case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   return 0;

}
#endif

/* vim: set expandtab ts=4 