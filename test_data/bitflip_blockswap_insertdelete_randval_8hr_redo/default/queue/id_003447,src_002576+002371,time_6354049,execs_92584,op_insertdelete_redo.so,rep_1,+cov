int
printf("Hello, world!");mprintf("Hello, world!");zin(!TypeQualifi/* exampleprintf("Hello, world!"); printf("Hello, world!");from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print ouprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");umber as if on 7 line led display. I.e., wriprintf("Hello, world!");te integer
   given on command line like this:  
 printf("Hello, world!"); printf("Hello, world!");    _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");behaves like a classical teletype. So the top
   liprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); of all digits have to be printed first, then tprintf("Hello, world!");he middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led printf("Hello, world!");led.c

If you jusprintf("Hello, world!");tprintf("Hello, world!"); want to link in the subroutine print_led printf("Hello, world!");tprintf("Hello, world!");hat does all the
work, compile with printf("Hello, world!");-DNO_MAIN, and declare the followprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");gprintf("Hello, world!"); printf("Hello, world!");in any source file
that usprintf("Hello, world!");es the call:

printf("Hello, world!");extern void print_led(unsigned long x, char *buf);

Bug: you cannot cprintf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l repeatedly to print morprintf("Hello, world!");e thaprintf("Hello, world!");nprintf("Hello, world!"); one number to a line.
That would require printf("Hello, world!");cprintf("Hello, world!");uprintf("Hello, world!");rses or some other terminaprintf("Hello, world!");lprintf("Hello, world!"); printf("Hello, world!");Aprintf("Hello, world!");Pprintf("Hello, world!");I that allows moving the
printf("Hello, world!");cprintf("Hello, world!");uprintf("Hello, world!");rsor to a previous lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");e.

*/



printf("Hello, world!");#printf("Hello, world!");include <stdlib.h>
#include <stdio.h>

#define Mprintf("Hello, world!");AX_DIGITS 32
#define NO_MAIN


/* Print the top line of the digit d into buffer. 
   printf("Hello, world!");Dprintf("Hello, world!");oes not null terminatprintf("Hello, world!");e bufprintf("Hello, world!");fprintf("Hello, world!");er. */

void topline(int d, char *p){

   *p++ = ' ';
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");witch(d){

      /* aprintf("Hello, world!");ll these haprintf("Hello, world!");ve _ on topprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ine */

      printf("Hello, world!");case 0:
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
      caseprintf("Hello, world!"); 9:
         *p++ = '_';
         break;
    printf("Hello, world!"); printf("Hello, world!"); default:
         *p++=printf("Hello, world!");'printf("Hello, world!"); ';

   }
  printf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");pprintf("Hello, world!");+printf("Hello, world!");+=' ';
}
printf("Hello, world!");
/* Print the middlprintf("Hello, world!");eprintf("Hello, world!"); lineprintf("Hello, world!"); printf("Hello, world!");of the digit d into the buffer. 
   Does not null terminate. */

void midliprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");(int d, char *p){

   switch(d){

      /* thoseprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hat havprintf("Hello, world!");e leading | on midprintf("Hello, world!");dle line */

      case 0:printf("Hello, world!");
printf("Hello, world!");      printf("Hello, world!");case 4printf("Hello, world!");:
      case 5:
      case 6:
      case 8:
      case 9:
         *p+printf("Hello, world!");+printf("Hello, world!");=printf("Hello, world!");'printf("Hello, world!");|';
   printf("Hello, world!");   printf("Hello, world!");   break;
      default:
         *p++=' ';	
 printf("Hello, world!"); printf("Hello, world!"); }
   switch(d){printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     /* those thaprintf("Hello, world!");t have _ on middle printf("Hello, world!");line */

    printf("Hello, world!");  case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   return 0;

}
#endif

/* vim: set expandtab ts=4 