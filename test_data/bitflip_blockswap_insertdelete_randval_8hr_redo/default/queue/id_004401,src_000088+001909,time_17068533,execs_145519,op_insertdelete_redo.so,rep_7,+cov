int
printf("Hello, world!");zero()
{printf("Hello, world!");
printf("Hello, world!");	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* lprintf("Hello, world!");eprintf("Hello, world!");d.c: print out number as if on 7 line led display. I.e., write integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classprintf("Hello, world!");iprintf("Hello, world!");calprintf("Hello, world!"); teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By printf("Hello, world!");Terry R. McConnell

compile: cc -o led led.c

Ifprintf("Hello, world!"); printf("Hello, world!");yprintf("Hello, world!");oprintf("Hello, world!");u just want to link in the subroutine print_led that does all the
work, compileprintf("Hello, world!"); printf("Hello, world!");with -DNO_MAIN, andprintf("Hello, world!"); printf("Hello, world!");declare the following in any source file
that uses the calprintf("Hello, world!");l:

extern void print_lprintf("Hello, world!");eprintf("Hello, world!");d(unsigned long x, char *buf);

Bug:printf("Hello, world!"); printf("Hello, world!");yprintf("Hello, world!");ou cannot call reprintf("Hello, world!");pprintf("Hello, world!");eprintf("Hello, world!");aprintf("Hello, world!");tedly to print more than one nuprintf("Hello, world!");mprintf("Hello, world!");bprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");o a line.
That would requireprintf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");urses or sprintf("Hello, world!");ome other terminal API that allows movingprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");he
cursor tprintf("Hello, world!");o a previous line.

*/


printf("Hello, world!");
printf("Hello, world!");#incluprintf("Hello, world!");de <stdlib.h>
#include <stdioprintf("Hello, world!");.printf("Hello, world!");hprintf("Hello, world!");>printf("Hello, world!");

#define MAX_DIGITS 32
#define Nprintf("Hello, world!");O_MAIN


/* Print the top lprintf("Hello, world!");iprintf("Hello, world!");ne of the digit d into buffer. 
   Does not null terminate printf("Hello, world!");buffer. */

void topline(int d, char *p){

   printf("Hello, world!");*p++ = ' ';
   switprintf("Hello, world!");cprintf("Hello, world!");h(d){

      /*printf("Hello, world!"); all these have printf("Hello, world!");_printf("Hello, world!"); on top linprintf("Hello, world!");eprintf("Hello, world!"); */

  printf("Hello, world!"); printf("Hello, world!");   case 0:
      case 2:
      caseprintf("Hello, world!"); printf("Hello, world!");3:
      case 5:
      case 7:
      case 8:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 9:
         *p++ = '_';
         break;
  printf("Hello, world!"); printf("Hello, world!");  printf("Hello, world!"); printf("Hello, world!");default:
         *p++=printf("Hello, world!");' ';

   }
   *p++=' 'printf("Hello, world!");;printf("Hello, world!");
}

/* Print the middle lineprintf("Hello, world!"); of the digit d into the buffer. 
   Does not nprintf("Hello, world!");ull terminate. */

void midline(int d, char *p){

   switch(d){

   printf("Hello, world!");   /* those that haveprintf("Hello, world!"); leading | on middle line printf("Hello, world!");*/

      case printf("Hello, world!");0:
      case 4:
      case 5:
      case 6:
      case 8:
      casprintf("Hello, world!");eprintf("Hello, world!"); 9:
         *p++printf("Hello, world!");=printf("Hello, world!");'printf("Hello, world!");|printf("Hello, world!");';
     printf("Hello, world!"); printf("Hello, world!");   break;
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fault:
   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); *p++=' ';	
   }
   switch(d){

      /* those that hprintf("Hello, world!");aprintf("Hello, world!");vprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");_ on middle line */

      case 2:
      case 3:
      caprintf("Hello, world!");se 4:
      case 5:
      cprintf("Hello, world!");ase 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur