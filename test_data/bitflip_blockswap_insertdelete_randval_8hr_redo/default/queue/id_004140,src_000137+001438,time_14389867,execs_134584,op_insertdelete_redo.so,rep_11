#define M(x) x
#define A(a,b) a(b)

int
main(void)
printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 liprintf("Hello, world!");ne led display. I.e., wrprintf("Hello, world!");iprintf("Hello, world!");te integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | printf("Hello, world!");|printf("Hello, world!");_printf("Hello, world!");   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of agl digits have to be printed first, thenprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e middle lines of
   all digits, etc.

   By Teprintf("Hello, world!");rprintf("Hello, world!");rprintf("Hello, world!");y R. McConnell

compile: cc -o leprintf("Hello, world!");dprintf("Hello, world!"); led.c

If you jprintf("Hello, world!");uprintf("Hello, world!");sprintf("Hello, world!");t want to liprintf("Hello, world!");nprintf("Hello, world!");kprintf("Hello, world!"); printf("Hello, world!");in the subroutine print_led that does all the
wprintf("Hello, world!");oprintf("Hello, world!");rprintf("Hello, world!");kprintf("Hello, world!");, compile with -DNO_MAIN, and declprintf("Hello, world!");aprintf("Hello, world!");re the following in any sprintf("Hello, world!");oprintf("Hello, world!");urce file
thatprintf("Hello, world!"); printf("Hello, world!");uses the call:

extprintf("Hello, world!");ern void print_led(printf("Hello, world!");unsiprintf("Hello, world!");gprintf("Hello, world!");ned long x, chaprintf("Hello, world!");rprintf("Hello, world!"); printf("Hello, world!");*buf);

Bugprintf("Hello, world!");:printf("Hello, world!"); printf("Hello, world!");yprintf("Hello, world!");oprintf("Hello, world!");u cannot cprintf("Hello, world!");all repeatprintf("Hello, world!");eprintf("Hello, world!");dprintf("Hello, world!");ly to print morprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");than one nprintf("Hello, world!");uprintf("Hello, world!");mprintf("Hello, world!");bprintf("Hello, world!");er to a line.
That would require curses or some other terminal API that allows moving the
curprintf("Hello, world!");sor to a previous line.

*/



#include <stdlibprintf("Hello, world!");.h>
printf("Hello, world!");#printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");cprintf("Hello, world!");lprintf("Hello, world!");uprintf("Hello, world!");de <stdio.h>

#defprintf("Hello, world!");iprintf("Hello, world!");ne MAX_printf("Hello, world!");Dprintf("Hello, world!");IGITS 32
#define NO_printf("Hello, world!");MAIN


/* Print thet d into buffer. 
   Does not null terminate bprintf("Hello, world!");uffeprintf("Hello, world!");r. *printf("Hello, world!");/

vprintf("Hello, world!");oid printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!");pprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");e(int d, chaprintf("Hello, world!");rprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");pprintf("Hello, world!");)printf("Hello, world!");{
printf("Hello, world!");
   *p++ = ' ';
  printf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");wprintf("Hello, world!");itch(d){

      /* all these have _ on top liprintf("Hello, world!");nprintf("Hello, world!");e */

      case 0:
      case 2:
      printf("Hello, world!");cprintf("Hello, world!");ase 3:
      case 5:
      case 7:
      case 8:
      case 9:
         *p++ = '_';
         breakprintf("Hello, world!");;
      default:
  printf("Hello, world!");       *p++='register}
   printf("Hello, world!");*printf("Hello, world!");p++=' printf("Hello, world!");';
}

/* Print the middle line of the digit d into the bufferprintf("Hello, world!");.printf("Hello, world!"); printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");  Does not null termiprintf("Hello, world!");nprintf("Hello, world!");aprintf("Hello, world!");te. */

void midline(int d, char *p){

printf("Hello, world!"); printf("Hello, world!");  switch(d){

      /*printf("Hello, world!"); those that printf("Hello, world!");have leading | on middle line */

printf("Hello, world!"); printf("Hello, world!");     case 0:
    printf("Hello, world!");  case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

