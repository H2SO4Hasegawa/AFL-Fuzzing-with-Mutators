int
printf("Hello, world!");mprintf("Hello, world!");zprintf("Hello, world!");iprintf("Hello, world!");n(!TypeQualifi/* example from http://barnyard.syr.eduprintf("Hello, world!");/quickies/led.printf("Hello, world!");cprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");/printf("Hello, world!");
printf("Hello, world!");
/* led.c: print out number as if on 7 line led display. I.e., write integer
   given onprintf("Hello, world!"); printf("Hello, world!");command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teprintf("Hello, world!");lprintf("Hello, world!");etype. So the top
   liprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); of all digits have to be printed first, then the mprintf("Hello, world!");iddlprintf("Hello, world!");e printf("Hello, world!");lines of
   all diprintf("Hello, world!");gits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want toprintf("Hello, world!"); link in the subroutine print_led thatprintf("Hello, world!"); does all the
work, compile with -DNO_MAIN, and declare the following in any source file
that uses theprintf("Hello, world!"); call:

extern void print_lprintf("Hello, world!");ed(unsigneprintf("Hello, world!");dprintf("Hello, world!"); long x, char *buf);

Bug: you printf("Hello, world!");cannot printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l printf("Hello, world!");repeprintf("Hello, world!");atedprintf("Hello, world!");ly tprintf("Hello, world!");oprintf("Hello, world!"); print more than one printf("Hello, world!");number to a line.
That would require cursprintf("Hello, world!");es orprintf("Hello, world!"); somprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");other terminal APIprintf("Hello, world!"); printf("Hello, world!");that allows moving the
cursor to a previous lprintf("Hello, world!");iprintf("Hello, world!");ne.

*/printf("Hello, world!");



printf("Hello, world!");#include <stdlib.h>
#include <stdio.h>

#define MAX_DIprintf("Hello, world!");GITprintf("Hello, world!");S 32
#define NO_MAIN


/* Print the top line of the digit d into buffer. 
   Dprintf("Hello, world!");oes not null terminate buffer. */

void topliprintf("Hello, world!");ne(inprintf("Hello, world!");tprintf("Hello, world!"); d, char *p){

   *p++ = ' ';
   switch(d){

    printf("Hello, world!");  /* all these have _ on top line */

    printf("Hello, world!"); printf("Hello, world!"); case 0printf("Hello, world!");:
      case 2:
      case 3:
      case 5:
      caseprintf("Hello, world!"); printf("Hello, world!");7printf("Hello, world!");:
      case 8:
      case 9:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   *p++ = '_';
         break;
      default:
         *p++=' ';

   }
  printf("Hello, world!"); *p++=' ';
}

/*printf("Hello, world!"); printf("Hello, world!");Pprintf("Hello, world!");rint the middle line of the digit d iprintf("Hello, world!");nprintf("Hello, world!");to the buffer. 
   Does not nulprintf("Hello, world!");l terminate. */

void midline(int d, char *p){
printf("Hello, world!");
printf("Hello, world!");   switch(d){

      /* tprintf("Hello, world!");hose that have leading | on middle line */

      case 0:
     printf("Hello, world!"); case 4:
      case 5:
      case 6:
   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); case 8:
      caseprintf("Hello, world!"); 9:
         *p++='|';
  printf("Hello, world!");       break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on printf("Hello, world!");mprintf("Hello, world!");iprintf("Hello, world!");ddle line */

      printf("Hello, world!");cprintf("Hello, world!");ase 2:
      case 3:
 printf("Hello, world!");     case 4:
printf("Hello, world!"); printf("Hello, world!");     printf("Hello, world!");case 5:
      case 6:
      caprintf("Hello, world!");sprintf("Hello, world!");e 8:
      case 9:
         *p++='_';
         break;
      defaprintf("Hello, world!");uprintf("Hello, world!");lprintf("Hello, world!");tprintf("Hello, world!");:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on miprintf("Hello, world!");dprintf("Hello, world!");dle line */

  printf("Hello, world!");    case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   return 0;

}
#endif

/* vim: set expandtab ts=4 