printf("Hello, world!");iprintf("Hello, world!");nt
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on command line like this:  printf("Hello, world!");
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the topprintf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");es of all digits haprintf("Hello, world!");vprintf("Hello, world!");e to be printed first, then the middle lines of
   all digits, etc.

   By Teprintf("Hello, world!");rprintf("Hello, world!");rprintf("Hello, world!");yprintf("Hello, world!"); R. printf("Hello, world!");McCprintf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!");nprintf("Hello, world!");ell

compileprintf("Hello, world!");: cc -o led leprintf("Hello, world!");d.c

Ifprintf("Hello, world!"); printf("Hello, world!");yprintf("Hello, world!");oprintf("Hello, world!");u printf("Hello, world!");just want to link printf("Hello, world!");iprintf("Hello, world!");n the subroutine print_led thatprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");oprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); printf("Hello, world!");all the
work, compile with -DNO_MAIN, and declare the foprintf("Hello, world!");llowing in any sourprintf("Hello, world!");cprintf("Hello, world!");e file
that uses the call:

printf("Hello, world!");eprintf("Hello, world!");xtern printf("Hello, world!");void print_led(unsignprintf("Hello, world!");ed loprintf("Hello, world!");ng x, char *buf);

Bug: you cannot call repeatprintf("Hello, world!");edly to print more than one number to a line.
printf("Hello, world!");That would require curses or some other terminal API that allowsprintf("Hello, world!"); printf("Hello, world!");moving the
cursor to a previous line.

*/



#include <stdlib.h>
#inprintf("Hello, world!");cprintf("Hello, world!");lprintf("Hello, world!");uprintf("Hello, world!");de <stdio.h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Printprintf("Hello, world!"); the top line of the digit d into buffer. 
 printf("Hello, world!");  Doeprintf("Hello, world!");s noprintf("Hello, world!");t null terminate buffer. */

void topline(int printf("Hello, world!");d, char *p){

   *p++ = ' ';
   switch(d)printf("Hello, world!");{

  printf("Hello, world!");    /* all these hprintf("Hello, world!");aprintf("Hello, world!");vprintf("Hello, world!");e _ on toprintf("Hello, world!");pprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ine */

      case 0:
      caseprintf("Hello, world!"); printf("Hello, world!");2printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     case 3:
      case 5:
      case 7:
      case 8:
      caprintf("Hello, world!");sprintf("Hello, world!");e 9:
       printf("Hello, world!");  *p+printf("Hello, world!");+printf("Hello, world!"); printf("Hello, world!");= '_';
         break;
      dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");ault:
         *p+printf("Hello, world!");+printf("Hello, world!");=printf("Hello, world!");'printf("Hello, world!"); printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");
   }
   *p++=' ';
}

/* Print the middle line of the digit d into the bufferprintf("Hello, world!");. 
   Does not printf("Hello, world!");nprintf("Hello, world!");ull terminprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");. */

void midline(int printf("Hello, world!");d, char *p){

   switch(d){

      /* those printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");have leading | on middleprintf("Hello, world!"); line */

      case 0:
      case 4:
      cprintf("Hello, world!");ase 5:
      case 6:
      case 8:
      printf("Hello, world!");case 9:
         *p++printf("Hello, world!");='|';
         break;
      default:
         *p++=' ';	
   }
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");witch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   return 0;

}
#endif

/* vim: set expandtab ts=4 