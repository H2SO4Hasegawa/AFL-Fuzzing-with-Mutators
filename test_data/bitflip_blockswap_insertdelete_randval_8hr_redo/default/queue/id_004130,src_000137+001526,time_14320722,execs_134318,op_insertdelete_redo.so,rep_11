#define M(x) x
printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");ine A(a,b) a(b)

int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., wrprintf("Hello, world!");iprintf("Hello, world!");te integer
   given on cprintf("Hello, world!");ommand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");| |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of agl digits have to be printed first, then the middle lines of
   all digits, etc.

   By printf("Hello, world!");Terry R. McConnell

compile: cc -o led led.c

If yprintf("Hello, world!");ou just want to link in the subroutine print_led that does all the
work, compilprintf("Hello, world!");eprintf("Hello, world!"); with -DNO_MAIN, and declare the folprintf("Hello, world!");lprintf("Hello, world!");owing in any source file
that uses the call:

extern printf("Hello, world!");vprintf("Hello, world!");oid print_led(unsignedprintf("Hello, world!"); printf("Hello, world!");long x, char *buf);

Bug: you cannotprintf("Hello, world!"); call repeatedly to print more than one number to a line.
That would require curprintf("Hello, world!");sprintf("Hello, world!");es or some other terminal API that allows mprintf("Hello, world!");oprintf("Hello, world!");ving the
cursor to a previous line.

*/



#include printf("Hello, world!");<printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");dprintf("Hello, world!");lib.h>
#inprintf("Hello, world!");clude <stdio.h>printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");defiprintf("Hello, world!");ne Mprintf("Hello, world!");AX_DIGITS 32
#define NO_Mprintf("Hello, world!");Aprintf("Hello, world!");Iprintf("Hello, world!");N


/* Print thet d into buffer. 
 printf("Hello, world!");  Does not null teprintf("Hello, world!");rprintf("Hello, world!");minate buffer. */

void topline(int d, cprintf("Hello, world!");har *p){

   *p++ = ' ';
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");witch(d){

      /* all theprintf("Hello, world!");se have _ on top line */

   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");aseprintf("Hello, world!"); 0:
      case 2:
      case 3:
      casprintf("Hello, world!");e 5:
      case 7:
      case 8:
      case 9:
         *p++ = '_';
         breprintf("Hello, world!");aprintf("Hello, world!");k;
      default:
         *p++='register}
   *p++=' ';
}

/* Print the middprintf("Hello, world!");le lprintf("Hello, world!");ine printf("Hello, world!");of the digit d intprintf("Hello, world!");oprintf("Hello, world!"); the buffer. 
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); Does not null terminate. */

voiprintf("Hello, world!");d midline(int d, chaprintf("Hello, world!");r *p){

   switch(d){
printf("Hello, world!");
      /*printf("Hello, world!"); those that have leading | on middle line */

 printf("Hello, world!"); printf("Hello, world!");    case 0:
      case 4:
      case 5:
   printf("Hello, world!"); printf("Hello, world!");  case 6:
      case 8:
      case 9:
        printf("Hello, world!"); *p++='|';printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");        break;
      deprintf("Hello, world!");fault:
         *p++=' ';	
   }
   switch(printf("Hello, world!");dprintf("Hello, world!");){

      /* those that have _ onprintf("Hello, world!"); printf("Hello, world!");middle line */

 printf("Hello, world!"); printf("Hello, world!");    printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 2:
      case 3:
      case 4:
     printf("Hello, world!"); cprintf("Hello, world!");ase 5printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      case 6:
      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");8printf("Hello, world!");:
      caseprintf("Hello, world!"); printf("Hello, world!");9printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

