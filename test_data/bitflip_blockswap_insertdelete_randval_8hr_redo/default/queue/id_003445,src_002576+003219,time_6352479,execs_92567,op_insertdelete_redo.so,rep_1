int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

printf("Hello, world!");/printf("Hello, world!");*printf("Hello, world!"); lprintf("Hello, world!");ed.c: print ouprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");number as if on 7 line led display. I.e., write integer
   given on cprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");mand line like this:printf("Hello, world!");  
printf("Hello, world!");      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

  printf("Hello, world!"); We assume the terminal behaves like a classical teprintf("Hello, world!");lprintf("Hello, world!");etype. So the top
   liprintf("Hello, world!");nprintf("Hello, world!");es of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry printf("Hello, world!");Rprintf("Hello, world!");.printf("Hello, world!"); printf("Hello, world!");Mprintf("Hello, world!");cConnell

compile: cc -o led led.c

If yoprintf("Hello, world!");u just want toprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ink in the subroutine print_lprintf("Hello, world!");eprintf("Hello, world!");d that does all the
woprintf("Hello, world!");rk, printf("Hello, world!");compile with printf("Hello, world!");-printf("Hello, world!");DNO_printf("Hello, world!");Mprintf("Hello, world!");Aprintf("Hello, world!");IN, and declare thprintf("Hello, world!");eprintf("Hello, world!"); following in any source file
that uses the call:

eprintf("Hello, world!");xtern void print_lprintf("Hello, world!");eprintf("Hello, world!");d(unsigned lprintf("Hello, world!");ong x, char *buf);

Bug: yoprintf("Hello, world!");u cannot call repeatedly to print more thprintf("Hello, world!");an onprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");umber to a line.
That would require curses or some other terminal API that allows moving the
cursor to a previous line.

*/



#include <stdlib.h>
#include <printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");dio.h>

#defineprintf("Hello, world!"); printf("Hello, world!");MAX_DIGITSprintf("Hello, world!"); 32
#define NO_MAIN


/* Print the top line oprintf("Hello, world!");fprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e digit d into buffer. 
   Does noprintf("Hello, world!");tprintf("Hello, world!"); null terminate buffer. */

void toplineprintf("Hello, world!");(printf("Hello, world!");iprintf("Hello, world!");nt d, char *p){

   *p++ = ' printf("Hello, world!");';
   switch(d){

     printf("Hello, world!"); /* all these have _ on toprintf("Hello, world!");pprintf("Hello, world!"); printf("Hello, world!");line */

      case 0:
      printf("Hello, world!");caseprintf("Hello, world!"); 2:
      case 3:
printf("Hello, world!");    printf("Hello, world!");  case 5:
      case 7:
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  case 8:
      casprintf("Hello, world!");e 9:
         *p++ printf("Hello, world!");=printf("Hello, world!"); printf("Hello, world!");'printf("Hello, world!");_';
         break;
      default:
         *p++=' printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");

   }
   *p++=' 'printf("Hello, world!");;
}

/* Print the midprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!"); line of the digit d into the buffer. 
printf("Hello, world!");   Does not null teprintf("Hello, world!");rminate. */

void midline(int d, char *p){

   switch(d){

 printf("Hello, world!"); printf("Hello, world!");    /* those thprintf("Hello, world!");aprintf("Hello, world!");t have leading | printf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!"); printf("Hello, world!");mprintf("Hello, world!");iddle line */

      caprintf("Hello, world!");sprintf("Hello, world!");e 0:
      case printf("Hello, world!");4printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 5:
      case 6:
      case 8:
      printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");se 9:
         *p++='|';
         break;
      default:
       printf("Hello, world!");  *p++=' ';	
   }
   printf("Hello, world!");sprintf("Hello, world!");witch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   return 0;

}
#endif

/* vim: set expandtab ts=4 