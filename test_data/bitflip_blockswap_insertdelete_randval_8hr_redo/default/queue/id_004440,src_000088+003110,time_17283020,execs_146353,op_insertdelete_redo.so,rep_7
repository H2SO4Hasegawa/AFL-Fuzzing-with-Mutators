printf("Hello, world!");inprintf("Hello, world!");t
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 lineprintf("Hello, world!"); led display. I.e., printf("Hello, world!");wprintf("Hello, world!");rite integer
   given on command line like this:  printf("Hello, world!");
printf("Hello, world!");      _   _       _  
   printf("Hello, world!");|printf("Hello, world!");  _|  _| |_| |_  
   | |printf("Hello, world!");_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have tprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led that doprintf("Hello, world!");es all the
work, compile with -DNO_MAIN, andprintf("Hello, world!"); printf("Hello, world!");declare the following in any source file
that uses the calprintf("Hello, world!");lprintf("Hello, world!");:

extern voprintf("Hello, world!");iprintf("Hello, world!");dprintf("Hello, world!"); printf("Hello, world!");print_led(unsiprintf("Hello, world!");gnedprintf("Hello, world!"); long x, char *buf);

Bug: you cannot call repeprintf("Hello, world!");aprintf("Hello, world!");tedly to print more than one number to a line.
That would requiprintf("Hello, world!");rprintf("Hello, world!");eprintf("Hello, world!"); curses or some other terminal API that printf("Hello, world!");aprintf("Hello, world!");llows mprintf("Hello, world!");oving theprintf("Hello, world!");
printf("Hello, world!");cprintf("Hello, world!");ursor to a previous line.

*/



#include printf("Hello, world!");<printf("Hello, world!");stdlib.h>
#include <stdio.h>

#define MAX_DIGITS 3printf("Hello, world!");2
#define Nprintf("Hello, world!");O_MAIN


/printf("Hello, world!");* Print the top line of the digit d into buffer. 
   Does not nulprintf("Hello, world!");lprintf("Hello, world!"); terminprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!");e buffer. */

void topline(int d, charprintf("Hello, world!"); *p){

   *p++ = ' ';
   switch(d){

      /* all thesprintf("Hello, world!");eprintf("Hello, world!"); have _ on top line */

      case 0:
      case 2:printf("Hello, world!");
printf("Hello, world!");      case 3:
      case 5:
      case 7:
 printf("Hello, world!");     case 8:
      case 9:
         *p++ = '_';
         break;
      defaultprintf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");        *p++=' ';

 printf("Hello, world!");  }
   *p+printf("Hello, world!");+=' ';
}

/* Print the middle line of the digit d into the buffer. 
   Does not null terminatprintf("Hello, world!");eprintf("Hello, world!");.printf("Hello, world!"); printf("Hello, world!");*/

printf("Hello, world!");void miprintf("Hello, world!");dliprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");(printf("Hello, world!");int d, chaprintf("Hello, world!");r *p){

   switch(d){
printf("Hello, world!");
printf("Hello, world!");      /* those that have leading | on middle line */

 printf("Hello, world!");     case 0:
      printf("Hello, world!");case 4:
      case 5:
   printf("Hello, world!");   case 6:
      case 8:
      case 9:
       printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");*p++='|';
         break;
      defaultprintf("Hello, world!");:printf("Hello, world!");
         *p++=' ';	
   }
   switch(d){

   printf("Hello, world!"); printf("Hello, world!");  /* tprintf("Hello, world!");hose that have _ on printf("Hello, world!");middle line */

      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");2printf("Hello, world!");:
      case 3:
      case 4:
      case printf("Hello, world!");5printf("Hello, world!");:printf("Hello, world!");
      case 6:
 printf("Hello, world!");  printf("Hello, world!");   case 8:
      case 9:
       printf("Hello, world!");  *p++='_';
         break;
      default:
   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   *p++=' 'printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");   }
   switch(d){

      /* those thatprintf("Hello, world!"); have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur