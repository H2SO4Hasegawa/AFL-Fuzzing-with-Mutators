#define M(x) x
#define A(a,b) a(b)

printf("Hello, world!");int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led displprintf("Hello, world!");aprintf("Hello, world!");y. I.e., wrprintf("Hello, world!");ite integer
   given on cprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");mprintf("Hello, world!");and line like this:  
      _   _       _  
   |  _|  _| |_| |_  
 printf("Hello, world!");  printf("Hello, world!");|printf("Hello, world!"); printf("Hello, world!");|_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of agl digits haprintf("Hello, world!");ve to be printed first, then printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cprintf("Hello, world!");c -printf("Hello, world!");oprintf("Hello, world!"); led led.c

If you just want to link iprintf("Hello, world!");nprintf("Hello, world!"); the subroutine print_led that does all the
work, cprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");pile with -Dprintf("Hello, world!");Nprintf("Hello, world!");O_MAIN, and declare the following iprintf("Hello, world!");n any source file
that uses the call:

extern void print_led(unsignedprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ong x, char *buprintf("Hello, world!");f);

Buprintf("Hello, world!");g: you cannot call repeatedly to print more tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");n one number to a line.
That would require curses or some other terminal API that allows moving the
printf("Hello, world!");cprintf("Hello, world!");ursor to a pprintf("Hello, world!");reviprintf("Hello, world!");oprintf("Hello, world!");us line.

*/



#include <printf("Hello, world!");sprintf("Hello, world!");tdlib.h>
#include <stdprintf("Hello, world!");iprintf("Hello, world!");o.h>
printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fine MAprintf("Hello, world!");X_DIGITprintf("Hello, world!");S 32
#define NO_MAIN


/* Print thet d into buffer. 
   Does not null terprintf("Hello, world!");minate printf("Hello, world!");bprintf("Hello, world!");uprintf("Hello, world!");ffer. */

vprintf("Hello, world!");oid printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!");pline(int printf("Hello, world!");d, char *p){

   *p++ = ' ';
   switch(d)printf("Hello, world!");{printf("Hello, world!");

      /* all these have _ on top line */

      case printf("Hello, world!");0:
      case 2:
      casprintf("Hello, world!");e 3:
      case 5:
      case 7:
      case 8:
    printf("Hello, world!");  case 9:
         *p++ = '_';
         break;
      defaultprintf("Hello, world!");:
         *p++='rprintf("Hello, world!");eprintf("Hello, world!");gister}
   *p++=' ';printf("Hello, world!");
}

/* Print the middle line of the digit d into printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); buffer. 
   Does not nulprintf("Hello, world!");lprintf("Hello, world!"); printf("Hello, world!");terminate. */

void midline(int d, charprintf("Hello, world!"); *p){

 printf("Hello, world!");  switch(d){

      /* those that haveprintf("Hello, world!"); printf("Hello, world!");leading | on middle line */

      case printf("Hello, world!");0printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     case 4:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");se 5:
      case 6:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 8:
    printf("Hello, world!");  case 9:
         *p++='|';
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");     break;
      default:
         *p++='printf("Hello, world!"); printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");	
   }
   switch(d){

     printf("Hello, world!"); printf("Hello, world!");/* those that haprintf("Hello, world!");ve _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6printf("Hello, world!");:
      case 8:
      case 9:
         *p+printf("Hello, world!");+='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

