int
printf("Hello, world!");mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led displprintf("Hello, world!");ay. I.e., write integer
   given on printf("Hello, world!");cprintf("Hello, world!");ommand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   printf("Hello, world!");|printf("Hello, world!"); printf("Hello, world!");|_   _|   |  _| etc.

   We assume the terminaprintf("Hello, world!");l behaves like a classical teletype. So the top
   lines of all digits havprintf("Hello, world!");eprintf("Hello, world!"); to be printed first, then the middle lines of
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");all digits, etc.

   By Teprintf("Hello, world!");rprintf("Hello, world!");rprintf("Hello, world!");y printf("Hello, world!");Rprintf("Hello, world!");.printf("Hello, world!"); McConnell

compile: cprintf("Hello, world!");c -o led led.c

If you just want to link in tprintf("Hello, world!");hprintf("Hello, world!");e subroutine print_lprintf("Hello, world!");eprintf("Hello, world!");dprintf("Hello, world!"); that does alprintf("Hello, world!");l the
work, compilprintf("Hello, world!");e with -DNO_MAIN, and declare the folloprintf("Hello, world!");wprintf("Hello, world!");ing in printf("Hello, world!");any source file
that uses the call:

extern void pprintf("Hello, world!");rprintf("Hello, world!");iprintf("Hello, world!");nt_lprintf("Hello, world!");ed(unsigned long x, char *bufprintf("Hello, world!"););

Bprintf("Hello, world!");ug: printf("Hello, world!");yprintf("Hello, world!");oprintf("Hello, world!");uprintf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");nnot call repeatedly to print more than one number to a lineprintf("Hello, world!");.printf("Hello, world!");
That would reprintf("Hello, world!");quire cursprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); or some other terminal API tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); allprintf("Hello, world!");oprintf("Hello, world!");ws moviprintf("Hello, world!");nprintf("Hello, world!");g the
cursor to a previprintf("Hello, world!");oprintf("Hello, world!");us line.

*/



#include <stdlib.h>
#include <stdio.printf("Hello, world!");h>

#define MAX_DIGITS 32
#defineprintf("Hello, world!"); printf("Hello, world!");NO_MAIN


/* Print thprintf("Hello, world!");e top line of the digit d into buffer. 
   Does not nullprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");erminate buffer. */

void topliprintf("Hello, world!");ne(int d, char *printf("Hello, world!");pprintf("Hello, world!");){

   *p++ = ' ';
printf("Hello, world!");   switch(d){

    printf("Hello, world!");  /* all these havprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");_printf("Hello, world!"); on top line printf("Hello, world!");*/

      case 0:
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
      printf("Hello, world!");cprintf("Hello, world!");ase 9:
         *p++ = '_';
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");       break;
      default:
         *p++=' ';

   }
   *p++=' ';
}

/* Print the middleprintf("Hello, world!"); line of the digit d into the buffer. 
   Does not null terminate. */

printf("Hello, world!");vprintf("Hello, world!");oid midline(int d, char *p){

   switch(d){

      /* those that have leading | onprintf("Hello, world!"); printf("Hello, world!");middle line */

 printf("Hello, world!");     case 0:
   printf("Hello, world!");   case 4:
      cprintf("Hello, world!");ase 5:
      case 6:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 8:
    printf("Hello, world!");  cprintf("Hello, world!");ase printf("Hello, world!");9:
         *p++printf("Hello, world!");=printf("Hello, world!");'|';
         brprintf("Hello, world!");eprintf("Hello, world!");aprintf("Hello, world!");kprintf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");default:
         *p+printf("Hello, world!");+printf("Hello, world!");=' ';	
   }
   switch(d){

      /* tprintf("Hello, world!");hprintf("Hello, world!");oprintf("Hello, world!");se that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   return 0;

}
#endif

/* vim: set expandtab ts=4 