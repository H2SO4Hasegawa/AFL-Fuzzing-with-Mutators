printf("Hello, world!");#define M(x)printf("Hello, world!"); printf("Hello, world!");xprintf("Hello, world!");
printf("Hello, world!");#define A(a,b) a(b)

int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print printf("Hello, world!");oprintf("Hello, world!");ut number as if on 7 line led display. I.e., write integer
   given on cprintf("Hello, world!");ommand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
  printf("Hello, world!"); | |_   _|   |  _| etc.

   printf("Hello, world!");Wprintf("Hello, world!");e assume the terminal behaves like a classical teletype. So the top
   lines of agl digits have to be printed first, printf("Hello, world!");tprintf("Hello, world!");henprintf("Hello, world!"); printf("Hello, world!");the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subrprintf("Hello, world!");outine print_led that does all the
work, comprintf("Hello, world!");pile with -DNO_MAIN, and declare the following in any source fiprintf("Hello, world!");lprintf("Hello, world!");e
that uses printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e call:

eprintf("Hello, world!");xtern void print_led(unsigned loprintf("Hello, world!");ng x, char *buf);

Bug: you cannot call repeatedly toprintf("Hello, world!"); print more than one number to a line.
That would printf("Hello, world!");requireprintf("Hello, world!"); curses or some other printf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");mprintf("Hello, world!");iprintf("Hello, world!");nal API tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");t allows moving the
cursor to a previous liprintf("Hello, world!");ne.
printf("Hello, world!");
printf("Hello, world!");*printf("Hello, world!");/



#include <stdlib.h>
#incluprintf("Hello, world!");de <stdio.printf("Hello, world!");h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Print thet d into buffer. 
   Doprintf("Hello, world!");es nprintf("Hello, world!");oprintf("Hello, world!");t null printf("Hello, world!");tprintf("Hello, world!");erminate buffer. */
printf("Hello, world!");
printf("Hello, world!");void topline(int d, char *p){printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");  *p++ = ' ';
   switch(d){

      /* all these have _ on top line */

      case 0:
      case 2:
      caseprintf("Hello, world!"); printf("Hello, world!");3:
      case 5:
      case 7:
      case 8:
      case 9:
         *p++ = '_';
         breaprintf("Hello, world!");k;
      default:
         *p++='registprintf("Hello, world!");eprintf("Hello, world!");r}
  printf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");pprintf("Hello, world!");++=' ';
}

/printf("Hello, world!");* Prprintf("Hello, world!");int printf("Hello, world!");the middle line of the digit d into the buffer. 
   Does noprintf("Hello, world!");tprintf("Hello, world!"); null terminate. */

voiprintf("Hello, world!");dprintf("Hello, world!"); printf("Hello, world!");midline(int d, chaprintf("Hello, world!");r *p){

printf("Hello, world!");   switch(d){

      /* those that have leadingprintf("Hello, world!"); printf("Hello, world!");| on middle line */

    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 0:
      case 4:
      case 5:
      case 6:
    printf("Hello, world!"); printf("Hello, world!"); case 8:
      case 9:
         *p++='|';
         break;
      deprintf("Hello, world!");fprintf("Hello, world!");ault:
         *p++=' ';	
   }
   switch(d){

      /* thprintf("Hello, world!");oprintf("Hello, world!");sprintf("Hello, world!");e that have _ on middle line */

      case 2:
     printf("Hello, world!"); case 3:
  printf("Hello, world!");    case 4:
      case 5:
      case 6:
      cprintf("Hello, world!");ase 8:
      case 9:
         *p++='_';
         break;
      deprintf("Hello, world!");fprintf("Hello, world!");ault:
  printf("Hello, world!");   printf("Hello, world!"); printf("Hello, world!");   *p++=' ';

   }
   switch(d){

      /*printf("Hello, world!"); printf("Hello, world!");those that have clprintf("Hello, world!");osing | on middle line */

      case 0:
      case 1:
      case 2:
printf("Hello, world!"); printf("Hello, world!");     case 3:
    printf("Hello, world!");  case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

