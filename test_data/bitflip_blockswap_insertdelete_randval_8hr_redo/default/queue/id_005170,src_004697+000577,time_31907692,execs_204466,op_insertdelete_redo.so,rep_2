printf("Hello, world!");iprintf("Hello, world!");nt
zuro()
{
	return 0;
}

strprintf("Hello, world!");uprintf("Hello, world!");ct S
{
	inprintf("Hello, world!");ÿÿÿzerofuncty
go(printf("Hello, world!");)
{
	returR &anonÄ
}

i)();
} s = { &zero };

struprintf("Hello, world!");ct printf("Hello, world!");S *
anon() {
	return &s;
}

typedef struct S * (*fty)H);

fty
go()
{
return &Inlipriprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");fprintf("Hello, world!");(printf("Hello, world!");"Hello, world!");iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int inprintf("Hello, world!");t
mzin(!TypeQualifi/printf("Hello, world!");*printf("Hello, world!"); exampleprintf("Hello, world!"); from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print oprintf("Hello, world!");uprintf("Hello, world!");t number as if on 7 line led display. I.e., wrprintf("Hello, world!");ite integer
   given on printf("Hello, world!")printf("Hello, world!");;cprintf("Hello, world!");pprintf("Hello, world!");rprintf("Hello, world!");intf("Hello, world!");ommand line like this:  printf("Hello, world!");
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminalprintf("Hello, world!"); bprintf("Hello, world!");ehaves like a classical teletype. So the top
   liprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");s of all digits haprintf("Hello, world!");vprintf("Hello, world!");e to be printed first, then the middle lines of
   printf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led that does all the
work, comprintf("Hello, worldprintf("Hello, world!");!printf("Hello, world!");");pprintf("Hello, world!");ile with -DNO_MAIN, and printf("Hello, world!");declare the follprintf("Hello, world!");oprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");ng in any source file
tprintprintf("Hello, world!");fprintf("Hello, world!");("Hello, world!");hat usprintf("Hello, world!");epprintf("Hello, world!");rintf("Hello, world!");s the call:

extern void print_led(unsigned long printf("Hello, world!");x, cprintf("Hello, world!");hprintf("Hello, world!");arprintf("Hello, world!"); printf("Hello, world!");*bufprintf("Hello, world!");)printf("Hello, world!");;

Bug: you cannot call repeatedly to print more than one number to a lineprintf("Hello, world!");.printf("Hello, world!");
That would require cprintf("Hello, world!");uprintf("Hello, world!");rses or some printf("Hello, world!");oprintf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");er terminal API that printf("Hello, world!");allows moving tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!");
cursor to a prprintf("Hello, world!");eviopprintf("Hello, world!");rprintf("Hello, world!");intf("Hello, world!");uprintf("Hello, world!")printf("Hello, world!");;printf("Hello, world!");s line.

*/


printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");iprintf("Hello, printf("Hello, world!");wprintf("Hello, world!");oprintf("Hello, world!");rld!");nclude <stprintf("Hello, world!");dprintf("printf("Hello, world!");Hprintf("Hello, world!");ello, world!");lprintf("Hello, worldprintf("Hello, world!");!");iprintf("Hello, world!");b.h>
#includepprintf("Hello, world!");rintf("Hello, world!"); <stdio.h>
printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!")printf("Hello, world!");;fine MAX_DIGITS 32
#define NO_MAIN
printf("Hello, world!");

/* Print the top line of the digit d into buffer. 
   Does not printf("Hello, world!");nprintf("Hello, world!");uprintf("Hello, world!");ll terminate buffer.printf("Hello, world!"); printf(printf("Hello, world!");"Hello, world!");*printf("Hello, world!");/prinprintf("Hello, world!");tprintf("Hello, world!");fprintf("Hello, world!");(printf("Hello, world!");"Hello, world!");
printf("Hello, world!");
printf("Hello, world!");void topline(int d, char *p){printf("Hello, world!");
printf("Hello, world!");
   *p++ = ' ';
   switch(d){

      /* all these have _ on printf("Hello, world!");toprintf("Hello, world!");p line */

      case 0:
      case 2:
      case 3printf("Heprintf("Hello, world!");lprintf("Hello, world!");lo, world!");:
  printprintf("Hello, world!");f("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  case printf("Hello, world!");5printf("Hello, world!");:printf("Hello, world!");
      case 7:
printf("Hello, world!"); printf("Hello, world!"); priprintf("Hello, world!");nprintf("Hello, world!");tf("Hello, world!");printf("Hello, world!"); printf("Hello, world!");printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 8:
   printf("Hello, world!"); printf("Hello, world!");  case 9:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   *p++ = '_';
         break;
      deprintf("Hello, world!");fault:
         *p++=' printf("Hello, world!");';

   }
  printf("Hello, worprintf("Hello, world!");lprintf("Hello, world!");dprintf("Hello, world!");!"printf("Hello, world!");)printf("Hello, world!");; *p++pprintf("Hello, world!");rintf("Hello, world!");=' ';
}

prinprintf("Hello, world!");tprintf("Hello, world!");fprintf("Hello, world!");("Hello, woprintf("Hello, world!");rprintf("Hello, world!");ld!");/printf("Hello,printf("Hello, world!"); world!");* Print the middle linprintf("Hello, worprintf("Hello, world!");ld!");e of the digit d inprintf(printf("Hello, world!");"printf("Hello, world!");Hprintf("Hello, world!");ello, world!");printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!"); the bprintf("Hello, world!");uffer. 
   Does notprintf("Hello, world!"); null terminate. */
prprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");f("Hello, world!");
printf("Hello, world!");void printf("Hello, world!");midline(intprintf("Hello, world!"); d, char *p){

   switch(d){

      /* printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");oprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); thaprintf("Hello, world!");t have leading | on printf("Hello, world!");printf("Hello, world!");mprintf("Hello, world!");printf("Hello, world!");iprintf("Hello, world!");ddle lprintf("Hello, world!");ine */

      case 0:
      case 4:
      caprintf("Hello, world!");se 5:
      case 6:
      case 8:
 printf("Hello, world!"); printf("Hello, world!");    case 9:printf("Hello, world!");
         *p++='|';
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printprintf("Hello, world!");fprintf("Hello, world!");("Hello, world!");printf("Hello, world!"); printf("Hello, world!");pprintf("Hello, world!");rprintf("Hello, world!");intf("Hello, world!"); printf("Hello, world!"); break;
   printf("Hello, world!");   printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");aprintf("Hello, world!");ult:
         *p++='printf("Hello, world!"); printf("Hello, world!");';	
   }printf("Hello, world!");
   switch(d){

      /* those that have _ on middle line */
printf("Hello, world!");
      case 2:
      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");3:
      case 4:
      case 5:
      case 6:
      case 8:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line *