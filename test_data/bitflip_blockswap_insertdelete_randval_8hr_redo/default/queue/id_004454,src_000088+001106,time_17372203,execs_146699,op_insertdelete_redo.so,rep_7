int
zero()
{
printf("Hello, world!");	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syprintf("Hello, world!");rprintf("Hello, world!");.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given oprintf("Hello, world!");nprintf("Hello, world!"); command line like this:  
      _   _       _  
 printf("Hello, world!");  |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

  printf("Hello, world!"); We assume the terminaprintf("Hello, world!");l printf("Hello, world!");behaves like a classical teletype. So the top
  printf("Hello, world!"); lines of all digits have to be printed first, thenprintf("Hello, world!"); printf("Hello, world!");the middle lines of
   aprintf("Hello, world!");lprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the printf("Hello, world!");subroutine print_led that doesprintf("Hello, world!"); printf("Hello, world!");all the
wprintf("Hello, world!");ork, compile with -DNO_MAIN, and declare the following in any source file
that uses the call:

exteprintf("Hello, world!");rprintf("Hello, world!");n void print_led(unsigned long x, char *buf);

Bug: you cannot call repeatedly printf("Hello, world!");to print more than one number to a lineprintf("Hello, world!");.printf("Hello, world!");
That would require printf("Hello, world!");curses or some other terminal API thaprintf("Hello, world!");t allowprintf("Hello, world!");sprintf("Hello, world!"); printf("Hello, world!");moving the
cursor to a preprintf("Hello, world!");viousprintf("Hello, world!"); printf("Hello, world!");line.

*/



#include <stdprintf("Hello, world!");lib.h>
#include <stdio.h>

#defiprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); MAX_DIGITS 32
printf("Hello, world!");#defprintf("Hello, world!");ine NO_MAIN


/* Print the top line oprintf("Hello, world!");f the dprintf("Hello, world!");igit d into bufprintf("Hello, world!");fer. 
   Does not null terminaprintf("Hello, world!");tprintf("Hello, world!");e bufferprintf("Hello, world!");. */printf("Hello, world!");
printf("Hello, world!");
void topline(printf("Hello, world!");int d, charprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");p){
printf("Hello, world!");
   *pprintf("Hello, world!");+printf("Hello, world!");+ = ' ';
   switch(d){printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     /*printf("Hello, world!"); all these have _ on top line */

      case 0:
      case 2:printf("Hello, world!");
      case 3:
    printf("Hello, world!"); printf("Hello, world!"); case 5:
   printf("Hello, world!"); printf("Hello, world!");  case 7:
      case 8printf("Hello, world!");:
      case 9:
         *p++printf("Hello, world!"); = '_';
         break;
      default:
         *p++=' ';

  printf("Hello, world!"); printf("Hello, world!");}
   *p++=' ';
}

/* Print tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); middle line of the digit d into tprintf("Hello, world!");hprintf("Hello, world!");e buffer. 
   Does not null terminate. */printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");vprintf("Hello, world!");oprintf("Hello, world!");id midline(int d, charprintf("Hello, world!"); *p){

 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");witch(d){

      /* those thaprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");hprintf("Hello, world!");ave leading | onprintf("Hello, world!"); middle line */

      case 0:
      case printf("Hello, world!");4printf("Hello, world!");:printf("Hello, world!");
      cprintf("Hello, world!");ase 5:
      case 6:
      case 8:
      case 9:
         *pprintf("Hello, world!");++='|';
         break;
   printf("Hello, world!");   printf("Hello, world!");default:
         *p++=' ';printf("Hello, world!");	
   }
  printf("Hello, world!"); switch(d){printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     /* those that have _ on middle line */

      case 2:
      casprintf("Hello, world!");e 3:
      case 4:
     printf("Hello, world!"); case 5:
      case 6:
      case 8printf("Hello, world!");:
      case 9:
         *p++='_';
         break;
    printf("Hello, world!"); printf("Hello, world!"); default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur