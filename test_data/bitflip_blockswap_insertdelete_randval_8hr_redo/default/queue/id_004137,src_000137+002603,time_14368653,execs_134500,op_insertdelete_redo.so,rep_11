printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");efine M(x) x
#define A(a,b) a(b)

int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* lprintf("Hello, world!");ed.c: print out number as if on 7 line led display. I.e., write integer
   given on printf("Hello, world!");command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
 printf("Hello, world!");  printf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");nes of agl digits have to be printed first, then the middle lines of
   printf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If yprintf("Hello, world!");ou just want to link in the subroutine print_led that does all the
work, compileprintf("Hello, world!"); printf("Hello, world!");wprintf("Hello, world!");ith -DNO_MAprintf("Hello, world!");IN, andprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");clare the following in any source file
thaprintf("Hello, world!");t useprintf("Hello, world!");s thprintf("Hello, world!");e caprintf("Hello, world!");ll:

extern void print_led(unsigned long xprintf("Hello, world!");, char *buf);

Bprintf("Hello, world!");uprintf("Hello, world!");gprintf("Hello, world!");: you cannot calprintf("Hello, world!");l repeatprintf("Hello, world!");edly to print more than one number to a line.
That would require curses oprintf("Hello, world!");r some other termiprintf("Hello, world!");nal API tprintf("Hello, world!");hprintf("Hello, world!");at allows moving the
cprintf("Hello, world!");uprintf("Hello, world!");rprintf("Hello, world!");sor to a previous line.

*/
printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");cprintf("Hello, world!");lude <stdlib.h>
#include <stdprintf("Hello, world!");iprintf("Hello, world!");oprintf("Hello, world!");.h>

#define MAprintf("Hello, world!");Xprintf("Hello, world!");_printf("Hello, world!");DIGITS 32
#define NO_MAIN


/* Print thet d into bufferprintf("Hello, world!");.printf("Hello, world!"); 
   Does not null terminate buffer. */

void topline(int d, char *p){

   *p++ printf("Hello, world!");= ' ';
   switch(d){

      /* all thesprintf("Hello, world!");eprintf("Hello, world!"); haveprintf("Hello, world!"); printf("Hello, world!");_printf("Hello, world!"); printf("Hello, world!");on tprintf("Hello, world!");op lprintf("Hello, world!");ine */

      case 0:
      case 2:
      casprintf("Hello, world!");e 3:
      case 5:
      case 7:
      case 8:
    printf("Hello, world!");  caprintf("Hello, world!");se 9:
         *p+printf("Hello, world!");+ = printf("Hello, world!");'_';printf("Hello, world!");
         bprintf("Hello, world!");reak;
    printf("Hello, world!"); printf("Hello, world!"); default:
         *p++='printf("Hello, world!");register}
   *p++=' ';printf("Hello, world!");
}

/* Print the miprintf("Hello, world!");ddle line of the digit d into the buffer. 
   Does not null terminate. */

void printf("Hello, world!");midline(int d, charprintf("Hello, world!"); *p){

   switch(d){

   printf("Hello, world!");   /* those that have leading | on middle lineprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");/

      case 0:
      case 4:
      caprintf("Hello, world!");se 5:
      case 6:printf("Hello, world!");
      case 8:
      case 9:
         *p++printf("Hello, world!");=printf("Hello, world!");'printf("Hello, world!");|';
     printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  break;
printf("Hello, world!");      defauprintf("Hello, world!");lt:
         *p++=' ';	
   }
   switch(d){

      /* those that have _printf("Hello, world!"); printf("Hello, world!");on middle line *printf("Hello, world!");/

 printf("Hello, world!");     case 2:
      case 3:
     printf("Hello, world!"); case 4:
      case 5:
      case 6:
      case 8:
      case printf("Hello, world!");9printf("Hello, world!");:
         *p++='_';
         break;
      default:
      printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

