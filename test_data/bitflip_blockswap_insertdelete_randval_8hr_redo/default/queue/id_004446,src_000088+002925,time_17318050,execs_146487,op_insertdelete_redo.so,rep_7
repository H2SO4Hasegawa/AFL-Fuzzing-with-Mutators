int
printf("Hello, world!");zprintf("Hello, world!");eprintf("Hello, world!");ro()
{
	return 0;
}

struct S
{
	int int
mziprintf("Hello, world!");nprintf("Hello, world!");(printf("Hello, world!");!printf("Hello, world!");TypeQualifi/* example from http://barnprintf("Hello, world!");yprintf("Hello, world!");ard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 linprintf("Hello, world!");eprintf("Hello, world!"); led display. I.e., writeprintf("Hello, world!"); printf("Hello, world!");integer
   given on comprintf("Hello, world!");mand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behprintf("Hello, world!");aves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you jprintf("Hello, world!");uprintf("Hello, world!");sprintf("Hello, world!");t want to link in the printf("Hello, world!");sprintf("Hello, world!");ubroutine print_led printf("Hello, world!");that does all printf("Hello, world!");tprintf("Hello, world!");he
work, compile with -DNO_MAIN, and declare the following in any souprintf("Hello, world!");rce printf("Hello, world!");file
that uses theprintf("Hello, world!"); printf("Hello, world!");call:

extern voiprintf("Hello, world!");d print_led(unprintf("Hello, world!");signed long x, char *buf);

Bug: you printf("Hello, world!");cannot call repeatedly to print more than one number tprintf("Hello, world!");oprintf("Hello, world!"); a liprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");.
That would require curses oprintf("Hello, world!");r some printf("Hello, world!");other terminal API that allows moving the
cursor to a previous line.

*/



printf("Hello, world!");#printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");cprintf("Hello, world!");lude <stdlib.h>
#include <stdprintf("Hello, world!");iprintf("Hello, world!");oprintf("Hello, world!");.h>

#define MAprintf("Hello, world!");X_DIGITS 32
#definprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");NO_MAIN


/* Prinprintf("Hello, world!");tprintf("Hello, world!"); the top line of the digit d into buffer. 
   Does not null terprintf("Hello, world!");mprintf("Hello, world!");inate buffer. */

void topline(int d, char *p){

   *printf("Hello, world!");p++ printf("Hello, world!");= ' printf("Hello, world!");';
   switch(d){

      /*printf("Hello, world!"); all these have printf("Hello, world!");_printf("Hello, world!"); printf("Hello, world!");on top line */

      case 0:
      case 2printf("Hello, world!");:
      cprintf("Hello, world!");ase 3:
      case 5:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 7:
      caprintf("Hello, world!");se 8:
      case 9printf("Hello, world!");:
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  *p++ = '_';
         break;
      printf("Hello, world!");dprintf("Hello, world!");efault:
         *p++=' ';

   }
   *p++='printf("Hello, world!"); printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
}

printf("Hello, world!");/printf("Hello, world!");* Print the middle line oprintf("Hello, world!");fprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");he digit d into the buffer. 
   Does not null tprintf("Hello, world!");erminate. */

void midline(int printf("Hello, world!");d, char *p){

   swprintf("Hello, world!");iprintf("Hello, world!");tch(d){

      /* those that have leadiprintf("Hello, world!");nprintf("Hello, world!");gprintf("Hello, world!"); | on middprintf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");line */

  printf("Hello, world!");   printf("Hello, world!"); printf("Hello, world!");case 0:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 4:
 printf("Hello, world!");     case 5:
      case 6:
      case 8:
      caseprintf("Hello, world!"); printf("Hello, world!");9printf("Hello, world!");:
         *p++='|';
         break;
     printf("Hello, world!"); default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on middle line */

      case 2:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur