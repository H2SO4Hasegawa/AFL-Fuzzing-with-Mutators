int
printf("Hello, world!");zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syprintf("Hello, world!");rprintf("Hello, world!");.printf("Hello, world!");eduprintf("Hello, world!");/printf("Hello, world!");qprintf("Hello, world!");uprintf("Hello, world!");ickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., wriprintf("Hello, world!");tprintf("Hello, world!");e integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have to be printed first, thenprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");he middle lines of
   all digits, etc.

   By Terry R. McConnell

compilprintf("Hello, world!");e: cc -o led led.c

If you just want to link in the printf("Hello, world!");sprintf("Hello, world!");uprintf("Hello, world!");broutine print_led thaprintf("Hello, world!");t does all the
work, compile with -DNO_MAIN, printf("Hello, world!");and declare theprintf("Hello, world!"); folloprintf("Hello, world!");wing iprintf("Hello, world!");nprintf("Hello, world!"); any source file
that printf("Hello, world!");uprintf("Hello, world!");sprintf("Hello, world!");es the call:

extern void print_led(unsigned long x, char *buf);

Bprintf("Hello, world!");ug: you cannot call repeatedly to print more than one number to a line.
That would requprintf("Hello, world!");ire curprintf("Hello, world!");ses or some other terminal API that allows movprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");gprintf("Hello, world!"); theprintf("Hello, world!");
cursorprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!"); a previous line.

*/



#include <stdlib.hprintf("Hello, world!");>printf("Hello, world!");
#include <sprintf("Hello, world!");tdio.h>printf("Hello, world!");

#define MAX_Dprintf("Hello, world!");IGITS 32
#define NO_MAIN


/* printf("Hello, world!");Pprintf("Hello, world!");rint theprintf("Hello, world!"); top line of the dprintf("Hello, world!");iprintf("Hello, world!");git d into buffprintf("Hello, world!");er. 
   Does not null terminate buffer. */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){

printf("Hello, world!");      /* all these have _ on top line */

      case 0:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 2:
      caseprintf("Hello, world!"); printf("Hello, world!");3printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 5:
      printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");e 7printf("Hello, world!");:
  printf("Hello, world!");    printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 8:
      case 9:
         *p++ = '_';
         break;
     printf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");aprintf("Hello, world!");uprintf("Hello, world!");lprintf("Hello, world!");tprintf("Hello, world!");:
         *pprintf("Hello, world!");++=' ';
printf("Hello, world!");
   }
   *p++=' ';
}

/* Print the midprintf("Hello, world!");dle line of the digit d into the buffer. 
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); Does not null terminate. */

void midlinprintf("Hello, world!");e(int d, char *p){

   swiprintf("Hello, world!");tch(d){

 printf("Hello, world!"); printf("Hello, world!");    /* those thprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");vprintf("Hello, world!");e leading | on mprintf("Hello, world!");iprintf("Hello, world!");ddle line */

      case 0:
      case printf("Hello, world!");4printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");    printf("Hello, world!");  case 5:
      case 6:
   printf("Hello, world!");   case 8:
      case 9:
         *p++='|printf("Hello, world!");'printf("Hello, world!");;
       printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");bprintf("Hello, world!");reprintf("Hello, world!");aprintf("Hello, world!");k;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur