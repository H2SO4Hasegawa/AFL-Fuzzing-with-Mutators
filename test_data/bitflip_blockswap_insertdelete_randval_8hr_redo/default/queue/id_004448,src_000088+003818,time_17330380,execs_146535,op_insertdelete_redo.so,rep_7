int
zero()
printf("Hello, world!");{printf("Hello, world!");
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on command line like this:  
      _   _       _  
printf("Hello, world!");   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_lprintf("Hello, world!");ed that does all the
work, compile with -DNO_MAIN,printf("Hello, world!"); printf("Hello, world!");and declare the following in any source file
that uses the cprintf("Hello, world!");all:

extern voiprintf("Hello, world!");d print_led(unsprintf("Hello, world!");igned long x, char *buf);

Bug: you cannot call repeatedly to printprintf("Hello, world!"); more thprintf("Hello, world!");aprintf("Hello, world!");nprintf("Hello, world!"); one number to a line.
That would requirprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");curses or some otheprintf("Hello, world!");rprintf("Hello, world!"); terminal API that allows moving the
cursor to a previous line.

printf("Hello, world!");*printf("Hello, world!");/printf("Hello, world!");


printf("Hello, world!");
#include <stdlib.h>
#include <stdio.h>

#defprintf("Hello, world!");iprintf("Hello, world!");ne MAX_printf("Hello, world!");Dprintf("Hello, world!");Iprintf("Hello, world!");Gprintf("Hello, world!");Iprintf("Hello, world!");TS 32
#define NO_MAIN


/* Print the topprintf("Hello, world!"); printf("Hello, world!");line of the digit d into buffer. 
 printf("Hello, world!");  Does not printf("Hello, world!");null termiprintf("Hello, world!");nate buffer. */

void topline(int d, char *p){

  printf("Hello, world!"); *p++printf("Hello, world!"); = 'printf("Hello, world!"); printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); switch(d){

      /* all theprintf("Hello, world!");sprintf("Hello, world!");e have _ on top line */

      case 0:
      case 2:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    case 3:
      case 5:
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  caseprintf("Hello, world!"); 7:
      case 8:
printf("Hello, world!"); printf("Hello, world!");     case 9:
 printf("Hello, world!");        *p++ = '_';
         brprintf("Hello, world!");eak;
      default:
         *printf("Hello, world!");pprintf("Hello, world!");+printf("Hello, world!");+=' ';

  printf("Hello, world!"); printf("Hello, world!");}
   *p++=' ';
}

/* Print tprintf("Hello, world!");he middle printf("Hello, world!");line of the digit d into the buffer. 
   Does not null terminate. */

void midline(int d, char *p){

   switch(d){

      /* those that havprintf("Hello, world!");e leading | on middle line */

      case 0:
      case 4:
      case 5:
      cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");e 6:
      case 8:
    printf("Hello, world!");  case 9:
         *p++='|';
         breprintf("Hello, world!");ak;
      defaultprintf("Hello, world!");:
         *p++=' ';	
   }
   switch(d){

      /printf("Hello, world!");*printf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");osprintf("Hello, world!");e that have _ on middle line */

      cprintf("Hello, world!");ase 2:
      case 3:
     printf("Hello, world!"); case 4:
 printf("Hello, world!");     case 5:
 printf("Hello, world!");     case 6:
      case 8:
      case 9:
         *p++='_';
       printf("Hello, world!");  break;
      default:
         *p++=' 'printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");   }printf("Hello, world!");
   switch(d){

      /* thprintf("Hello, world!");oprintf("Hello, world!");se that have closing | on middle line *printf("Hello, world!");/

      case 0:
      case 1:
      case 2:
      case3:
      caseprintf("Hello, world!"); printf("Hello, world!");4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur