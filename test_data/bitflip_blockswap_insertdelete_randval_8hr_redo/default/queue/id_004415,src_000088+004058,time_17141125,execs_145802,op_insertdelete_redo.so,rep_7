printf("Hello, world!");iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example printf("Hello, world!");from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given oprintf("Hello, world!");nprintf("Hello, world!"); command line like this:  
      _   _       _  
 printf("Hello, world!");  |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

  printf("Hello, world!"); printf("Hello, world!");We assume the terminal printf("Hello, world!");bprintf("Hello, world!");ehaves like a classicalprintf("Hello, world!"); printf("Hello, world!");teletype. So the top
   liprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just wantprintf("Hello, world!"); printf("Hello, world!");to link in the subroutine printprintf("Hello, world!");_printf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");dprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); dprintf("Hello, world!");oprintf("Hello, world!");es all the
worprintf("Hello, world!");kprintf("Hello, world!");,printf("Hello, world!"); compile with -DNO_MAIN, and declare the following in anprintf("Hello, world!");yprintf("Hello, world!"); source file
that uses the cprintf("Hello, world!");aprintf("Hello, world!");ll:

printf("Hello, world!");extern void print_led(unsigned loprintf("Hello, world!");ng xprintf("Hello, world!");, char *bufprintf("Hello, world!");)printf("Hello, world!");;

Buprintf("Hello, world!");gprintf("Hello, world!");: you cannot call repeatedprintf("Hello, world!");ly to print more than one numberprintf("Hello, world!"); printf("Hello, world!");to a line.
That would require cursprintf("Hello, world!");es or some other terminal API that allows moving tprintf("Hello, world!");hprintf("Hello, world!");e
cursorprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!"); a previous line.

*/



#printf("Hello, world!");iprintf("Hello, world!");nclude <stdlib.h>
#include <sprintf("Hello, world!");tdio.h>
printf("Hello, world!");
printf("Hello, world!");#define MAX_DIGITS 32
#define NO_MAprintf("Hello, world!");IN

printf("Hello, world!");
printf("Hello, world!");/printf("Hello, world!");*printf("Hello, world!"); printf("Hello, world!");Print the top line of the printf("Hello, world!");dprintf("Hello, world!");igit d printf("Hello, world!");intoprintf("Hello, world!"); buffer. 
   Does not nullprintf("Hello, world!"); printf("Hello, world!");terminate buffer. */

void topline(int d, chprintf("Hello, world!");aprintf("Hello, world!");rprintf("Hello, world!"); printf("Hello, world!");*p){

   *p++ = ' ';
   switch(d){

      /* all these have _ oprintf("Hello, world!");nprintf("Hello, world!"); printf("Hello, world!");top line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
      case 9:
         *p+printf("Hello, world!");+ = '_';
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    break;
      default:
         *p++=' ';printf("Hello, world!");

   }
   *p++=printf("Hello, world!");'printf("Hello, world!"); printf("Hello, world!");';
}

/* Print the middle line of the digit d into the buffer. 
 printf("Hello, world!");  Does not null terminate. */

void midlineprintf("Hello, world!");(printf("Hello, world!");iprintf("Hello, world!");nt d, printf("Hello, world!");char *p){

   switch(d){

      /* those thaprintf("Hello, world!");t have leading | on middle line */
printf("Hello, world!");
      caseprintf("Hello, world!"); 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *printf("Hello, world!");p++='|';
         break;
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ onprintf("Hello, world!"); middle line */

      case 2:
      casprintf("Hello, world!");eprintf("Hello, world!"); 3:
      printf("Hello, world!");case 4:
      case 5:
      case 6:
      case 8:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur