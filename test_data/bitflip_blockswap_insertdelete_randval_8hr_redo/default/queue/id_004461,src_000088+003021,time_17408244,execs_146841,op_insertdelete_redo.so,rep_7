printf("Hello, world!");intprintf("Hello, world!");
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 lineprintf("Hello, world!"); led display. I.e., write integer
   given on cprintf("Hello, world!");ommand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");bprintf("Hello, world!");eprintf("Hello, world!");hprintf("Hello, world!");aves like a classical teletype. So the top
  printf("Hello, world!"); printf("Hello, world!");lines of all digits have tprintf("Hello, world!");o be printed first, then the middle lines of
   printf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you jprintf("Hello, world!");ust wanprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");to link in the subroutine print_led that does all the
work, printf("Hello, world!");cprintf("Hello, world!");oprintf("Hello, world!");mpile with -DNO_MAIN, and declare the following in any source file
printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");at uses theprintf("Hello, world!"); printf("Hello, world!");caprintf("Hello, world!");ll:

externprintf("Hello, world!"); printf("Hello, world!");vprintf("Hello, world!");oprintf("Hello, world!");id print_leprintf("Hello, world!");d(unsignprintf("Hello, world!");ed long x, char *buf);

Bug: you cannot callprintf("Hello, world!"); repeprintf("Hello, world!");aprintf("Hello, world!");tedly to print more than oprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");uprintf("Hello, world!");mprintf("Hello, world!");bprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!"); printf("Hello, world!");to a line.printf("Hello, world!");
printf("Hello, world!");Tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); would require curses orprintf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");e other terminal API that allows movinprintf("Hello, world!");g the
cursor to a previprintf("Hello, world!");ous line.

*/



#include <stdprintf("Hello, world!");lib.h>
#include <sprintf("Hello, world!");tdio.h>

printf("Hello, world!");#define MAX_DIGITS 32
#defiprintf("Hello, world!");ne NO_MAIN


/* Print the top line of theprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");igit d into buffer. 
   Does nprintf("Hello, world!");ot null terminate buffer. */

voprintf("Hello, world!");iprintf("Hello, world!");dprintf("Hello, world!"); topline(int d, char *p){

   *p++ = ' ';
   switch(d){

      /* all these havprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");_printf("Hello, world!"); printf("Hello, world!");oprintf("Hello, world!");n top line */

      case 0:
      printf("Hello, world!");cprintf("Hello, world!");ase 2:
     printf("Hello, world!"); case printf("Hello, world!");3:
     printf("Hello, world!"); case 5:
      case 7:
      case 8:
      caseprintf("Hello, world!"); 9:
         *p++ =printf("Hello, world!"); '_';
         break;
      default:
         *p++=' ';

   }
   *p++=printf("Hello, world!");' ';
}

/* Print the middlprintf("Hello, world!");e line of printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");iprintf("Hello, world!");gprintf("Hello, world!");it printf("Hello, world!");dprintf("Hello, world!"); printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");to printf("Hello, world!");the buffer. 
   Does not nuprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!"); terprintf("Hello, world!");minate. */

void midline(int d, char *p){

   switch(d){

      /* those that have leading | on middle line */

      case 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");      *p++='|';
         break;
      default:
         *p++=' ';	
   }
 printf("Hello, world!"); printf("Hello, world!"); sprintf("Hello, world!");witch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur