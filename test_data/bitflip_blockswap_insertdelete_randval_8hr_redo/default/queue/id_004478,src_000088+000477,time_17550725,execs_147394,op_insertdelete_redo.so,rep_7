int
printf("Hello, world!");zero()
{
	return 0;printf("Hello, world!");
printf("Hello, world!");}printf("Hello, world!");

printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");ruct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/printf("Hello, world!");leprintf("Hello, world!");dprintf("Hello, world!");.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on comprintf("Hello, world!");mprintf("Hello, world!");and line like this:  
  printf("Hello, world!"); printf("Hello, world!");   _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behprintf("Hello, world!");aprintf("Hello, world!");ves like a classical teprintf("Hello, world!");letype. So the top
   lines of all digits have to printf("Hello, world!");bprintf("Hello, world!");e printed first, then the mprintf("Hello, world!");iddprintf("Hello, world!");lprintf("Hello, world!");e lines of
   all digits, etc.

   By printf("Hello, world!");Terry R. McConnell

compileprintf("Hello, world!");: cc -o led led.c

If you just want to link iprintf("Hello, world!");n the subroutine print_led that does all the
worprintf("Hello, world!");kprintf("Hello, world!");, compile with -DNO_MAIN, and declarprintf("Hello, world!");e the folloprintf("Hello, world!");wprintf("Hello, world!");inprintf("Hello, world!");gprintf("Hello, world!"); printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!"); printf("Hello, world!");any source file
that uses the call:

extern void print_led(unprintf("Hello, world!");sprintf("Hello, world!");iprintf("Hello, world!");gprintf("Hello, world!");nprintf("Hello, world!");ed long x, char *buf);

Bug: you cannot call repeatedly to print more than one number to a line.printf("Hello, world!");
That would require curses or some other terminprintf("Hello, world!");al Aprintf("Hello, world!");Pprintf("Hello, world!");I that allows moving printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!");
printf("Hello, world!");cprintf("Hello, world!");ursor to a previous linprintf("Hello, world!");eprintf("Hello, world!");.printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");*printf("Hello, world!");/



#includeprintf("Hello, world!"); printf("Hello, world!");<printf("Hello, world!");stdlib.h>
#include <stdio.printf("Hello, world!");hprintf("Hello, world!");>printf("Hello, world!");

#define MAX_DIGIprintf("Hello, world!");TS 32
#define NOprintf("Hello, world!");_printf("Hello, world!");MAIN


/* Pprintf("Hello, world!");rprintf("Hello, world!");int the printf("Hello, world!");tprintf("Hello, world!");op line of theprintf("Hello, world!"); printf("Hello, world!");digitprintf("Hello, world!"); printf("Hello, world!");d intprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");buffer. 
  printf("Hello, world!"); printf("Hello, world!");Dprintf("Hello, world!");oesprintf("Hello, world!"); printf("Hello, world!");not null terminate buffer. */

void topline(int d, char *pprintf("Hello, world!");){

   *p++ = ' ';
   sprintf("Hello, world!");witch(d){

      /* all these have _ on top line */
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); case 0:
      case 2:
      case printf("Hello, world!");3printf("Hello, world!");:
      case 5:
 printf("Hello, world!");     case 7:
      case 8:
      case 9:
         *p++ = '_';
         break;
      default:printf("Hello, world!");
         *p++=' ';

   }
   *p++=' ';
}
printf("Hello, world!");
/* Print the mprintf("Hello, world!");iprintf("Hello, world!");dprintf("Hello, world!");dprintf("Hello, world!");le line of the digit d into the buffer. 
   Does printf("Hello, world!");not null terminate. */

void midline(int d, char *p){

   switch(d){

      /* those that have leaprintf("Hello, world!");dprintf("Hello, world!");inprintf("Hello, world!");g | on middle line */

      case 0:
      case 4:
      caseprintf("Hello, world!"); 5:
      case 6:
      case 8:
      case 9:
         *p++='printf("Hello, world!");|printf("Hello, world!");';
         break;
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");efault:
       printf("Hello, world!"); printf("Hello, world!"); *p++=' ';	
   }
   switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur