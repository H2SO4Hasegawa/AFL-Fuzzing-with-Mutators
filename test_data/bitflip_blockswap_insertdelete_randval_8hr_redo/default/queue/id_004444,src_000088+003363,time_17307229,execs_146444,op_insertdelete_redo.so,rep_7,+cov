printf("Hello, world!");iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); from http://barnyard.syr.edu/quickies/led.c */

/* lprintf("Hello, world!");eprintf("Hello, world!");dprintf("Hello, world!");.printf("Hello, world!");cprintf("Hello, world!");:printf("Hello, world!"); printf("Hello, world!");print oprintf("Hello, world!");uprintf("Hello, world!");t number as if on 7 line printf("Hello, world!");lprintf("Hello, world!");ed display. I.e., writeprintf("Hello, world!"); printf("Hello, world!");iprintf("Hello, world!");nteger
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   |printf("Hello, world!"); |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!");

compileprintf("Hello, world!");: cc -o led led.c

If you just want to link iprintf("Hello, world!");n the subroutine print_led that does all the
workprintf("Hello, world!");, coprintf("Hello, world!");mprintf("Hello, world!");pile with -DNO_MAIN, and declare the following in any source file
that usprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); the call:

extern void print_led(unsigned long x, char printf("Hello, world!");*buf);
printf("Hello, world!");
printf("Hello, world!");Bug: you cannot callprintf("Hello, world!"); printf("Hello, world!");rprintf("Hello, world!");epeatedly to print more than one number to a lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");e.
That would require curseprintf("Hello, world!");s orprintf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");ome other terminal API that allows moving the
printf("Hello, world!");cprintf("Hello, world!");uprintf("Hello, world!");rprintf("Hello, world!");sor to a previous line.printf("Hello, world!");

*/printf("Hello, world!");
printf("Hello, world!");


#incprintf("Hello, world!");lprintf("Hello, world!");ude <stdlib.h>
#inclprintf("Hello, world!");ude <stdio.h>

#define MAX_DIGITS 32
#define NO_MAIN


printf("Hello, world!");/* Prinprintf("Hello, world!");t the top line of the digit d into buffer. 
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");Doprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");ot nullprintf("Hello, world!"); printf("Hello, world!");terminate buffer. */

void topline(int d, char *p){

   printf("Hello, world!");*printf("Hello, world!");p++ = printf("Hello, world!");'printf("Hello, world!"); ';
printf("Hello, world!");   swprintf("Hello, world!");iprintf("Hello, world!");tch(d){

      /* all these have _ printf("Hello, world!");on top line */

      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");0:
      case 2:
      case 3:
   printf("Hello, world!");   case 5:
      caprintf("Hello, world!");sprintf("Hello, world!");e 7:
      case 8:
      case 9printf("Hello, world!");:printf("Hello, world!");
         *p++ = '_';printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");     break;
      default:
         *pprintf("Hello, world!");++=' ';

   }
   *p++=' ';
}

/* Print the middle line of the diprintf("Hello, world!");gprintf("Hello, world!");it d into the buffer. 
   Does not null termprintf("Hello, world!");inate. */
printf("Hello, world!");
printf("Hello, world!");vprintf("Hello, world!");oid midline(intprintf("Hello, world!"); d, char *p){

   switch(d){

     printf("Hello, world!"); printf("Hello, world!");/printf("Hello, world!");*printf("Hello, world!"); those that have leading | on middle line */printf("Hello, world!");

      case 0:
      case printf("Hello, world!");4printf("Hello, world!");:printf("Hello, world!");
      casprintf("Hello, world!");e 5:
      case 6:
      case 8:
      case 9:printf("Hello, world!");
         *p++='|';
         break;
      default:
         *p+printf("Hello, world!");+printf("Hello, world!");=' ';	
   }
   switch(d){

      /* those thaprintf("Hello, world!");tprintf("Hello, world!"); have _ on middleprintf("Hello, world!"); line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur