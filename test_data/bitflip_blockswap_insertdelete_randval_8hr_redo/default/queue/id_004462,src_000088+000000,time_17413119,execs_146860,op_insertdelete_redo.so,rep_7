printf("Hello, world!");int
zero()
{
	printf("Hello, world!");return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number aprintf("Hello, world!");s if on 7 lineprintf("Hello, world!"); led display. I.e., write integer
   given on printf("Hello, world!");cprintf("Hello, world!");ommand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

  printf("Hello, world!"); printf("Hello, world!");Wprintf("Hello, world!");e assume the terminal behaves like a classical teletype. So the top
  printf("Hello, world!"); lines of all digits have to be printed first, thenprintf("Hello, world!"); the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led that does all the
work, compile with -DNO_MAIN, and declare the following in any sprintf("Hello, world!");oprintf("Hello, world!");urce file
that uprintf("Hello, world!");ses the call:

extern void print_led(unsignedprintf("Hello, world!"); long x, char printf("Hello, world!");*printf("Hello, world!");bprintf("Hello, world!");uprintf("Hello, world!");fprintf("Hello, world!"););

Bug:printf("Hello, world!"); printf("Hello, world!");you cannot call repeaprintf("Hello, world!");tedly to prinprintf("Hello, world!");t more thaprintf("Hello, world!");n one number to a line.
That would require curses or some other terminal API that allowsprintf("Hello, world!"); movingprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e
cursor to a previous linprintf("Hello, world!");eprintf("Hello, world!");.printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");*printf("Hello, world!");/printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");
#include <stprintf("Hello, world!");dlib.h>
#inprintf("Hello, world!");cprintf("Hello, world!");lprintf("Hello, world!");uprintf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!"); <stdio.h>

#defprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");e MAX_DIGITS 32
#printf("Hello, world!");define NO_Mprintf("Hello, world!");Aprintf("Hello, world!");IN


/* Print the top line ofprintf("Hello, world!"); the diprintf("Hello, world!");git d into buffer. 
   Does not null terminateprintf("Hello, world!"); printf("Hello, world!");buffer. */

void topline(iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!"); d, char *p){

   *p++ = ' ';
   switch(d){printf("Hello, world!");

      /* all theprintf("Hello, world!");sprintf("Hello, world!");e have _ on printf("Hello, world!");top linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");/printf("Hello, world!");
printf("Hello, world!");
      case 0:
      case 2:
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   case 3:
 printf("Hello, world!"); printf("Hello, world!");    case 5:
      case 7:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    case 8:
      case 9printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");     *p++ = '_';
         break;
printf("Hello, world!"); printf("Hello, world!");     default:
   printf("Hello, world!");      *p++=' ';

   }
   *p++=' ';
}

/* Print the middle line of the digit d into the buffprintf("Hello, world!");er. 
   Does not null terminate. */

void midline(int d, char *p){

   switch(d){
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); /* those that have leading | printf("Hello, world!");on mprintf("Hello, world!");iddle line */printf("Hello, world!");
printf("Hello, world!");
   printf("Hello, world!"); printf("Hello, world!");  case 0:
      case 4:
      caseprintf("Hello, world!"); printf("Hello, world!");5:
      case 6:
   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); case 8:
      case 9:
         *p++='|';
       printf("Hello, world!");  break;
      default:
         *printf("Hello, world!");pprintf("Hello, world!");++=' ';	
   }
   sprintf("Hello, world!");witch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur