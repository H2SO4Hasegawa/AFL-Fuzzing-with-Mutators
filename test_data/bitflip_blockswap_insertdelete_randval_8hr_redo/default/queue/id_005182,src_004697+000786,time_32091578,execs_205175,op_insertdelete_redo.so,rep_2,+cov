printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");
printf("Hello, world!");zuro()
{
	retprintf("Hello, world!");uprintf("Hello, world!");rprintf("Hello, world!");nprintf("Hello, world!"); 0;
}

struct S
{printf("Hello, world!");
	inÿÿÿzerofuncty
go()
{
	returR &anonÄ
}

i)();
} s = { &zero };

struct S *
anon() {
	return &s;
}

typedef printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");rprintf("Hello, world!");ucprintf("Hello, world!");t S * (*fty)H);

fty
go()
{
return &Inliprintf("Hello, world!");iprintf("Hello, worldprintf("Hello, world!");!");nt
zero()
{
	return 0;
}

struct S
{
	int iprintf("Hello, world!");nprintf("Hello, world!");t
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); from http://barnyprintf("Hello, world!");aprintf("Hello, world!");rprintf("Hello, world!");dprintf("Hello, world!");.printf("Hello, world!");sprintf("Hello, world!");yr.edu/quickies/lprintf("Hello, world!");eprintf("Hello, world!");d.cprintf("Hello, world!"); */

/* led.c: print out number as if on 7 line led display. I.e., wrprintf("Hello, world!");ite integer
   given on printf("Hello, world!");cprintf("Hello, world!");ommand line like this:  printf("Hello, world!");
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   Weprintf("Hello, world!"); printf("Hello, world!");aprintf("Hello, world!");ssume the terminalprintf("Hello, world!");printf("Hello, world!"); bprintf("Hello, world!");ehaves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   printf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If yprintf("Hello, world!");ou just want to link in the subroutine print_led that does all the
work, comprintf("Hello, world!");pprintf("Hello, world!");ile with -DNO_MAIN, and printf("Hello, world!");declare the follprintf("Hello, world!");oprintf("Hello, world!");wprintprintf("Hello, world!");fprintf("Hello, world!");("Hello, world!");iprintf("Hello, world!");ng in any souprintf("Hello, world!");rce file
tprintf("Hello, world!");hat usprintf("Hello, world!");eprintf("Hello, world!");s the call:

extern void print_led(unsigned long printf("Hello, world!");x, cprintf("Hello, world!");hprintf("Hello, world!");arprintf("Hello, printf("Hello, world!");world!"); printf("Hello, world!");*bufprintf("Hello, world!");)printf("Hello, world!");;

Bug: you cannot call repeatedly to print moreprintf("Hello, world!"); printf("Hello, world!");than one number to a linepriprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");fprintf("Hello, world!");("Hello, world!");.printf("Hello, wprintf("Hello, world!");oprintf("Hello, world!");rld!");
That would require curses or some printf("Hellprintf("Hello, world!");o, world!");opriprintf("Hello, world!");ntf("Hello, world!");tprintf("Hello, world!");hprintf("Hprintf("Hello, world!");eprintf("Hello, world!");llo, world!");er tprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");minal API that printf("Hello, world!");allows moving tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!");
cursor printf("Hello, world!");tprintf("Hello, world!");o a prprintf("Helprintf("Hello, world!");lprintf("Hello, world!");oprintf("Hello, world!");, world!");evioprintf("Hello, world!");uprintf("Hello, world!");s line.

*/


printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");iprintf("Hello, world!");nclude <stprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");b.h>
#includeprintf("Hello, world!"); <stprintf("Hello, world!");dprintf("Hello, world!");iprintf("Hello, world!");o.h>
printf("Hello, world!");
printf("Hello, world!");#printf("Hellprintf("Hello, world!");o, woprintf("Hello, world!");rld!");dprintf("Heprintf("Hello, world!");lprintf("Hello, world!");lo, world!");eprintf("Hello, world!");fine MAX_DIGITS 32
#define NO_MAIN
printf("Hello, world!")printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");/printf("Hello, world!");*printf("Hello, world!"); Print the top line of the digit d into buffer. 
   Does not null terminate buffer.printf("Hello, world!"); printf("Hello,printf("Hello, world!"); printf("Hello, world!");wprintf("Hello, world!");orld!");*printf("Hello, world!");/printf("Hello, world!");
printf("Hello, world!");
printf("Hellprintf("Hello, world!");o, world!");void tprintf("Hello, world!");opline(int d, char *p){printf("Hello, world!");
printf("Hello, world!");
   *p++ = ' ';
   switprintf("Hello, world!");cprintf("Hello, world!");h(d){

      /* all thprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");have _ on toprprintf("Hello, world!");iprintf("Hello, world!");ntf("Hello, world!");p line */

      case 0:
  printf("Hello, world!");    case 2:
      case 3printf("Hello, world!");:
  prprintf("Hello, world!");iprintf("Hello, world!");ntf("Hello, world!"); printf("Hello, world!"); printprintf("Hello, world!");fprintf("Hello, world!");("Hello,printf("Hello, world!"); world!"); printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 5:
      case 7:
printprintf("Hello, world!");fprintf("Hello, world!");(printf("Hello, world!");"printf("Hello, world!");Helloprintf("Hello, world!");,printf("Hello, world!"); wprintf("Hello, world!");oprintf("Hello, world!");rld!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hprintf("Hello, world!");eprintf("Hello, world!");llo, world!");   caseprintf("Hello, world!"); printf("Hello, world!");8:
      case 9printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");         *p++ = '_'printf("Hello, world!");;
         break;
   printf("Hello, world!"); printf("Hello, world!");  default:
         *p++=' 'printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");  }
  printf("Hello, world!"); *p++prinprintf("Hello, world!");tprintf("Hello, world!");fprintf("Hello, world!");("Hello, world!");=' ';
}

printf("Hello, world!");/priprintf("Hello, world!");ntf("Hello, world!");* Print the middle linprintf("Hello, world!");e of the digit d inprintf("Hellprintf("Hello, world!");o, world!");to the bprintf("Hello, printf("Hello, world!");wprintf("Hello, world!");oprintf("Hello, world!");rld!");uffer. 
printf("Hello, world!");   Does not null terminate. */
prinprintf("Hello, world!");tprintf("Hello, world!");f(printf("Hello, world!");"printf("Hello, world!");Hprintf("Hello, world!");eprintf("Hello, world!");llo, world!");
printf("Hello, world!");void printf("Hello, world!");midline(intprintf("Hello, world!"printf("Hello, world!");)printf("Hello, world!");; d, char *p){

   switch(d){

      /* those thprintf("Hello, world!");aprintf("Hello, world!");t have leading | on printf("Hello, world!");mprintf("Hello, world!");iddle line */

      case 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:printf("Hello, world!");
         *p++='|';
      printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); break;
   printf("Hello, world!");   printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");aprintf("Hello, world!");ult:
         *p++='printf("Hello, world!"); printf("Hello, world!");';	
   }printf("Hello, world!");
   switch(d){

      /* those that have _ on middle line */
printf("Hello, world!");
      case 2:
      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");3:
      case 4:
      case 5:
      case 6:
      case 8:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line *