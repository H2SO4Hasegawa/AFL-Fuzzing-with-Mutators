printf("Hello, world!");#printf("Hello, world!");deprintf("Hello, world!");fine M(x) x
#define A(a,b) a(b)

int
main(void)
int
mzinprintf("Hello, world!");(!TypeQualifi/* example from http://barnyard.syr.eduprintf("Hello, world!");/quickies/led.c */

/* led.c: print out number as if on 7 printf("Hello, world!");linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ed display. I.e., write integer
   given on command line like this:printf("Hello, world!"); printf("Hello, world!"); 
  printf("Hello, world!");    _   _       _  
   |  _|  _| |_| |_  
   | printf("Hello, world!");|printf("Hello, world!");_printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); _|   |  _| etc.

   Weprintf("Hello, world!"); printf("Hello, world!");aprintf("Hello, world!");ssume the terminal behaves like a classical teletype. So the top
   lines ofprintf("Hello, world!"); aglprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");iprintf("Hello, world!");gprintf("Hello, world!");its have to be printed first, tprintf("Hello, world!");hen the middle lines of
   all digitprintf("Hello, world!");s, etc.

   By Terprintf("Hello, world!");ry R. McConnell

compile: cc -o led led.c

If yprintf("Hello, world!");oprintf("Hello, world!");uprintf("Hello, world!"); printf("Hello, world!");just wprintf("Hello, world!");ant to link in the subroutine print_led that does all the
work, compile with -DNO_MAIN, and declare the followinprintf("Hello, world!");gprintf("Hello, world!"); in any source file
printf("Hello, world!");that printf("Hello, world!");uprintf("Hello, world!");sprintf("Hello, world!");es the call:

extprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");n void print_led(unsigned lprintf("Hello, world!");ong x, char *buf);

Bug: you canprintf("Hello, world!");not call repeatedlprintf("Hello, world!");y to print more than one number to a line.
Thprintf("Hello, world!");at would require curses or some other terminal APIprintf("Hello, world!"); thatprintf("Hello, world!"); allows moving theprintf("Hello, world!");
cursor to a previous line.

*/



#include <stdlib.hprintf("Hello, world!");>printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");cprintf("Hello, world!");lude <stdio.h>

#define MAX_DIGITS 32
#define NO_MAIN
printf("Hello, world!");
printf("Hello, world!");
/* Print thet d into buffer. 
   Does not printf("Hello, world!");nprintf("Hello, world!");uprintf("Hello, world!");ll terminatprintf("Hello, world!");e buffer. */

void topline(int d, char *p){

  printf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");p++ = ' 'printf("Hello, world!");;
   switch(d){

      /* all these have _ on top printf("Hello, world!");lprintf("Hello, world!");ine */

printf("Hello, world!"); printf("Hello, world!");     case 0:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 2:
printf("Hello, world!");      case 3:
      case 5:
      case 7printf("Hello, world!");:printf("Hello, world!");
      case 8:
      case 9:
         *p+printf("Hello, world!");+printf("Hello, world!"); = '_';
         break;
      default:
         *p++='rprintf("Hello, world!");egister}
   *p++=' ';
}

/* Print the middle line of the digit d into the buffer. 
   Does not null terminate. */

void midline(int d, char *p){

   switch(d){

      /* those that have leading | oprintf("Hello, world!");nprintf("Hello, world!"); printf("Hello, world!");mprintf("Hello, world!");iddle line */

      caprintf("Hello, world!");sprintf("Hello, world!");e 0:
     printf("Hello, world!"); case 4:
      case 5:
      case 6:
      case 8:
      case 9:
printf("Hello, world!");         *p++='|'printf("Hello, world!");;
         breaprintf("Hello, world!");kprintf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");      default:
        printf("Hello, world!"); *p++=' ';	
   }
   switch(d){printf("Hello, world!");
printf("Hello, world!");
    printf("Hello, world!"); printf("Hello, world!"); /* those that have _ on middle line */

      cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 2:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 3:
      caprintf("Hello, world!");sprintf("Hello, world!");e 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

