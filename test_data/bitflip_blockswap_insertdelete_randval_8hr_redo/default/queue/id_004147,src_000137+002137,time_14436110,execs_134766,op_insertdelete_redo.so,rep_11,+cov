#define M(x) x
#define A(a,b) a(b)
printf("Hello, world!");
int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syprintf("Hello, world!");rprintf("Hello, world!");.printf("Hello, world!");edu/quickies/led.c */

/* led.c: print out number as if on 7 liprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ed display. I.e., write integer
   given on command line like this:  
      _   _       _  printf("Hello, world!");
 printf("Hello, world!");  printf("Hello, world!");|  _|  _| |_| |_  
   | |_   _|   |  _| etc.

  printf("Hello, world!"); We assume the terminal behaves like a classical teletype. So the top
  printf("Hello, world!"); lines of agl digits have toprintf("Hello, world!"); be printed first, then the middle lines of
   alprintf("Hello, world!");lprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");iprintf("Hello, world!");gprintf("Hello, world!");iprintf("Hello, world!");ts, etc.

   Bprintf("Hello, world!");yprintf("Hello, world!"); Terry R. McConnell

printf("Hello, world!");cprintf("Hello, world!");ompile: cc -printf("Hello, world!");o led led.c

If yoprintf("Hello, world!");u jusprintf("Hello, world!");t want to link in the subroutineprintf("Hello, world!"); printf("Hello, world!");print_led that does all the
work, compile printf("Hello, world!");wprintf("Hello, world!");ith -DNO_MAIN, and declare the following in any source fiprintf("Hello, world!");lprintf("Hello, world!");e
that uses the call:

extern void print_led(unsigprintf("Hello, world!");nprintf("Hello, world!");ed long printf("Hello, world!");xprintf("Hello, world!");, char *buf);

Bug: you cannot call repeatedly to print more than one number to a line.
That would require curses oprintf("Hello, world!");r soprintf("Hello, world!");me oprintf("Hello, world!");tprintf("Hello, world!");her terminal API that allows moving the
curprintf("Hello, world!");sprintf("Hello, world!");oprintf("Hello, world!");rprintf("Hello, world!"); to a previous line.

*printf("Hello, world!");/


printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");cprintf("Hello, world!");lude <stdlib.h>
#include <stdio.h>

#define MAX_DIGITSprintf("Hello, world!"); 32
#defiprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");NO_MAIN


/*printf("Hello, world!"); Print thet d into buffer. 
   Does not null terminate buffer. */printf("Hello, world!");

void topline(int d, char *p){

   *printf("Hello, world!");p++ printf("Hello, world!");= ' ';
   switch(dprintf("Hello, world!");)printf("Hello, world!");{printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    /* all tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!");se have _ printf("Hello, world!");oprintf("Hello, world!");n top line */

      case 0:
      printf("Hello, world!");cprintf("Hello, world!");ase 2:
      case 3:
      case 5:
      case 7:
      case 8:
    printf("Hello, world!");  case 9:
         *p++ printf("Hello, world!");=printf("Hello, world!"); '_';
         break;
      default:
         *p++='reprintf("Hello, world!");gister}
   *p++=' ';
}

/* Print the middle line oprintf("Hello, world!");f the digit d into the buffer. 
   Doesprintf("Hello, world!"); printf("Hello, world!");not null terminate. */

void midliprintf("Hello, world!");ne(int d, char *p){

   switchprintf("Hello, world!");(printf("Hello, world!");dprintf("Hello, world!");)printf("Hello, world!");{

      /* those that have printf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");ading | on middle line */

      case 0:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     caseprintf("Hello, world!"); 4:
      case 5:
      case 6:
 printf("Hello, world!");     case 8:
printf("Hello, world!");      case 9:
         *p++='printf("Hello, world!");|';
         break;
      defauprintf("Hello, world!");lprintf("Hello, world!");tprintf("Hello, world!");:printf("Hello, world!");
         *p++=' ';printf("Hello, world!");	
   }
   switch(d){printf("Hello, world!");

      /* those that printf("Hello, world!");have _ on middle line */

      case 2:
      printf("Hello, world!");case 3:
      case printf("Hello, world!");4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

