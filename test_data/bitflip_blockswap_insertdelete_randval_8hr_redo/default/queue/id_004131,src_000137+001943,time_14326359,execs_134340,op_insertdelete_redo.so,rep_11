printf("Hello, world!");#define M(xprintf("Hello, world!");)printf("Hello, world!"); printf("Hello, world!");xprintf("Hello, world!");
printf("Hello, world!");#define A(a,b) a(b)

int
main(void)
int
mzin(!Typrintf("Hello, world!");pprintf("Hello, world!");eQualifi/* example from http://barnyard.syr.edu/quickies/leprintf("Hello, world!");dprintf("Hello, world!");.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on command line like this:printf("Hello, world!");  
      _   _       _  
   printf("Hello, world!");|  _|  _| |_| |_  
   | |_   _|   |  _| etc.

  printf("Hello, world!"); We assume the terminal behaves like a classical teprintf("Hello, world!");letype. So the top
   lines of agl digits have tprintf("Hello, world!");oprintf("Hello, world!"); be printed first, then tprintf("Hello, world!");he middle lines of
   all digits, etc.

   By Terry printf("Hello, world!");Rprintf("Hello, world!");. McCprintf("Hello, world!");onnell

compile: cprintf("Hello, world!");cprintf("Hello, world!"); -o led led.c

If you just want to liprintf("Hello, world!");nk in tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); subroutine print_led that does all the
work, compile with -DNO_MAIN,printf("Hello, world!"); and declare the following in any source file
that uses the call:

extern void prprintf("Hello, world!");iprintf("Hello, world!");nt_led(unsigned long x, cprintf("Hello, world!");har *buf);

Bug: you cannot call repeatprintf("Hello, world!");eprintf("Hello, world!");dly to print more than one number to a line.
Thaprintf("Hello, world!");t would require cuprintf("Hello, world!");rses or some other terminal API that allows moving the
cursoprintf("Hello, world!");r to a previous line.

*/



#include <stprintf("Hello, world!");dlib.printf("Hello, world!");h>
#printf("Hello, world!");inclprintf("Hello, world!");uprintf("Hello, world!");de <stdio.h>

#define MAX_DIGITS 3printf("Hello, world!");2printf("Hello, world!");
#define NO_MAIN


/* Prinprintf("Hello, world!");t thprintf("Hello, world!");et dprintf("Hello, world!"); into buffer. 
   printf("Hello, world!");Dprintf("Hello, world!");oprintf("Hello, world!");eprintf("Hello, world!");s not null terminate buffer. */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){
printf("Hello, world!");
      /* all these have _ on top line */

   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 0:
 printf("Hello, world!");     case 2:
      case 3:
      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");5:
      case 7:
      case 8:
      case 9:
         *p++ = printf("Hello, world!");'_';
         bprintf("Hello, world!");rprintf("Hello, world!");eprintf("Hello, world!");ak;
     printf("Hello, world!"); printf("Hello, world!");defaultprintf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    *p++='register}
   *p++=' ';
printf("Hello, world!");}printf("Hello, world!");

/* Print the middle line of the digit dprintf("Hello, world!"); into the printf("Hello, world!");buffer. 
   Does not null terminate. */

void midline(int d,printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");r *p){

   switch(d){

 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  /* those thaprintf("Hello, world!");tprintf("Hello, world!"); have leading | on printf("Hello, world!");mprintf("Hello, world!");iddle lineprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");/

      case 0printf("Hello, world!");:
      case 4:
 printf("Hello, world!"); printf("Hello, world!");    casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");5:
      case 6:
      case 8:
   printf("Hello, world!"); printf("Hello, world!");  printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");e 9:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on middle line */
printf("Hello, world!");
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

