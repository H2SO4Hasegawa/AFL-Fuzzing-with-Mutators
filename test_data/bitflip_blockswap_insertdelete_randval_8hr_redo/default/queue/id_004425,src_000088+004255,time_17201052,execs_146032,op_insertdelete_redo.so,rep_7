int
zero()
{
printf("Hello, world!");	return 0;printf("Hello, world!");
}

struct S
{
	int int
mzin(!TypeQualifi/* example printf("Hello, world!");fprintf("Hello, world!");rprintf("Hello, world!");om http://barnyard.syr.edu/quickies/led.printf("Hello, world!");cprintf("Hello, world!"); */

/* led.c: print oprintf("Hello, world!");uprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");number as if on 7 line led display. I.e., writeprintf("Hello, world!"); printf("Hello, world!");iprintf("Hello, world!");nteger
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classicaprintf("Hello, world!");lprintf("Hello, world!"); teprintf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");tprintf("Hello, world!");ype. So the top
   lines of all digits have to be printed first, then the middle lineprintf("Hello, world!");s of
   all digiprintf("Hello, world!");tprintf("Hello, world!");sprintf("Hello, world!");,printf("Hello, world!"); etc.

   By Terry R. McConnelprintf("Hello, world!");l

compprintf("Hello, world!");iprintf("Hello, world!");le: cc -o led led.c

Ifprintf("Hello, world!"); printf("Hello, world!");yprintf("Hello, world!");ou just wanprintf("Hello, world!");t to link in the subroutineprintf("Hello, world!"); print_led printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");at does all the
work, compile with -DNO_MAIN, and declare the folloprintf("Hello, world!");wing in any source file
that uses the call:

printf("Hello, world!");exterprintf("Hello, world!");nprintf("Hello, world!"); void pprintf("Hello, world!");rint_led(unsigned long x, char *buf);

Bug: yoprintf("Hello, world!");uprintf("Hello, world!"); cannot call repprintf("Hello, world!");eprintf("Hello, world!");atedly tprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");print more than one number to a line.printf("Hello, world!");
That would require curses or some other terminal printf("Hello, world!");API that allows moving the
cursorprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");a printf("Hello, world!");pprintf("Hello, world!");revious line.

*/



#includprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");<printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");dlib.h>
#printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");cprintf("Hello, world!");lude <stdio.h>

#define MAX_DIGITS 32
#define NO_MAprintf("Hello, world!");Iprintf("Hello, world!");Nprintf("Hello, world!");


/* Print theprintf("Hello, world!"); top liprintf("Hello, world!");nprintf("Hello, world!");e of the digit d into buffer. 
   Does not nprintf("Hello, world!");uprintf("Hello, world!");ll termiprintf("Hello, world!");nate buffer. */

void topline(inprintf("Hello, world!");tprintf("Hello, world!"); d, char *p){

   *p++ = ' ';
   sprintf("Hello, world!");witch(d){

      /* all these have _ on top line */

      case 0:
      case 2:
      case 3:
printf("Hello, world!");      case 5:
      printf("Hello, world!");case 7:
 printf("Hello, world!");     case 8:
      case 9:
         *p++ = '_';
         break;
      default:
         *pprintf("Hello, world!");++=' ';
printf("Hello, world!");
   }
   *p++=' ';
}

/* Print the middprintf("Hello, world!");le line of the digit d into the buffer. 
   Does not null tprintf("Hello, world!");erminate. */

void midline(int d, char *p){

   switch(d){

      /* those that have leading | on printf("Hello, world!");mprintf("Hello, world!");iddle line */

printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   case 0:printf("Hello, world!");
      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");4:
      case 5:
      case 6:
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   case 8:
   printf("Hello, world!"); printf("Hello, world!");  case 9:
         *p++='|';
         break;
      defprintf("Hello, world!");aprintf("Hello, world!");uprintf("Hello, world!");lprintf("Hello, world!");t:
         *p++printf("Hello, world!");=printf("Hello, world!");'printf("Hello, world!"); ';	
   }
   switch(d){

      /* those thaprintf("Hello, world!");tprintf("Hello, world!"); have _ on middleprintf("Hello, world!"); line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur