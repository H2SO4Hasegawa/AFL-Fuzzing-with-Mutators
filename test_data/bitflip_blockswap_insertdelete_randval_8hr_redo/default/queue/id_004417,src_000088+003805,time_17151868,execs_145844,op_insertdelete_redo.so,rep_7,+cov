printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");t
zero()
{
	return 0;
}

struct S
{
	int int
mzinprintf("Hello, world!");(printf("Hello, world!");!printf("Hello, world!");TypeQualifi/* example from http://barnyaprintf("Hello, world!");rprintf("Hello, world!");dprintf("Hello, world!");.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 linprintf("Hello, world!");e led display. I.e., write integer
   given on comprintf("Hello, world!");mand line like this:  
      _   _       _  
   |printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");_printf("Hello, world!");|  _| |_| |_  
   | |_   _|   |  _| etc.

   Weprintf("Hello, world!"); assume the terminal behaves like a classical teprintf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");tprintf("Hello, world!");yprintf("Hello, world!");pe. So the top
   lines of all digits have to be printed printf("Hello, world!");fprintf("Hello, world!");irst, then the middle lines of
 printf("Hello, world!");  all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led thaprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");oes all the
woprintf("Hello, world!");rprintf("Hello, world!");kprintf("Hello, world!");, compprintf("Hello, world!");iprintf("Hello, world!");le with -DNO_MAIN, and declare the following in anprintf("Hello, world!");yprintf("Hello, world!"); source file
that uses the cprintf("Hello, world!");all:

extern void print_led(unsprintf("Hello, world!");iprintf("Hello, world!");gned loprintf("Hello, world!");ng xprintf("Hello, world!");, char *buf);

Bug: you cannot call repeatedly to pprintf("Hello, world!");rprintf("Hello, world!");int more thprintf("Hello, world!");aprintf("Hello, world!");nprintf("Hello, world!"); one number to a line.
Thprintf("Hello, world!");aprintf("Hello, world!");t would require cursprintf("Hello, world!");es or some other terminal API that allows moving thprintf("Hello, world!");eprintf("Hello, world!");
cursorprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");o a previous line.

*/



#incluprintf("Hello, world!");dprintf("Hello, world!");e <stdlib.h>
#include <stdio.h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Prinprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e top line of the digit d into bufferprintf("Hello, world!");.printf("Hello, world!"); printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");  Does not null terminate buffer.printf("Hello, world!"); */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){

      /* all printf("Hello, world!");these have _ on top line */

      case 0:
  printf("Hello, world!");    printf("Hello, world!");case 2:
      case 3:
      case 5:
      caseprintf("Hello, world!"); 7:
printf("Hello, world!");      case printf("Hello, world!");8printf("Hello, world!");:
      case 9:
         *p++ = '_';
         break;
     printf("Hello, world!"); default:
         *p++printf("Hello, world!");=printf("Hello, world!");'printf("Hello, world!"); ';

   }
   *p++=' ';
}

/* Print the middle line of the digit d into theprintf("Hello, world!"); buffer. 
   Does printf("Hello, world!");not nullprintf("Hello, world!"); terminate. */

void midline(int d, char *p){

   switch(d){

 printf("Hello, world!"); printf("Hello, world!");    /* those that have leading | on middle line */

      case 0:printf("Hello, world!");
      case 4:
   printf("Hello, world!");   case 5:
      case 6:
 printf("Hello, world!");     case 8:
      case 9:
    printf("Hello, world!");     *p++='|';
     printf("Hello, world!");    break;
      default:printf("Hello, world!");
         printf("Hello, world!");*p++=' ';	
   }
   switchprintf("Hello, world!");(printf("Hello, world!");d){

      /* those that have _ on middle line printf("Hello, world!");*printf("Hello, world!");/printf("Hello, world!");

 printf("Hello, world!"); printf("Hello, world!");    caseprintf("Hello, world!"); printf("Hello, world!");2:
      case 3:
      case 4:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");se 5:
  printf("Hello, world!");    case 6:
      case 8:
      case 9:
         *printf("Hello, world!");p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur