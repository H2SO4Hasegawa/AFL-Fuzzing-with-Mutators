printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");
zero()
{
	return 0;
}
printf("Hello, world!");
printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");rprintf("Hello, world!");uprintf("Hello, world!");ct S
{
	inprintf("Hello, world!");t iprintf("Hello, world!");nprintf("Hello, world!");t
mzin(!TypeQualifi/* eprintf("Hello, world!");xprintf("Hello, world!");ample from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print ouprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");umber as if on 7 line led display. I.e., write integer
   given on command line like this:  
printf("Hello, world!");      _   _       _  
   |  _printf("Hello, world!");|printf("Hello, world!");  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletypeprintf("Hello, world!");.printf("Hello, world!"); So tprintf("Hello, world!");he top
   lines of all digits haveprintf("Hello, world!"); printf("Hello, world!");to bprintf("Hello, world!");e printed firstprintf("Hello, world!");,printf("Hello, world!"); then the miprintf("Hello, world!");dprintf("Hello, world!");dle linprintf("Hello, world!");eprintf("Hello, world!");s of
   all digits, etc.

   By Terprintf("Hello, world!");ry R. McConneprintf("Hello, world!");lprintf("Hello, world!");l

cprintf("Hello, world!");ompile: cc -o led led.c

If you just printf("Hello, world!");wprintf("Hello, world!");ant to link iprintf("Hello, world!");n the subroutine print_led that does all the
printf("Hello, world!");wprintf("Hello, world!");ork, comprintf("Hello, world!");pprintf("Hello, world!");iprintf("Hello, world!");le wprintf("Hello, world!");iprintf("Hello, world!");tprintf("Hello, world!");h -DNO_MAINprintf("Hello, world!");,printf("Hello, world!"); and decprintf("Hello, world!");lprintf("Hello, world!");aprintf("Hello, world!");rprintf("Hello, world!");e the followprintf("Hello, world!");ing in any source file
that uses the call:

externprintf("Hello, world!"); voidprintf("Hello, world!"); printf("Hello, world!");pprintf("Hello, world!");rprintf("Hello, world!");iprintf("Hello, world!");nt_led(unsigned long x, char *printf("Hello, world!");buf);

Bug: you cannot call repeatedly to print more printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");n printf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); number printf("Hello, world!");to a line.
That would require curses or some other terminal API that allows printf("Hello, world!");mprintf("Hello, world!");oprintf("Hello, world!");vprintf("Hello, world!");ing the
cursor to a pprintf("Hello, world!");revious line.

*printf("Hello, world!");/



#include <stdlib.h>
#incprintf("Hello, world!");lude <stdio.h>

#deprintf("Hello, world!");fine MAX_DIGITS 32printf("Hello, world!");
#deprintf("Hello, world!");fprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); NO_MAIN


/* Print the top line of the digit d into buffer. 
   Does not nuprintf("Hello, world!");lprintf("Hello, world!");l terminate buffer. */

void tprintf("Hello, world!");oprintf("Hello, world!");pline(int d, char *p){printf("Hello, world!");

   *p++ = ' ';
  printf("Hello, world!"); switch(d){

      /* all theseprintf("Hello, world!"); printf("Hello, world!");have _ on top line */

      case 0:
      case 2:
      case 3:
      case 5:
printf("Hello, world!");      case 7:
      case printf("Hello, world!");8:
      case 9:
  printf("Hello, world!"); printf("Hello, world!");      *p++ = '_';printf("Hello, world!");
         breakprintf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     defauprintf("Hello, world!");lt:
         *pprintf("Hello, world!");+printf("Hello, world!");+printf("Hello, world!");=printf("Hello, world!");'printf("Hello, world!"); ';

   }
   *p++=' ';
}

/* Print the middle line oprintf("Hello, world!");fprintf("Hello, world!"); the digit d into the buffer. 
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");Does not nulprintf("Hello, world!");l terminate. */

void midline(int d, char *p){
printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");  switch(d){

      printf("Hello, world!");/printf("Hello, world!");* those that have printf("Hello, world!");leading | on middle line */

      case 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur