printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fine M(x) x
#define A(a,b) a(b)printf("Hello, world!");

int
main(void)
int
mzin(!TypeQualifi/* example fromprintf("Hello, world!"); http://barnyaprintf("Hello, world!");rprintf("Hello, world!");dprintf("Hello, world!");.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   |printf("Hello, world!"); |printf("Hello, world!");_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");behaves like a classical teletype. So the top
   lines of agl digits haprintf("Hello, world!");ve to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compilprintf("Hello, world!");e: cc -o led led.c

If you just want to link in the subroutine print_led that does aprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!"); printf("Hello, world!");the
work, comprintf("Hello, world!");pprintf("Hello, world!");iprintf("Hello, world!");le with -DNO_MAIN, and decprintf("Hello, world!");lprintf("Hello, world!");aprintf("Hello, world!");re the following in any printf("Hello, world!");sprintf("Hello, world!");ource file
that uses the call:

extern void pprintf("Hello, world!");rint_led(unsigprintf("Hello, world!");ned long x, char *buf);

Bug: you cannot call repeatedly to print moprintf("Hello, world!");rprintf("Hello, world!");eprintf("Hello, world!"); than one number to a line.printf("Hello, world!");
That would requirprintf("Hello, world!");e curses or some other terminal API that allows moving the
cursor toprintf("Hello, world!"); printf("Hello, world!");a previous line.

*/



#include <stdprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");bprintf("Hello, world!");.printf("Hello, world!");hprintf("Hello, world!");>
#include <stdio.printf("Hello, world!");hprintf("Hello, world!");>printf("Hello, world!");
printf("Hello, world!");
#deprintf("Hello, world!");fprintf("Hello, world!");ine MAXprintf("Hello, world!");_printf("Hello, world!");Dprintf("Hello, world!");IGITS 32
#define NO_MAIN


/*printf("Hello, world!"); printf("Hello, world!");Pprintf("Hello, world!");rint thet d into buffer. 
   Does not null terprintf("Hello, world!");minate buffer. */

void toplinprintf("Hello, world!");e(inprintf("Hello, world!");tprintf("Hello, world!"); d, char *p){
printf("Hello, world!");
printf("Hello, world!");   *pprintf("Hello, world!");++ = ' ';
   switch(d){

      /* allprintf("Hello, world!"); printf("Hello, world!");these hprintf("Hello, world!");ave _ on printf("Hello, world!");top linprintf("Hello, world!");e */

      casprintf("Hello, world!");e 0:
      case 2:
      case printf("Hello, world!");3:
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); case 5:
      casprintf("Hello, world!");eprintf("Hello, world!"); 7printf("Hello, world!");:
      case 8:
      case 9:
         *p++ = '_printf("Hello, world!");'printf("Hello, world!");;
         break;
      default:
        printf("Hello, world!"); *p++='register}
   *p++=' ';
}

/* Print the middle line of the digit d into the buffer. 
   printf("Hello, world!");Dprintf("Hello, world!");oprintf("Hello, world!");es not nuprintf("Hello, world!");lprintf("Hello, world!");l terminate. */

void midline(int d, charprintf("Hello, world!"); *p){

   switcprintf("Hello, world!");h(d){

      /* those thatprintf("Hello, world!"); have leading | onprintf("Hello, world!"); middle line */

      case 0:
      case 4:
      case 5:
      case 6:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 8:
      case 9:
         *p++='|';
         break;
     printf("Hello, world!"); printf("Hello, world!");default:
         *p++='printf("Hello, world!"); ';	printf("Hello, world!");
   }
   switchprintf("Hello, world!");(printf("Hello, world!");d){printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");      /printf("Hello, world!");*printf("Hello, world!"); those that have _ on middle line */

    printf("Hello, world!"); printf("Hello, world!"); case 2:
      casprintf("Hello, world!");e 3:
      printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");se 4:printf("Hello, world!");
printf("Hello, world!");      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

