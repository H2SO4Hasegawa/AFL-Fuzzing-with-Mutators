#define M(x) x
printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fine A(a,b) a(b)printf("Hello, world!");
printf("Hello, world!");
int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyaprintf("Hello, world!");rd.syr.edu/quickies/printf("Hello, world!");lprintf("Hello, world!");ed.c */

/* led.c: print out number as if on 7 linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");d display. I.e., writeprintf("Hello, world!"); printf("Hello, world!");iprintf("Hello, world!");nteger
   given on command line like this:  
      _   _       _  
   |  printf("Hello, world!");_|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of agl digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. printf("Hello, world!");McConnell

compile: ccprintf("Hello, world!"); -o led led.c

Iprintf("Hello, world!");f you jprintf("Hello, world!");uprintf("Hello, world!");st want to link in tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); subroutine pprintf("Hello, world!");rprintf("Hello, world!");int_ledprintf("Hello, world!"); thaprintf("Hello, world!");t does all the
work, compileprintf("Hello, world!"); printf("Hello, world!");with -DNO_MAIN, and declare the following in any sprintf("Hello, world!");oprintf("Hello, world!");uprintf("Hello, world!");rce printf("Hello, world!");fprintf("Hello, world!");iprintf("Hello, world!");le
that printf("Hello, world!");uses the call:

extern void prinprintf("Hello, world!");t_led(unsigned long x, chaprintf("Hello, world!");rprintf("Hello, world!"); *buf);

Bug: you cannot call repeateprintf("Hello, world!");dly printf("Hello, world!");to pprintf("Hello, world!");rprintf("Hello, world!");iprintf("Hello, world!");nt more than one nprintf("Hello, world!");uprintf("Hello, world!");mber to a line.
That would require curses orprintf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");ome other terminal API thprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");allows moving the
cursor to a previous line.

*/



#include <sprintf("Hello, world!");tdlib.h>
#include <stdiprintf("Hello, world!");oprintf("Hello, world!");.h>

printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");efine MAX_DIGITS printf("Hello, world!");32
#define printf("Hello, world!");NO_MAIN


/* Print thet d into buffer. 
 printf("Hello, world!");  Does not null terprintf("Hello, world!");minate buffer. */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){

      /printf("Hello, world!");*printf("Hello, world!"); all these have _ on top printf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");ne */

      case 0:
      case 2:
      case 3:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 5:
      case 7:
      case 8:
      caprintf("Hello, world!");se 9:
         *p++ = printf("Hello, world!");'_';
         break;printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   default:
         *p++='register}
   *p++=' ';
}

/*printf("Hello, world!"); Print the middle line of the digit d printf("Hello, world!");into the buffer. 
   Does not null terminaprintf("Hello, world!");tprintf("Hello, world!");e. */

void midline(intprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");,printf("Hello, world!"); char *p){

   switch(d){

 printf("Hello, world!"); printf("Hello, world!");    /* those thprintf("Hello, world!");at have leading | on middlprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ine */

      case 0:
      case 4:
     printf("Hello, world!"); printf("Hello, world!");case 5:printf("Hello, world!");
      cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");6:
      case 8:
      case 9:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");        *p++='printf("Hello, world!");|';
       printf("Hello, world!");  break;
      default:
         *p++=' ';	
   }
 printf("Hello, world!");  switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

