#define M(x) x
printf("Hello, world!");#define A(a,b) a(b)

int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syrprintf("Hello, world!");.printf("Hello, world!");eprintf("Hello, world!");du/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on printf("Hello, world!");cprintf("Hello, world!");ommand line like this:  printf("Hello, world!");
printf("Hello, world!");      _   _       _  
   |  _|  _| |_| |_  
 printf("Hello, world!");  | |_   _|   |  _| etc.

   printf("Hello, world!");We assume the terminal behaves like a classical teletype. So the top
   lines of agl digits have to be printed first, thenprintf("Hello, world!"); printf("Hello, world!");the middle lines of
   printf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subprintf("Hello, world!");routine print_led that does all the
work, comprintf("Hello, world!");pile with -DNO_MAIN, andprintf("Hello, world!"); printf("Hello, world!");declare the followinprintf("Hello, world!");gprintf("Hello, world!"); in any source file
that uses the callprintf("Hello, world!");:printf("Hello, world!");

extern void print_led(unsigned long x, char *buf);

Buprintf("Hello, world!");g: you cannot call repeatedly to print more tprintf("Hello, world!");hprintf("Hello, world!");an one numbeprintf("Hello, world!");r to a printf("Hello, world!");line.
That would requiprintf("Hello, world!");rprintf("Hello, world!");e cursprintf("Hello, world!");es oprintf("Hello, world!");rprintf("Hello, world!"); some oprintf("Hello, world!");ther terminal API that allprintf("Hello, world!");ows moving the
printf("Hello, world!");cursor to a previous line.

*/



#include <stdlib.printf("Hello, world!");h>
#printf("Hello, world!");iprintf("Hello, world!");nclude <stdio.h>

#define MAprintf("Hello, world!");Xprintf("Hello, world!");_DIGITS 32
#define NO_MAIN


/* Print thet d into buffer. 
printf("Hello, world!"); printf("Hello, world!");  Does not null terminate buffer. */printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");vprintf("Hello, world!");oprintf("Hello, world!");iprintf("Hello, world!");dprintf("Hello, world!"); tprintf("Hello, world!");opline(iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");d, char *p){

   *p++ = ' printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
   switch(d){

printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");/printf("Hello, world!");*printf("Hello, world!"); printf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hese have _ printf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!"); top lineprintf("Hello, world!"); */

      case 0:
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
    printf("Hello, world!"); printf("Hello, world!"); case 9:
         *p++ = '_';
         break;
      default:
         *p++='register}
   *p++=' ';
}
printf("Hello, world!");
printf("Hello, world!");/* Print the middle line of the digit d intprintf("Hello, world!");o the buffer. 
   Doesprintf("Hello, world!"); not null terminate. */

void midline(intprintf("Hello, world!"); printf("Hello, world!");d, char *p){

   switch(printf("Hello, world!");d){

      /* thoseprintf("Hello, world!"); that have leading | on middle line */

 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   case printf("Hello, world!");0:
      case 4:
      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");5:
      case 6:
      case 8:
      case 9:
         *p++='|';
  printf("Hello, world!"); printf("Hello, world!");      bprintf("Hello, world!");reak;
  printf("Hello, world!");    default:
         *p++=' ';	
printf("Hello, world!");   printf("Hello, world!");}
   switch(d){

      /* those that have _ onprintf("Hello, world!"); printf("Hello, world!");middle line */
printf("Hello, world!");
      case 2:
      cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");3printf("Hello, world!");:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

