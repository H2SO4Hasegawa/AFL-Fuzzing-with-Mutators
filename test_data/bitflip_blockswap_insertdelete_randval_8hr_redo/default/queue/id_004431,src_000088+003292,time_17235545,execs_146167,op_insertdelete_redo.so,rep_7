int
printf("Hello, world!");zprintf("Hello, world!");ero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); printf("Hello, world!");from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print ouprintf("Hello, world!");t number as if on 7 printf("Hello, world!");lprintf("Hello, world!");ine led display. I.e., write integer
   given on cprintf("Hello, world!");ommand line like this:  
      _   _       _  
   |  _|  _| |_| |_  
  printf("Hello, world!"); |printf("Hello, world!"); |printf("Hello, world!");_printf("Hello, world!");   _|   |  _| etc.

  printf("Hello, world!"); We assume the terminal behaves like a classical teprintf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");type. So the top
   lines of all digits have to be printed first, then tprintf("Hello, world!");hprintf("Hello, world!");e middle lines of
   all diprintf("Hello, world!");gitsprintf("Hello, world!");,printf("Hello, world!"); printf("Hello, world!");eprintf("Hello, world!");tc.

   By Terry R. McConnell

compileprintf("Hello, world!");: cc -o led led.c

If you just want to link iprintf("Hello, world!");nprintf("Hello, world!"); printf("Hello, world!");the subroutine print_led thprintf("Hello, world!");aprintf("Hello, world!");t does all the
work, printf("Hello, world!");compile with printf("Hello, world!");-printf("Hello, world!");Dprintf("Hello, world!");NO_MAIN, and declare the following in any source file
that uses the calprintf("Hello, world!");l:

extprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");n void priprintf("Hello, world!");nt_lprintf("Hello, world!");ed(uprintf("Hello, world!");nprintf("Hello, world!");sprintf("Hello, world!");igned long x, cprintf("Hello, world!");har *buf);

Bug: you cannot call repprintf("Hello, world!");eatedprintf("Hello, world!");lprintf("Hello, world!");yprintf("Hello, world!"); printf("Hello, world!");to priprintf("Hello, world!");nt more thprintf("Hello, world!");aprintf("Hello, world!");n one number to a line.
Thprintf("Hello, world!");at wprintf("Hello, world!");oprintf("Hello, world!");uld reqprintf("Hello, world!");uprintf("Hello, world!");iprintf("Hello, world!");re cprintf("Hello, world!");ursprintf("Hello, world!");eprintf("Hello, world!");s or some other terminprintf("Hello, world!");al API printf("Hello, world!");that allows moving the
cursor to a previous liprintf("Hello, world!");ne.

*/



#includprintf("Hello, world!");e <stdlib.h>
#include <stprintf("Hello, world!");dio.h>

#deprintf("Hello, world!");fine MAX_DIGITS 32
#define NO_MAIN


/* Prprintf("Hello, world!");int printf("Hello, world!");the top line of thprintf("Hello, world!");e digit d into buffer. 
 printf("Hello, world!"); printf("Hello, world!"); Doesprintf("Hello, world!"); not null terminate buffer. */printf("Hello, world!");
printf("Hello, world!");
void topline(int d, cprintf("Hello, world!");hprintf("Hello, world!");ar *p){

   *p++ = ' ';
   switch(d){

   printf("Hello, world!");   /* all printf("Hello, world!");these have _ on top line */

      case 0:
      case 2:
      case 3:
      case 5:
      caprintf("Hello, world!");sprintf("Hello, world!");e 7:
      case 8:
      case printf("Hello, world!");9:
         *p++ = '_';
         break;
      default:
      printf("Hello, world!");   *p++=' ';

   }
   *p++=' ';
}

/* Print the middle line printf("Hello, world!");of the digit d into the buffer. 
   Doesprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");oprintf("Hello, world!");tprintf("Hello, world!"); null terminate. */

void midline(int d, char *p){

   swprintf("Hello, world!");iprintf("Hello, world!");tch(d){

      /* those that haprintf("Hello, world!");ve leading | on middle line */

      case 0:
      case 4:
      casprintf("Hello, world!");eprintf("Hello, world!"); 5:
      case 6:
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 8:
      case printf("Hello, world!");9printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   *p++='|';
         break;
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");default:
         *p++=' ';	
   }
   switchprintf("Hello, world!");(d){

      /* those that have _ on middle printf("Hello, world!");line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur