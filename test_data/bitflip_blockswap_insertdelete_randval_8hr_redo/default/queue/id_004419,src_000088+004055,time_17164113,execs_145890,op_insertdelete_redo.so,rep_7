printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");t
zero()
{
	return 0;
}

struct S
{
	int int
mzinprintf("Hello, world!");(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 liprintf("Hello, world!");ne led display. I.e., wrprintf("Hello, world!");iprintf("Hello, world!");tprintf("Hello, world!");e integer
   given on command line like this:  
      _   _       _  
   printf("Hello, world!");|printf("Hello, world!"); printf("Hello, world!"); _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have tprintf("Hello, world!");oprintf("Hello, world!"); be printed first, then printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); middle lines of
   all digits, etc.

   By Terry printf("Hello, world!");Rprintf("Hello, world!");. McCprintf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!");nprintf("Hello, world!");ell

compileprintf("Hello, world!");: cc -o led leprintf("Hello, world!");dprintf("Hello, world!");.printf("Hello, world!");cprintf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");If you just want to link printf("Hello, world!");in tprintf("Hello, world!");he subroutineprintf("Hello, world!"); printf("Hello, world!");pprintf("Hello, world!");rint_led that does all the
work, compile with -DNO_MAIN, and declare the following in any source file
tprintf("Hello, world!");hat uses the call:

extern void print_led(unsprintf("Hello, world!");igned long x, charprintf("Hello, world!"); *buprintf("Hello, world!");fprintf("Hello, world!");)printf("Hello, world!");;printf("Hello, world!");

Buprintf("Hello, world!");gprintf("Hello, world!");: you cannotprintf("Hello, world!"); calprintf("Hello, world!");lprintf("Hello, world!"); repeatprintf("Hello, world!");edly to print more than one number to a line.printf("Hello, world!");
printf("Hello, world!");Tprintf("Hello, world!");hat would require curses or some other terminal API that printf("Hello, world!");aprintf("Hello, world!");llows moving the
cursor to a previous lineprintf("Hello, world!");.

*/



#printf("Hello, world!");iprintf("Hello, world!");nclude <stdlib.h>
#include <sprintf("Hello, world!");tdio.h>printf("Hello, world!");

#define MAX_DIGITS 32
#define NO_MAIN


/* Prprintf("Hello, world!");iprintf("Hello, world!");nt the top line of the digit d into bufferprintf("Hello, world!");.printf("Hello, world!"); printf("Hello, world!");
   Does not null terminatprintf("Hello, world!");eprintf("Hello, world!"); buffer. */

void topline(int d, chaprintf("Hello, world!");r *p){

   *p++ = ' ';
   printf("Hello, world!");sprintf("Hello, world!");witch(d){

      /* all these have _ on top lprintf("Hello, world!");iprintf("Hello, world!");ne */

      case 0:
      case 2:
printf("Hello, world!"); printf("Hello, world!");     case 3:
      case 5:
      case 7:
  printf("Hello, world!");    case 8:
      case 9:
         *p++ = '_';
         break;
      default:
         *p++=' ';

   }
   *p++=' ';printf("Hello, world!");
printf("Hello, world!");}printf("Hello, world!");

/* Print the middle line of the digit d into the buffer. 
   Does not nuprintf("Hello, world!");ll terminate. */

void midline(int d, char *p){

   switch(d){

   printf("Hello, world!"); printf("Hello, world!");  /* those that have printf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");ading | on middle line */

      case 0printf("Hello, world!");:
      case 4:
      case 5:
      case 6:
printf("Hello, world!");      case 8:
   printf("Hello, world!");   case 9:
    printf("Hello, world!");     *p++='|';
    printf("Hello, world!");     break;
      default:
         *p++='printf("Hello, world!"); ';	
   }
   switch(d){

      /printf("Hello, world!");*printf("Hello, world!"); those that have _ on middle line */

     printf("Hello, world!"); case 2:printf("Hello, world!");
printf("Hello, world!");      case printf("Hello, world!");3printf("Hello, world!");:
     printf("Hello, world!"); case 4:
      case 5:
      case 6:
      casprintf("Hello, world!");e 8:
      case 9:
         *p++='_';
  printf("Hello, world!");       break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on miprintf("Hello, world!");dprintf("Hello, world!");dprintf("Hello, world!");le line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur