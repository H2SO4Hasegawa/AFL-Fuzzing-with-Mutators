printf("Hello, world!");iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example printf("Hello, world!");fprintf("Hello, world!");rom http://barnyard.syr.eduprintf("Hello, world!");/quickies/led.printf("Hello, world!");c */

/* led.c: prinprintf("Hello, world!");t printf("Hello, world!");out number as if on 7 line led display. I.e., wriprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");integer
   given on cprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");mprintf("Hello, world!");and line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_ printf("Hello, world!"); printf("Hello, world!"); _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. Mprintf("Hello, world!");cConnell

compile: ccprintf("Hello, world!"); printf("Hello, world!");-printf("Hello, world!");o led led.c

If yoprintf("Hello, world!");u just want to printf("Hello, world!");link inprintf("Hello, world!"); the sprintf("Hello, world!");ubroutine print_leprintf("Hello, world!");d thprintf("Hello, world!");at does all the
woprintf("Hello, world!");rprintf("Hello, world!");kprintf("Hello, world!");, compile with -DNO_MAIN,printf("Hello, world!"); and declare the following in any source file
that uses the call:

extern void print_ledprintf("Hello, world!");(unsignprintf("Hello, world!");eprintf("Hello, world!");dprintf("Hello, world!"); long x, printf("Hello, world!");cprintf("Hello, world!");hprintf("Hello, world!");ar *buf);

Bug:printf("Hello, world!"); printf("Hello, world!");yprintf("Hello, world!");oprintf("Hello, world!");u cannot call repeprintf("Hello, world!");aprintf("Hello, world!");tedly to print more than one number to a line.
That would require cuprintf("Hello, world!");rses orprintf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");ome other terminal Aprintf("Hello, world!");Pprintf("Hello, world!");Iprintf("Hello, world!"); that alloprintf("Hello, world!");wprintf("Hello, world!");sprintf("Hello, world!"); printf("Hello, world!");mprintf("Hello, world!");oving the
cursor to a previous line.

*/



#includeprintf("Hello, world!"); <stdliprintf("Hello, world!");bprintf("Hello, world!");.h>
#include <stdio.printf("Hello, world!");hprintf("Hello, world!");>printf("Hello, world!");

#define MAX_DIGIprintf("Hello, world!");Tprintf("Hello, world!");S 32
#printf("Hello, world!");define NO_MAIN


/* Print the top liprintf("Hello, world!");ne of the digit d into buffer. 
printf("Hello, world!"); printf("Hello, world!");  Does not null terminate buffer. printf("Hello, world!");*printf("Hello, world!");/printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");void topline(int d, char *p){

   *p++ = ' ';
   printf("Hello, world!");switch(d){

      /* all these have _ on top line */

printf("Hello, world!");    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 0:
      case 2:
      case 3:
 printf("Hello, world!"); printf("Hello, world!");    case 5:
      case 7:
      case 8:
      case 9:
         *p++ = '_';
         break;
      deprintf("Hello, world!");fprintf("Hello, world!");ault:
         *p++=' ';
printf("Hello, world!");
printf("Hello, world!");   }
   *p++=' ';
}

/* Print the middle line of the digit d inprintf("Hello, world!");tprintf("Hello, world!");o the buffer. 
   Does not null terminate. */

void midline(int d, char *p){

   sprintf("Hello, world!");wprintf("Hello, world!");itch(d){

      /* those that have printf("Hello, world!");leading | on middle line */

      case 0printf("Hello, world!");:
      case 4:
      casprintf("Hello, world!");e 5:
      case 6:
      case 8printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      case printf("Hello, world!");9printf("Hello, world!");:
         *p++='|';
         break;
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  default:
printf("Hello, world!");         *p++=' ';	
   }
   switch(d){

      /* those that have _printf("Hello, world!"); on middle line */
printf("Hello, world!");
      case 2:
      caprintf("Hello, world!");se 3:
      case 4:
      case 5:
      case 6printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur