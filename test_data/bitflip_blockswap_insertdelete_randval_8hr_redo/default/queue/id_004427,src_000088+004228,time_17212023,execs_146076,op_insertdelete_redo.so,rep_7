printf("Hello, world!");int
zero()
{
	return 0;printf("Hello, world!");
}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on command line like this:  
      _   _       _  
printf("Hello, world!"); printf("Hello, world!");  |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classicalprintf("Hello, world!"); teletype. So the top
 printf("Hello, world!");  lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to liprintf("Hello, world!");nprintf("Hello, world!");k iprintf("Hello, world!");nprintf("Hello, world!"); the subroutine print_ledprintf("Hello, world!"); that does all the
work, compile with -DNO_MAIN, andprintf("Hello, world!"); deprintf("Hello, world!");cprintf("Hello, world!");lprintf("Hello, world!");aprintf("Hello, world!");re the following in any source file
thaprintf("Hello, world!");t uses the call:

extern void print_led(unsigned long x, char *buf);

Bug: printf("Hello, world!");you cannot call reprintf("Hello, world!");pprintf("Hello, world!");eatedly printf("Hello, world!");to pprintf("Hello, world!");rint more tprintf("Hello, world!");han oneprintf("Hello, world!"); printf("Hello, world!");number to a line.
That would require curses or some other terminal API that allowprintf("Hello, world!");s moving the
cursor to printf("Hello, world!");aprintf("Hello, world!"); prevprintf("Hello, world!");iousprintf("Hello, world!"); linprintf("Hello, world!");e.

printf("Hello, world!");*/



#inclprintf("Hello, world!");ude <stdlib.h>
#include <stdio.printf("Hello, world!");hprintf("Hello, world!");>printf("Hello, world!");
printf("Hello, world!");
#dprintf("Hello, world!");efinprintf("Hello, world!");e MAX_DIGITS 32
#define NO_MAIN


/* Priprintf("Hello, world!");nt the top line printf("Hello, world!");of the digit d into buffer. 
printf("Hello, world!"); printf("Hello, world!");  Does not null terminprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!"); buffer. */

printf("Hello, world!");vprintf("Hello, world!");oprintf("Hello, world!");iprintf("Hello, world!");d toplineprintf("Hello, world!");(printf("Hello, world!");int d, char *p){

   *p++ = ' ';
   switch(d){

  printf("Hello, world!");    printf("Hello, world!");/* all these have _ on topprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ine */

    printf("Hello, world!");  caprintf("Hello, world!");sprintf("Hello, world!");e 0:
      case 2:
      cprintf("Hello, world!");ase 3:
printf("Hello, world!");      case 5:
 printf("Hello, world!"); printf("Hello, world!");    cprintf("Hello, world!");ase 7:
      case 8printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      case 9:
         *p++ =printf("Hello, world!"); printf("Hello, world!");'_printf("Hello, world!");';
         break;
      default:
         *p++='printf("Hello, world!"); ';

   }
   *p++='printf("Hello, world!"); printf("Hello, world!");'printf("Hello, world!");;
}

printf("Hello, world!");/printf("Hello, world!");* Print the middle lineprintf("Hello, world!"); printf("Hello, world!");of the digit d into the buffer. 
   Does nprintf("Hello, world!");ot null terminate. */printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");void midliprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");(int d, char *p){

   swprintf("Hello, world!");iprintf("Hello, world!");tprintf("Hello, world!");cprintf("Hello, world!");h(d){printf("Hello, world!");

      /* those thaprintf("Hello, world!");t have leading | on middle line */

     printf("Hello, world!"); case 0:
      case 4:
      case 5:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");6printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      case 8:
      case 9:
         *p++='|';
         break;
      defprintf("Hello, world!");aprintf("Hello, world!");uprintf("Hello, world!");lprintf("Hello, world!");t:
         *p++printf("Hello, world!");=printf("Hello, world!");' ';	
   }
   switch(d){

      /* those that have _ on middle line */

      case 2:
   printf("Hello, world!"); printf("Hello, world!");  case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur