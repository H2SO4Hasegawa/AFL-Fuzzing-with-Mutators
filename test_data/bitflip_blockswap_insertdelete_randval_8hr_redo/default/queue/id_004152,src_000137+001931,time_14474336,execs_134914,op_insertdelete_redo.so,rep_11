#define M(x) x
#define A(a,b) a(b)

int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */
printf("Hello, world!");
printf("Hello, world!");/printf("Hello, world!");* led.c: print out number as if on 7 line led display. I.e., wrprintf("Hello, world!");iprintf("Hello, world!");tprintf("Hello, world!");e integer
   given on command line like this:  printf("Hello, world!");
printf("Hello, world!");      _   _       _  
   |  _|  _| |_| |_  
  printf("Hello, world!"); |printf("Hello, world!"); printf("Hello, world!");|_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");behaves like a classical teletype. So the top
   liprintf("Hello, world!");nprintf("Hello, world!");es of agl digits have to be printed first, then the middle lines of
   all digits, etc.

   By Teprintf("Hello, world!");rprintf("Hello, world!");ry R. McConnell

compile: cprintf("Hello, world!");c -oprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ed led.c

printf("Hello, world!");Iprintf("Hello, world!");fprintf("Hello, world!"); you just want to link in thprintf("Hello, world!");e subprintf("Hello, world!");routine print_led that does all tprintf("Hello, world!");he
wprintf("Hello, world!");oprintf("Hello, world!");rprintf("Hello, world!");k, compile with -DNO_MAIN, and decprintf("Hello, world!");lprintf("Hello, world!");aprintf("Hello, world!");re the following in any source file
that uses the call:
printf("Hello, world!");
printf("Hello, world!");extern void print_led(unsigned long x, char *buf);
printf("Hello, world!");
printf("Hello, world!");Bug: youprintf("Hello, world!"); canprintf("Hello, world!");nprintf("Hello, world!");oprintf("Hello, world!");t call repeatedprintf("Hello, world!");ly to print more than oprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");number to a line.
That would requiprintf("Hello, world!");rprintf("Hello, world!");eprintf("Hello, world!"); curses or some other terminal API printf("Hello, world!");tprintf("Hello, world!");hat allows moving the
cursor to a previous line.

*/



#includprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");<printf("Hello, world!");sprintf("Hello, world!");tdlib.h>
#include <stdiprintf("Hello, world!");oprintf("Hello, world!");.h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Printprintf("Hello, world!"); theprintf("Hello, world!");tprintf("Hello, world!"); d into bufferprintf("Hello, world!");.printf("Hello, world!"); 
   Does not null terminate buffer. */

void topline(int d, char printf("Hello, world!");*printf("Hello, world!");pprintf("Hello, world!");)printf("Hello, world!");{printf("Hello, world!");

   *p++ = ' 'printf("Hello, world!");;
   switch(d){

      /* all these have _ on top lprintf("Hello, world!");ine */

      caseprintf("Hello, world!"); 0:
printf("Hello, world!"); printf("Hello, world!");     case 2:
      case 3:
      case 5:
 printf("Hello, world!"); printf("Hello, world!");    case 7:
      case 8:
      case 9:
         *p++ = '_printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
         break;
 printf("Hello, world!"); printf("Hello, world!");    default:
         *p++='register}
   *p++=' ';
}
printf("Hello, world!");
printf("Hello, world!");/* Print the middle line of the digit d intprintf("Hello, world!");oprintf("Hello, world!"); the buffer. 
   Doesprintf("Hello, world!"); not null terminate. */

void midline(inprintf("Hello, world!");tprintf("Hello, world!"); d, char *p){

   switch(d){

      /* thosprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); have leading | on middle line */

     printf("Hello, world!"); case 0:
      printf("Hello, world!");case 4printf("Hello, world!");:
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   case 5:
      case 6:
      case 8:
   printf("Hello, world!");   cprintf("Hello, world!");aprintf("Hello, world!");se 9:
 printf("Hello, world!"); printf("Hello, world!");       *p++='|';
    printf("Hello, world!");     break;
      default:
         *p++printf("Hello, world!");=printf("Hello, world!");' ';	
   }printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

