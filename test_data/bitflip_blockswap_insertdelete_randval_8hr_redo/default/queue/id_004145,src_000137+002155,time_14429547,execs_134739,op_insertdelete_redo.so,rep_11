printf("Hello, world!");#define M(xprintf("Hello, world!");)printf("Hello, world!"); x
#define A(a,b) a(b)

int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* lprintf("Hello, world!");eprintf("Hello, world!");d.c: print printf("Hello, world!");oprintf("Hello, world!");ut number as if on 7 line led display. I.e., write integer
   given on cprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");mprintf("Hello, world!");aprintf("Hello, world!");nd line like this:  
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");_printf("Hello, world!");   _       _  
   |  _|  _| |_| |_  
   | |_  printf("Hello, world!"); printf("Hello, world!");_printf("Hello, world!");|printf("Hello, world!");   |  _| etc.

   We assume the terminal behaves lprintf("Hello, world!");iprintf("Hello, world!");kprintf("Hello, world!");e a classical teletypeprintf("Hello, world!");.printf("Hello, world!"); printf("Hello, world!");So the top
 printf("Hello, world!"); printf("Hello, world!"); lines of agl digits have to be printed first, then the middle lines of
   all digiprintf("Hello, world!");ts, printf("Hello, world!");eprintf("Hello, world!");tprintf("Hello, world!");cprintf("Hello, world!");.printf("Hello, world!");
printf("Hello, world!");
   By Terry R. McConnell

compile: cc -o leprintf("Hello, world!");dprintf("Hello, world!"); led.c

If yoprintf("Hello, world!");u just want to link in the subroutine print_led that does all the
work, compile with -DNprintf("Hello, world!");O_MAprintf("Hello, world!");Iprintf("Hello, world!");N, and declare printf("Hello, world!");the following iprintf("Hello, world!");n any source file
thatprintf("Hello, world!"); uses the call:

extern void print_led(unsignedprintf("Hello, world!"); long x, char *buf);

Bprintf("Hello, world!");ug: youprintf("Hello, world!"); printf("Hello, world!");cannot call repeatedly to print more than onprintf("Hello, world!");e numprintf("Hello, world!");bprintf("Hello, world!");eprintf("Hello, world!");r to a line.
That would require curses or some other terminaprintf("Hello, world!");l APprintf("Hello, world!");Iprintf("Hello, world!"); that allows moving tprintf("Hello, world!");he
cursoprintf("Hello, world!");r to a previous line.

*/



#include <stdliprintf("Hello, world!");bprintf("Hello, world!");.printf("Hello, world!");h>
#include <stdioprintf("Hello, world!");.h>

#define MAX_DIGITS 32
#defprintf("Hello, world!");ine NO_MAIN


/* Prinprintf("Hello, world!");tprintf("Hello, world!"); thet d into buffer. 
printf("Hello, world!"); printf("Hello, world!");  Does not null terminate buffer. *printf("Hello, world!");/

void topline(int d, char *p){

   *p++ = ' ';
printf("Hello, world!");   switch(d){

      /* all these have _ on topprintf("Hello, world!"); linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");/

   printf("Hello, world!");   case 0:
      case 2:
      case 3:
  printf("Hello, world!");    case 5:
      caprintf("Hello, world!");se 7:
      case 8:
   printf("Hello, world!");   case printf("Hello, world!");9printf("Hello, world!");:
         *p++ = '_';printf("Hello, world!");
         break;
  printf("Hello, world!");    default:
         *p++='register}
   *p++=' ';
}

/* Print the midprintf("Hello, world!");dle line of the digit d inprintf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");buffer. 
   Does not null terminate. printf("Hello, world!");*printf("Hello, world!");/

void midline(int d, char *p){

   switch(d){

      /* thprintf("Hello, world!");oprintf("Hello, world!");se tprintf("Hello, world!");hprintf("Hello, world!");at have leading | on middle line */

      caprintf("Hello, world!");sprintf("Hello, world!");e 0:
      case printf("Hello, world!");4printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");    printf("Hello, world!");  case 5:
      case 6:
      case 8:
     printf("Hello, world!"); case 9:
         *p++='printf("Hello, world!");|printf("Hello, world!");';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* tprintf("Hello, world!");hosprintf("Hello, world!");e that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

