printf("Hello, world!");intprintf("Hello, world!");
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example printf("Hello, world!");fprintf("Hello, world!");rom http://barnyard.syr.edu/quickies/led.c */

/* led.c: print ouprintf("Hello, world!");t number as if on 7 printf("Hello, world!");lprintf("Hello, world!");ine led display. I.e., write integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminaprintf("Hello, world!");lprintf("Hello, world!"); printf("Hello, world!");bprintf("Hello, world!");ehaves like a classical teletype. So the top
   lines of all digits have tprintf("Hello, world!");oprintf("Hello, world!"); be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led that does all the
work, compile wiprintf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!"); printf("Hello, world!");-printf("Hello, world!");Dprintf("Hello, world!");NO_MAIN, and declare theprintf("Hello, world!"); printf("Hello, world!");following iprintf("Hello, world!");nprintf("Hello, world!"); printf("Hello, world!");any source file
that uses the call:

extern void print_led(unsigned long x, char *buf);

Bug: you cannotprintf("Hello, world!"); call repeatedly to print morprintf("Hello, world!");e than one number to a line.
That wouprintf("Hello, world!");lprintf("Hello, world!");dprintf("Hello, world!"); reprintf("Hello, world!");qprintf("Hello, world!");uire printf("Hello, world!");cprintf("Hello, world!");uprintf("Hello, world!");rses or somprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");oprintf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");er terminal API that allows moving the
cursprintf("Hello, world!");oprintf("Hello, world!");r to a previous line.

*/


printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");iprintf("Hello, world!");nclude <stdlib.h>
#incluprintf("Hello, world!");de <stdio.h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Priprintf("Hello, world!");nt the top line of the diprintf("Hello, world!");gprintf("Hello, world!");it d into buffer. 
   Does not null terminate buffer. */

void printf("Hello, world!");tprintf("Hello, world!");opline(int d, char *p){

   *p++ = ' ';
   switch(d){printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");      /* all thesprintf("Hello, world!");e have _ onprintf("Hello, world!"); top line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 7:
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   case 8:
      cprintf("Hello, world!");aprintf("Hello, world!");se 9:
         *p++ = '_';
         break;
      default:
    printf("Hello, world!"); printf("Hello, world!");    *p++=' ';

   }
   *p++=' ';
}

/* Print the middle line of the digit d into the buffer. 
   Does notprintf("Hello, world!"); null terminate. */

void midline(int d, char *pprintf("Hello, world!");)printf("Hello, world!");{printf("Hello, world!");
printf("Hello, world!");
   switch(d){

      /* printf("Hello, world!");tprintf("Hello, world!");hose that have leadinprintf("Hello, world!");g | on middle line */

      case 0:
      case 4:
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   case 5:
  printf("Hello, world!");    case 6printf("Hello, world!");:printf("Hello, world!");
      case 8:
      case 9:
         *p++='|';
printf("Hello, world!");         break;
      defaprintf("Hello, world!");ult:
     printf("Hello, world!");    *p++=' ';	
   }
   switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
 printf("Hello, world!"); printf("Hello, world!");  printf("Hello, world!"); printf("Hello, world!"); case printf("Hello, world!");5:
      caseprintf("Hello, world!"); printf("Hello, world!");6:printf("Hello, world!");
      case 8:
      case 9:
         *p++='_';
         break;
      default:
printf("Hello, world!");         *p++=' ';

   }
  printf("Hello, world!"); switch(d){

      /* those that have clprintf("Hello, world!");osing | on middle lineprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");/

      case 0:
      case 1:
      casprintf("Hello, world!");e 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur