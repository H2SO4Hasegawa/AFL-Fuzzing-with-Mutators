printf("Hello, world!");intprintf("Hello, world!");
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); printf("Hello, world!");fprintf("Hello, world!");rprintf("Hello, world!");om http://barnyaprintf("Hello, world!");rprintf("Hello, world!");dprintf("Hello, world!");.printf("Hello, world!");syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | printf("Hello, world!");|_   _|   |  _| etc.

   We assume the terminal printf("Hello, world!");behaves like a classical teletype. So the top
   liprintf("Hello, world!");nprintf("Hello, world!");es of all digits have tprintf("Hello, world!");o be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you jprintf("Hello, world!");uprintf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!"); want to linkprintf("Hello, world!"); printf("Hello, world!");in the subroutine print_led that does all tprintf("Hello, world!");he
workprintf("Hello, world!");,printf("Hello, world!"); printf("Hello, world!");compile with -DNO_MAIN, anprintf("Hello, world!");d deprintf("Hello, world!");cprintf("Hello, world!");lprintf("Hello, world!");aprintf("Hello, world!");rprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");the following in anprintf("Hello, world!");y sourcprintf("Hello, world!");e file
printf("Hello, world!");that uses the call:

extern void print_led(unsigned long x, char *buf);

Bprintf("Hello, world!");ug: printf("Hello, world!");you cannot call repeatedly to print more than one number to a line.
That would require cursesprintf("Hello, world!"); printf("Hello, world!");or some other terminal APIprintf("Hello, world!"); printf("Hello, world!");that allows moving thprintf("Hello, world!");e
cursor to a previous line.

*/



#include printf("Hello, world!");<stdlib.h>
#include <stdio.h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Printprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!"); top line printf("Hello, world!");oprintf("Hello, world!");fprintf("Hello, world!"); printf("Hello, world!");the digit d into buffer. 
   Doprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); printf("Hello, world!");not null terprintf("Hello, world!");mprintf("Hello, world!");inate buffer. */

void topline(int printf("Hello, world!");dprintf("Hello, world!");, char *p){

   *printf("Hello, world!");pprintf("Hello, world!");+printf("Hello, world!");+ = ' ';
   switch(d){

      /* all these haprintf("Hello, world!");ve _ on topprintf("Hello, world!"); line */

      case 0:
      case 2:
      case 3printf("Hello, world!");:
      case 5:
      case 7:
      case 8:
      case 9:
  printf("Hello, world!");       *p++ = '_';printf("Hello, world!");
printf("Hello, world!");         break;
    printf("Hello, world!");  default:
         *p++=' ';

   }
   *p++=' ';
}printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");/* Print the miprintf("Hello, world!");dprintf("Hello, world!");dle line of the digit d into the buffer. 
   Does not nprintf("Hello, world!");ull terminate. */

printf("Hello, world!");vprintf("Hello, world!");oprintf("Hello, world!");id midline(int d, chprintf("Hello, world!");ar *p){

   switch(d){

      /* those that have leading | on midprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");e line */

      cprintf("Hello, world!");ase 0:
      case 4:
     printf("Hello, world!"); printf("Hello, world!");case 5printf("Hello, world!");:printf("Hello, world!");
      case 6:
      case 8:
      case 9:
 printf("Hello, world!");        *p++='|';
         break;
      default:
         *printf("Hello, world!");p++=' ';	
   }
   switch(d){

   printf("Hello, world!");   /* those tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");t have _ on middle line */

      printf("Hello, world!");caseprintf("Hello, world!"); printf("Hello, world!");2printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      casprintf("Hello, world!");e 3:
      case 4:
   printf("Hello, world!");   case 5:
      case 6:
      case 8:
      case 9:
         *p++='printf("Hello, world!");_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur