printf("Hello, world!");int
zero()
{
	printf("Hello, world!");rprintf("Hello, world!");eturn 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., wrprintf("Hello, world!");ite integer
   given on printf("Hello, world!");command line like this:  
      _   _       _  
 printf("Hello, world!");  |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

  printf("Hello, world!"); printf("Hello, world!");We assume the terminal printf("Hello, world!");behaves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

  printf("Hello, world!"); printf("Hello, world!");By Tprintf("Hello, world!");eprintf("Hello, world!");rry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led that does all the
work, compile withprintf("Hello, world!"); -DNO_MAIN, and declare the following iprintf("Hello, world!");n any source file
that uses the call:

extern void print_led(unsigned long x, char *buf);

Bug: you cannot call repprintf("Hello, world!");eatedly to print more than one number to a line.printf("Hello, world!");
Thaprintf("Hello, world!");t would require curses or some oprintf("Hello, world!");ther terminal API that alloprintf("Hello, world!");ws moving printf("Hello, world!");the
cursor to a previous line.

*/



#include <stdlib.hprintf("Hello, world!");>printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");include <stdio.h>

#define MAX_DIprintf("Hello, world!");GITS 32
#define NO_MAIN


/* Priprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!"); the top line of the digit d printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");to buffer. 
   printf("Hello, world!");Does not null terminate buffer. */

void topliprintf("Hello, world!");nprintf("Hello, world!");e(int d, char *p){

 printf("Hello, world!"); printf("Hello, world!"); *p++ = ' ';
   switch(dprintf("Hello, world!");){

 printf("Hello, world!");    printf("Hello, world!"); printf("Hello, world!");/* all these have _ on top line */

      case 0:
      case 2:
      case 3:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 5:
      case 7:
      caseprintf("Hello, world!"); 8:
printf("Hello, world!");      case printf("Hello, world!");9:
         *p++printf("Hello, world!"); printf("Hello, world!");= '_';
    printf("Hello, world!"); printf("Hello, world!");    break;
      defauprintf("Hello, world!");lprintf("Hello, world!");tprintf("Hello, world!");:
         *p++printf("Hello, world!");=' ';

   }
   *p++=' ';
}

/* Print the midprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!"); line of the digit d into thprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");bprintf("Hello, world!");uprintf("Hello, world!");ffer. 
   Does not printf("Hello, world!");nprintf("Hello, world!");uprintf("Hello, world!");lprintf("Hello, world!");lprintf("Hello, world!"); terminate. */

void midline(int d, char *p){

   switch(d){

      /printf("Hello, world!");*printf("Hello, world!"); printf("Hello, world!");those that have leprintf("Hello, world!");aprintf("Hello, world!");dprintf("Hello, world!");iprintf("Hello, world!");ng | on middle line */

      printf("Hello, world!");case 0:
      case 4:
      casprintf("Hello, world!");e 5:
      case 6:
      case 8:
      caseprintf("Hello, world!"); 9:
         *p++printf("Hello, world!");='|';
         bprintf("Hello, world!");rprintf("Hello, world!");eak;
      defaultprintf("Hello, world!");:printf("Hello, world!");
         printf("Hello, world!");*printf("Hello, world!");p++=' ';	
   }
   switch(d){
printf("Hello, world!");
   printf("Hello, world!");   /* those tprintf("Hello, world!");hprintf("Hello, world!");at have _ on middleprintf("Hello, world!"); printf("Hello, world!");line */

      caseprintf("Hello, world!"); 2:
      case 3:
      case 4:
      case 5:printf("Hello, world!");
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      defprintf("Hello, world!");ault:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middlprintf("Hello, world!");eprintf("Hello, world!"); line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur