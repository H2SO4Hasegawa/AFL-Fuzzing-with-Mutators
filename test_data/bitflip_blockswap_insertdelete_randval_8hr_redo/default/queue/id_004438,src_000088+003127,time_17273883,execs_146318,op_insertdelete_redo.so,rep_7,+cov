int
zero()
printf("Hello, world!");{
	printf("Hello, world!");return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); from http://barnyard.syr.edu/quickies/led.c */

/* lprintf("Hello, world!");eprintf("Hello, world!");d.c: print printf("Hello, world!");out number as if on 7 liprintf("Hello, world!");nprintf("Hello, world!");e led display. I.e., write integer
   given on command line like this:  
      _   _       _  
   printf("Hello, world!");|  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   printf("Hello, world!");aprintf("Hello, world!");ll digits, etc.

   By printf("Hello, world!");Terry R. McConnell

compile: cc -o led led.c

If yprintf("Hello, world!");ou just want to link in the subroutine print_led thaprintf("Hello, world!");tprintf("Hello, world!"); does all the
work, compprintf("Hello, world!");ile with -DNO_MAprintf("Hello, world!");IN, and declare the following in any source file
that uses the callprintf("Hello, world!");:printf("Hello, world!");

extern voprintf("Hello, world!");id print_led(unsignprintf("Hello, world!");ed lprintf("Hello, world!");oprintf("Hello, world!");nprintf("Hello, world!");g x, char *buf);

Bug: you cannotprintf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");all repeatedly to print more than one number to a line.
That would requiprintf("Hello, world!");rprintf("Hello, world!");e curses or some other terminal API that allows moving the
cursor to a previousprintf("Hello, world!"); line.

*/



#incprintf("Hello, world!");lprintf("Hello, world!");uprintf("Hello, world!");dprintf("Hello, world!");e <sprintf("Hello, world!");tprintf("Hello, world!");dprintf("Hello, world!");lib.h>
#include <stdio.h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Pprintf("Hello, world!");rint the toprintf("Hello, world!");pprintf("Hello, world!"); line of the digit d into buffer. 
   Does not null terminaprintf("Hello, world!");tprintf("Hello, world!");e bufferprintf("Hello, world!");. */

void toplineprintf("Hello, world!");(printf("Hello, world!");int d, char *p){

   *p++ = ' ';
 printf("Hello, world!");  switch(d){

      /* all these have _ on top line */
printf("Hello, world!");
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 0:
      case 2:
      case 3:
    printf("Hello, world!");  case 5:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    case 7:
      case 8:
      printf("Hello, world!");case 9:
         *printf("Hello, world!");pprintf("Hello, world!");+printf("Hello, world!");+ = printf("Hello, world!");'_';
         bprintf("Hello, world!");reak;
      default:
         *printf("Hello, world!");pprintf("Hello, world!");++=' ';

   }
   *p++=' ';
}

/* Prprintf("Hello, world!");int printf("Hello, world!");the middlprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");ine of the digit d into printf("Hello, world!");the buffer. 
   Doesprintf("Hello, world!"); not null terminate. *printf("Hello, world!");/printf("Hello, world!");

void midline(int d, char *p){

   switch(d){

      /printf("Hello, world!");*printf("Hello, world!"); those that have leading |printf("Hello, world!"); on middle line */

      case 0:
      case 4:
      case 5:
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");case 6:
printf("Hello, world!");      case 8:
      case 9:
         *p++='|';
         break;
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   defaultprintf("Hello, world!");:
         *p++=' ';	
   }
   switcprintf("Hello, world!");h(d){

      /* those thaprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");have _ on middle line *printf("Hello, world!");/

      case 2:
      casprintf("Hello, world!");e 3:
      case 4:
      case 5printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      case 6:
      case 8:
      case printf("Hello, world!");9:
         *p++='_';
         break;
      defprintf("Hello, world!");aprintf("Hello, world!");uprintf("Hello, world!");lprintf("Hello, world!");tprintf("Hello, world!");:printf("Hello, world!");
         *pprintf("Hello, world!");++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur