int
printf("Hello, world!");zprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");oprintf("Hello, world!");(printf("Hello, world!");)printf("Hello, world!");
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exprintf("Hello, world!");aprintf("Hello, world!");mple from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");d display. I.e., writeprintf("Hello, world!"); integer
   given on command line like this:  
 printf("Hello, world!");     _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

 printf("Hello, world!");  We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just waprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");o link in the subroutine print_led that does all the
work, compile with -DNO_MAIN, and declare the following in any source file
that uses the cprintf("Hello, world!");all:

extern void printf("Hello, world!");pprintf("Hello, world!");rprintf("Hello, world!");int_led(unsigned long x, char *buf);

Bprintf("Hello, world!");uprintf("Hello, world!");gprintf("Hello, world!");: you printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");nprintf("Hello, world!");nprintf("Hello, world!");ot callprintf("Hello, world!"); repeprintf("Hello, world!");atedprintf("Hello, world!");lprintf("Hello, world!");yprintf("Hello, world!"); printf("Hello, world!");to pprintf("Hello, world!");rint more than one number to a line.
printf("Hello, world!");Tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");wprintf("Hello, world!");ould require cprintf("Hello, world!");uprintf("Hello, world!");rsesprintf("Hello, world!"); printf("Hello, world!");or some printf("Hello, world!");oprintf("Hello, world!");tprintf("Hello, world!");her terminal API printf("Hello, world!");that allowprintf("Hello, world!");s moving the
cursor to a previous line.

*/



#includeprintf("Hello, world!"); <stdlib.h>
#include <printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");dio.h>

#printf("Hello, world!");dprintf("Hello, world!");efine MAX_DIGIprintf("Hello, world!");Tprintf("Hello, world!");S 32
#define NO_MAIN


/* Print the top line of the digit d into buffer. 
   Does not null terprintf("Hello, world!");minate buffer. */
printf("Hello, world!");
void topline(int d, char *p){

   *p++ = ' ';printf("Hello, world!");
   switch(d){

      /* all these have _ on top line */

      printf("Hello, world!");cprintf("Hello, world!");ase 0:
      case 2:
      case 3:
      case 5:
printf("Hello, world!");      case 7:
      case 8:
      case 9printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");         *p++ = '_';
         break;
      default:
         *printf("Hello, world!");pprintf("Hello, world!");+printf("Hello, world!");+=' ';

   }
   *p++=' ';
}

/* Print the middle line of the digit d into theprintf("Hello, world!"); printf("Hello, world!");buffer. 
   Does not null terminate. */

vprintf("Hello, world!");oprintf("Hello, world!");iprintf("Hello, world!");dprintf("Hello, world!"); printf("Hello, world!");midline(int d, char *p){

   switch(d){

      /* those thaprintf("Hello, world!");tprintf("Hello, world!"); have leading | on middle line */

      case 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='|';
    printf("Hello, world!");     break;
      default:
         *p++='printf("Hello, world!"); ';	
   }
   swprintf("Hello, world!");iprintf("Hello, world!");tch(d){
printf("Hello, world!");
printf("Hello, world!");   printf("Hello, world!"); printf("Hello, world!");  /* those thatprintf("Hello, world!"); printf("Hello, world!");have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case printf("Hello, world!");9:
         *p++='_';
  printf("Hello, world!");       break;
      deprintf("Hello, world!");fprintf("Hello, world!");ault:
         *p++=' ';

   }
   switprintf("Hello, world!");cprintf("Hello, world!");h(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur