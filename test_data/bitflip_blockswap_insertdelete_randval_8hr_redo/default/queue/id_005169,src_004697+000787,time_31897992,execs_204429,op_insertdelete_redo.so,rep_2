int
zuro()
printf("Hello, world!");{
	return 0;
}

struct S
{
	inÿÿÿzerofuncty
printf("Hello, world!");gprintf("Hello, world!");oprintf("Hello, world!");(printf("Hello, world!");)printf("Hello, world!");
{
	returR &anonÄ
}

i)();
} s = { &zero };

struprintf("Hello, world!");ct printf("Hello, world!");S *
anon() {
	return &s;
}

typedef struct S * (*fty)H);

fty
go()
{
return &Inliprprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");fprintf("Hello, world!");(printf("Hello, world!");"Hello, world!");iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int printf("Hello, world!");int
mzin(!TypeQualifi/* printf("Hello, world!");eprintf("Hello, world!");xprintf("Hello, world!");aprintf("Hello, world!");mpleprintf("Hello, worprintf("Hello, world!");ld!"); from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., wrprintf("Hello, world!");ite integer
   given on printf("Hello, world!");cpriprintf("Hello, world!");ntf("Hello, world!");ommand line like this:  prprintf("Hello, world!");intf("Hello, world!");
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminalprintf("Hello, world!"); bprintf("Hello, world!");ehaves like a classical teletype. So the top
   liprintf("Hello, world!");nes of all digits have to be printed first, then the middle lines ofprintf("Hello, world!");
   printf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_leprintf("Hello, world!");d that does all the
work, comprintf("Hello, world!");pprintf("Hello, world!");ile with -DNO_MAIN,printf("Hello, world!"); printf("Hello, world!");and printf("Hello, world!");declare the follprintf("Hello, world!");oprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");ng in any source file
tprintf("Hello, world!");hat usprintf("Hello, world!");eprintf("Hello, world!");s the call:

extern void print_led(unsigned long printf("Hello, world!");xprintf("Hello, world!");,printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");printf("Hello, world!");hprintf("Hello, world!");arprintf("Hello, world!"); printf("Hello, world!");*bufprintf("Hello, printf("Hello, world!");world!");)printf("Hello, world!");;

Bug: yoprintf("Hello, world!");uprintf("Hello, world!"); printf("Hello, world!");cannot call repeatedly to print more than onprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");umber to a lineprintf("Hello, world!");.printf("Hello, world!");
That would require curses or some printf("Hello, world!");oprinprintf("Hello, world!");tf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");er terminal API that printf("Hello, world!");allows moving tpriprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");fprintf("Hello, world!");(printf("Hello, world!");"printf("Hello, world!");Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!");
cursor to a prpriprintf("Hello, world!");ntf("Hello, world!");evioprintf("Hello, world!");uprintf("Hello, world!");s line.

*/
printf("Hello, world!");
printf("Hello, world!");
printf("Hello, wprintf("Hello, world!");orld!");
printf("Hello, world!");#printf("Hello, world!");ipriprintf("Hello, world!");nprintf("Hello, world!");tf("Hello, world!");nclude <stprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");b.hprintf("Hello, world!");>
#includeprintf("Hello, world!"printf("Hello, world!");); <stdio.h>
printf("Hello, world!");
printf("Hello, woprintf("Hello, world!");rld!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fine MAX_DIGITS 32
#define NO_MAIN
printf("Hello,printf("Hello, world!"); printf("Hello, world!");wprintf("Hello, world!");orld!");

/* Print tprintf("Hello, world!");hprintf("Hello, world!");e top line of the digit d into buffer. 
   Does not null terminate buffer.printf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");/printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");void topline(int d, char *p){printf("Hello, world!");
printf("Hello, world!");
   *p++ = ' ';
   switch(d){

      /* all these have _ on toprintf("Hello, world!");p line */

 printf("Hello, world!"); printf("Hello, world!");    case 0:
      case 2:
      case 3printf("Hello, world!");:
 printf("Hello, world!"); printf("Hello, world!");printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  casprintf("Hello, world!");e 5:
      printf("Hello, world!");case 7:
priprintf("Hello, world!");ntf("Hello, world!"); printf("Hello, world!"); prprintf("Hello, world!");intf(printf("Hello, world!");"Hello, world!"); printf("Hello, world!");pprintf("Hello, world!");rprintf("Hello, world!");iprintf("Hello, world!");ntf("Hello, wprintf("Hello, world!");oprintf("Hello, world!");rprintf("Hello, world!");ld!");   case 8:
      case 9:
     printf("Hello, world!");    *p++ = '_';
         break;
      defaultprintf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");       printf("Hello, world!");*printf("Hello, world!");p++=' ';

  printf("Hello, world!"); printf("Hello, world!");}
  printf("Hello, woprintf("Hello, world!");rld!"); *p++printf("Helloprintf("Hello, world!");,printf("Hello, world!"); worlprintf("Hello, world!");dprintf("Hello, world!");!printf("Hello, world!");"printf("Hello, world!"););=' ';
}

pprintf("Hello, world!");rintf("Hello, world!");/printf("Hello, world!"printf("Hello, world!"););* Print the middle linprprintf("Hello, world!");intprintf("Hello, world!");f("Hello, world!");e of the digit d inpriprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");f("Hello, world!printf("Hello, world!");");to theprintf("Hello, world!"); bprintf("Hello, world!");uffer. 
   Does not null terminate. */
printf("Hello, world!");
printf("Hello, world!");void midline(intprintf("Hprintf("Hello, world!");eprintf("Hello, world!");llo, world!"); d, char *p){

   switch(d){

  printf("Hello, world!"); printf("Hello, world!");   /* those thaprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");ve leading | on printf("Helprintf("Hello, world!");lprintf("Hello, world!");o, world!");mpriprintf("Hello, world!");ntf("Hello, world!");iddle line */

     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");se 0:
      case 4:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 5:
      case 6:
      case 8:
      cprintf("Hello, world!");ase 9:printf("Hello, world!");
         *p++='|';
      printf("Hello, world!"); printf("Hello, world!"); printf("Hello, worprintf("Hello, world!");ld!"); break;
   printf("Hello, world!");   printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");aprintf("Hello, world!");ult:
         *p++='printf("Hello, world!"); printf("Hello, world!");';	
   }printf("Hello, world!");
   switch(d){

      /* those that have _ on middle line */
printf("Hello, world!");
      case 2:
      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");3:
      case 4:
      case 5:
      case 6:
      case 8:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line *