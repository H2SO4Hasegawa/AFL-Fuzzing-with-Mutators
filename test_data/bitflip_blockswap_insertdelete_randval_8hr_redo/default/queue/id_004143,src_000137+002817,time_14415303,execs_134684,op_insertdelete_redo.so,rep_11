#define M(x) x
#define A(a,b) a(b)

int
printf("Hello, world!");mprintf("Hello, world!");aprintf("Hello, world!");in(void)
int
mziprintf("Hello, world!");nprintf("Hello, world!");(printf("Hello, world!");!printf("Hello, world!");Tprintf("Hello, world!");yprintf("Hello, world!");peQualifi/* example from http://barnprintf("Hello, world!");yprintf("Hello, world!");ard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on command line like this:  printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   Weprintf("Hello, world!"); assume the terminal behaves like a classical teprintf("Hello, world!");lprintf("Hello, world!");etype. So the top
   lines of agl digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConprintf("Hello, world!");nell

compile: cc printf("Hello, world!");-o led led.c

printf("Hello, world!");Iprintf("Hello, world!");fprintf("Hello, world!"); you just want to link in tprintf("Hello, world!");he subprintf("Hello, world!");routine print_led printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");oes all the
work, compile with -DNO_MAIN, and declare the following in any sprintf("Hello, world!");oprintf("Hello, world!");uprintf("Hello, world!");rceprintf("Hello, world!"); printf("Hello, world!");file
that uses the call:

extern void print_led(unsigned long x, char *buf);

Bug: you cannot call repeatedly to print more tprintf("Hello, world!");han one numprintf("Hello, world!");bprintf("Hello, world!");er to a line.
Thaprintf("Hello, world!");t would require cuprintf("Hello, world!");rsesprintf("Hello, world!"); printf("Hello, world!");oprintf("Hello, world!");r soprintf("Hello, world!");me other terminprintf("Hello, world!");aprintf("Hello, world!");l APIprintf("Hello, world!"); thatprintf("Hello, world!"); allows moving the
cursor to a previous line.
printf("Hello, world!");
*/



#iprintf("Hello, world!");nprintf("Hello, world!");clude <printf("Hello, world!");sprintf("Hello, world!");tdlib.h>
#include <stdioprintf("Hello, world!");.printf("Hello, world!");h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Print thet d into buffer. 
   Does not null terprintf("Hello, world!");minate buffer. */

void topline(int d, char *p){

   *p++ = ' ';
printf("Hello, world!");   switch(d){

      /* all these havprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");_printf("Hello, world!"); on printf("Hello, world!");top line */

      case 0:printf("Hello, world!");
printf("Hello, world!");      case 2:
      case 3printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      caseprintf("Hello, world!"); 5:
printf("Hello, world!"); printf("Hello, world!");     case 7:
      case 8:
      cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");e 9:
         *p++ = '_';
         break;
   printf("Hello, world!");   default:
        printf("Hello, world!"); *p++='regprintf("Hello, world!");ister}
   *p++=' ';
}

/* Print the middle lineprintf("Hello, world!"); of the digit d inprintf("Hello, world!");to the bprintf("Hello, world!");uffer. 
   Does not null terminate. */printf("Hello, world!");

void midline(int d, char *p){

   switchprintf("Hello, world!");(d){

      /* those that have leading | on middprintf("Hello, world!");le line */

      caprintf("Hello, world!");se 0:
      case 4:
     printf("Hello, world!"); case 5:
      printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");se 6:
    printf("Hello, world!");  case 8:
      case 9:
         *p++='|printf("Hello, world!");';
   printf("Hello, world!"); printf("Hello, world!");     break;
      default:
         *p++=' ';printf("Hello, world!");	
   }
   switch(d){

      /* those that haprintf("Hello, world!");ve _ on middle line */

      printf("Hello, world!");cprintf("Hello, world!");ase 2:
      case 3:
      case 4:
      case 5:
      case 6:
      printf("Hello, world!");cprintf("Hello, world!");ase 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

printf("Hello, world!");      /* those thatprintf("Hello, world!"); have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

