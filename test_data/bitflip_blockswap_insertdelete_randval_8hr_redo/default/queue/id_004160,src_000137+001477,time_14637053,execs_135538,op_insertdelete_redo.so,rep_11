#define M(x) x
#define A(a,b) a(b)
printf("Hello, world!");
int
main(void)
int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led displprintf("Hello, world!");ay. I.e., write integer
   given on command line like this:  
      _   _       _  
printf("Hello, world!");   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
  printf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");nes of agl digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_lprintf("Hello, world!");ed that does all the
work, compile with -DNO_MAIN,printf("Hello, world!"); printf("Hello, world!");and declare the following iprintf("Hello, world!");n aprintf("Hello, world!");ny printf("Hello, world!");sprintf("Hello, world!");ource file
that uses the call:

extern void print_led(unsigned long x, char *buprintf("Hello, world!");fprintf("Hello, world!");)printf("Hello, world!");;printf("Hello, world!");

Bugprintf("Hello, world!");: yoprintf("Hello, world!");u cannot call repeatedly to prinprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");mprintf("Hello, world!");ore tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");nprintf("Hello, world!"); one number to a line.
Tprintf("Hello, world!");hprintf("Hello, world!");at would require curprintf("Hello, world!");ses or some other tprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");mprintf("Hello, world!");inal API thatprintf("Hello, world!"); allows moving the
cursor to a previous lprintf("Hello, world!");ine.

*/



#includprintf("Hello, world!");e <sprintf("Hello, world!");tdliprintf("Hello, world!");bprintf("Hello, world!");.h>
#include <stdio.hprintf("Hello, world!");>printf("Hello, world!");

#define MAX_DIGITS 32
printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");efine NO_MAprintf("Hello, world!");Iprintf("Hello, world!");N


/* Print tprintf("Hello, world!");het d intoprintf("Hello, world!"); printf("Hello, world!");buffer. 
   Does not null terprintf("Hello, world!");minate printf("Hello, world!");bprintf("Hello, world!");uprintf("Hello, world!");ffer. */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){

 printf("Hello, world!"); printf("Hello, world!");  printf("Hello, world!");  /* all these have _ on top line */

   printf("Hello, world!");   case 0:
      caprintf("Hello, world!");se 2:
      case 3printf("Hello, world!");:
      case 5:
      caseprintf("Hello, world!"); printf("Hello, world!");7:
      case 8:
      case 9:
         *p++ printf("Hello, world!");=printf("Hello, world!"); printf("Hello, world!");'printf("Hello, world!");_';
         break;
      dprintf("Hello, world!");efault:
   printf("Hello, world!");      *p++printf("Hello, world!");='register}
   *p++=' ';
}

/* Print the middle lprintf("Hello, world!");iprintf("Hello, world!");ne of the diprintf("Hello, world!");git dprintf("Hello, world!"); printf("Hello, world!");iprintf("Hello, world!");nto the buffer. 
   Does not nprintf("Hello, world!");ull terminate. */

printf("Hello, world!");vprintf("Hello, world!");oprintf("Hello, world!");id midline(int d, chprintf("Hello, world!");aprintf("Hello, world!");rprintf("Hello, world!"); *p){

   printf("Hello, world!");sprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");tch(d){

      /* those that have leading | on mprintf("Hello, world!");iprintf("Hello, world!");ddle lprintf("Hello, world!");ine */

      case printf("Hello, world!");0printf("Hello, world!");:
      case 4:
      case 5:
     printf("Hello, world!"); printf("Hello, world!");case 6:
      case 8:
      cprintf("Hello, world!");aprintf("Hello, world!");seprintf("Hello, world!"); printf("Hello, world!");9printf("Hello, world!");:printf("Hello, world!");
         *p++='|';
   printf("Hello, world!");    printf("Hello, world!");  break;
      default:
         *p++=' ';	
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");}
   switch(d)printf("Hello, world!");{printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");      /* tprintf("Hello, world!");hosprintf("Hello, world!");e that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

