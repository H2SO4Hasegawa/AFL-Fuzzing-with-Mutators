printf("Hello, world!");intprintf("Hello, world!");
printf("Hello, world!");zprintf("Hello, world!");uroprintf("Hello, world!");(printf("Hello, world!");)
{
	return 0;
}
printf("Hello, world!");
printf("Hello, world!");struct S
{
	inÿÿÿzerofunctprintf("Hello, world!");yprintf("Hello, world!");
printf("Hello, world!");go()
{
	returR &anonÄ
}

i)();
} s = { &zero };

struct S *
anon() {printf("Hello, world!");
printf("Hello, world!");	printf("Hello, world!");rprintf("Hello, world!");eprintf("Hello, world!");turn &s;
}

typedef struct S * (*fty)H);

fty
go()
{
return &Inliprintf("Hello, world!printf("Hello, world!");"printf("Hello, world!");)printf("Hello, world!");;iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print outprintf("Hello, world!"); number as if on 7 line led display. I.e., wrprintf("Hello, world!");ite integer
   given on pprintf("Hello, world!");riprintf("Hello, world!");nprintf("Hello, world!");tf("Hello, world!");cprprintf("Hello, world!");intf("Hello, world!");ommand line like this:  printf("Hello, world!");
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminalprintf("Hello, world!"); bprintf("Hello, world!");ehprintf("Hello, world!");aprintf("Hello, world!");ves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   printf("Hello, world!");aprintf("Hello, world!");lprintf("Hello, world!");l digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led that does all the
work, comprintf("Hello, world!");pprintf("Hello, world!");ile with -DNO_MAIN, and printf("Hello, world!");declare the follprintf("Hello, world!");oprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");ng in any source file
tprintf("Hello, world!");hat usprintf("Hello, world!");eprintf("Hello, world!"printf("Hello, world!"););s the call:

extern void print_led(unsigned long printf("Hello, world!");x, cprprintf("Hello, world!");iprintf("Hello, world!");ntf("Hello, world!");hprintf("Hello, world!");arprintf("Hello, world!"); printf("Hello, world!");*bufprintf("Hello, world!");)printf("Hello, world!");;

Bug: you caprintf("Hello, world!");nnot call repeatedly to print more than one printf("Hello, world!");nprintf("Hello, world!");uprintf("Hello, world!");mprintf("Hello, world!");ber to a lineprintfprintf("Hello, world!");(printf("Hello, world!");"Hello, world!");.printf("Hello, world!");
That would require curses or some printf("Hello, world!");oprintf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");erprintf("Hello, world!"); printf("Hello, world!");terminal API that printf("Hello, world!");allows movinprintf("Hello, world!");gprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!");printf("Hello, world!");
printf("Hello, world!");cprintf("Hello, world!");ursor to a prprintf("Hello, world!");evioprintf("Hprintf("Hello, world!");eprintf("Hello, world!");llo, world!");uprintf("Hello, world!");s line.

*/


printf("Hello, world!"printf("Hello, world!"););
printf("printf("Hello, world!");Hello, printf("Hello, world!");wprintf("Hello, world!");oprintf("Hello, world!");rld!");#prinprintf("Hello, world!");tf("Hello, world!");iprintf("Hello, world!");nclude <stprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");b.h>
#includeprintf("Hello, world!printf("Hello, world!");"printf("Hello, world!");)printf("Hello, world!");; <stdio.h>
printf("Hello, world!");
printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fine MAX_DIGITS 32
#define NO_MAINprintf("Hello, world!");
prinprintf("Hello, world!");tf("printf("Hello, world!");Hprintf("Hello, world!");eprintf("Hello, world!");lprintf("Hello, world!");lo, world!");

/* Print the top line of the digit d into bufprintf("Hello, world!");fprintf("Hello, world!");er. 
   Does not null terminate buffer.printf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!printf("Hello, world!");"printf("Hello, world!"););/printf("Hello, world!");
printf("Hello, worldprintf("Hello, world!");!");
printf("Hello, world!");void topline(int d, char *p){printf("Hello, woprintf("Hello, world!");rprintf("Hello, world!");lprintf("Hello, world!");dprintf("Hello, world!");!");
printf("Heprintf("Hello, world!");llo,printf("Hello, world!"); printf("Hello, world!");world!");
   *p++ = ' ';
   switch(d){

      /* all theprintf("Hello, world!");sprintf("Hello, world!");e have printf("Hello, world!");_printf("Hello, world!"); on toprintf("Helloprintf("Hello, world!");, world!");p line */

      case printf("Hello, world!");0:
      case 2:
      case 3printf("Hello, world!");:
  printf("Hello, world!"); printf("Hello, world!");printf("Hello, world!"); printf("Hello, world!");  case 5:
      case 7:
printf("Hello, world!"); printfprintf("Hello, world!");(printf("Hello, world!");"Hello, world!"); priprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");f(printf("Hello, world!");"printf("Hello, world!");Hprintf("Hello, world!");ello, world!"); printf("Hello, world!");  printf("Hello, world!"); printf("Hello, world!");case 8:
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");e 9:
    printf("Hello, world!");     *p++ = '_';
         break;printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     default:
   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); *printf("Hello, world!");pprintf("Hello, world!");+printf("Hello, world!");+printf("Hello, world!");=printf("Hello, world!");'printf("Hello, world!"); ';

   }
  priprintf("Hello, world!");ntf("printf("Hello, world!");Hello, world!"); *p++printf("Heprintf("Hello, world!");llo, world!");=printf("Hello, world!");'printf("Hello, world!"); printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
printf("Hello, world!");}

printf("Hello, world!");/printf("Hello, world!");* Priprintf("Hello, world!");nt the middle linprintf("Hello, worprintf("Hello, world!");ld!");e of the digit d inprintf("Hello, printf("Hello, world!");world!");to the bprintf("Hello, world!");uprintf("Hello, world!");ffer. 
   Does not null terminaprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");. */
printf("Hello,printf("Hello, world!"); printf("Hello, world!");wprintf("Hello, world!");oprintf("Hello, world!");rld!");
printf("Hello,printf("Hello, world!"); printf("Hello, world!");world!");void midline(intprintf("Hello, world!")printf("Hello, world!");; d, char *p){

   switch(d){

      /* those thaprintf("Hello, world!");t have leading | on printf("Hello, world!");mprintf("Hello, world!");iddle line */

      case 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:printf("Hello, world!");
         *p++='|';
      printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); break;
   printf("Hello, world!");   printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");aprintf("Hello, world!");ult:
         *p++='printf("Hello, world!"); printf("Hello, world!");';	
   }printf("Hello, world!");
   switch(d){

      /* those that have _ on middle line */
printf("Hello, world!");
      case 2:
      casprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");3:
      case 4:
      case 5:
      case 6:
      case 8:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line *