int
printf("Hello, world!");zprintf("Hello, world!");ero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., writprintf("Hello, world!");e integer
   given oprintf("Hello, world!");n command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits hprintf("Hello, world!");aprintf("Hello, world!");ve to be printed first, then the middle lines of
printf("Hello, world!");   all digits, etc.

   By Terry R. McConnell

compprintf("Hello, world!");ile: cc -o led led.c

If you just want to link in the subroutine print_led that does all the
work, compile with -DNO_MAIN,printf("Hello, world!"); printf("Hello, world!");aprintf("Hello, world!");nprintf("Hello, world!");dprintf("Hello, world!"); declare the following inprintf("Hello, world!"); printf("Hello, world!");aprintf("Hello, world!");ny source file
that uses the call:

extern void print_leprintf("Hello, world!");dprintf("Hello, world!");(unsigned loprintf("Hello, world!");nprintf("Hello, world!");gprintf("Hello, world!"); x, char *buf);

Bug: youprintf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");aprintf("Hello, world!");nprintf("Hello, world!");nprintf("Hello, world!");ot call repeatedly to print more than one nuprintf("Hello, world!");mber toprintf("Hello, world!"); printf("Hello, world!");a line.
That would require curses or some other terprintf("Hello, world!");mprintf("Hello, world!");inal APIprintf("Hello, world!"); thaprintf("Hello, world!");tprintf("Hello, world!"); allows moving the
cuprintf("Hello, world!");rsor to a previous line.

*/



#include printf("Hello, world!");<stdlprintf("Hello, world!");iprintf("Hello, world!");b.h>
#iprintf("Hello, world!");nprintf("Hello, world!");cprintf("Hello, world!");lude <stdprintf("Hello, world!");iprintf("Hello, world!");o.h>

#define MAX_DIGITS 3printf("Hello, world!");2
#dprintf("Hello, world!");efinprintf("Hello, world!");e NO_MAIN


/* Print the top line of the digit d into buffer. 
   Does not null teprintf("Hello, world!");rprintf("Hello, world!");minate buffer. */

void topline(int d, char *p){printf("Hello, world!");

   *pprintf("Hello, world!");+printf("Hello, world!");+ = ' ';
   switch(d){printf("Hello, world!");

  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); /* printf("Hello, world!");aprintf("Hello, world!");ll these have _ on top linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");*/

      case 0:
      case 2:
      case 3:
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");    case 5:
      cprintf("Hello, world!");aprintf("Hello, world!");se 7:
      case 8:
      case 9:
         *p++ = '_';
         printf("Hello, world!");bprintf("Hello, world!");reak;
      defprintf("Hello, world!");aprintf("Hello, world!");ult:
         *p++=' ';

   }
   *p++=' ';
printf("Hello, world!");}printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");/printf("Hello, world!");* Print the middle line of the digit d into the buffer. 
   Does not nprintf("Hello, world!");ull terminate. */

printf("Hello, world!");vprintf("Hello, world!");oid midline(int d, char *p){

   switch(d){

printf("Hello, world!");      /* those that have leading | on middprintf("Hello, world!");le line */

      case 0:
      case 4:
      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 5:
      case 6:
      case 8:
      case 9:
       printf("Hello, world!"); printf("Hello, world!"); *p++='|';
     printf("Hello, world!");    break;
      default:printf("Hello, world!");
printf("Hello, world!");      printf("Hello, world!"); printf("Hello, world!");  *p++='printf("Hello, world!"); printf("Hello, world!");';printf("Hello, world!");	printf("Hello, world!");
printf("Hello, world!");   }
   switch(d){

      /* those that have _ oprintf("Hello, world!");n middle line */

      case 2:
      case 3:
      case 4:
      case 5:printf("Hello, world!");
      case 6:
      case 8:
      case printf("Hello, world!");9:
         *p++='_';
printf("Hello, world!"); printf("Hello, world!");        break;
      default:
         *p++=printf("Hello, world!");' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur