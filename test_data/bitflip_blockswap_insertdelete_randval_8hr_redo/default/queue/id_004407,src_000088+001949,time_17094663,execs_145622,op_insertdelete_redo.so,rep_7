printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");t
zero()
{
	return 0;
}

struct S
{
	int int
mziprintf("Hello, world!");nprintf("Hello, world!");(printf("Hello, world!");!TypeQualifi/* example from http://barnyaprintf("Hello, world!");rd.syr.edu/quickies/led.c */

/* led.c: print printf("Hello, world!");oprintf("Hello, world!");ut number as if on 7 line led display. I.e., write integer
   given on command line like this:  
 printf("Hello, world!");     _   _       _  
  printf("Hello, world!"); printf("Hello, world!");|printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");_|  _| |_| |_  
   | |_   _|   |  _| etc.

   Weprintf("Hello, world!"); assume the terminal behaves like a classical teletype. So the top
   lines of all digits have to be printed first, then tprintf("Hello, world!");he middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -printf("Hello, world!");o led led.c

If you juprintf("Hello, world!");sprintf("Hello, world!");t want to link in the subroutine print_led that does all the
work, compile with -DNO_MAIN, and declare the folloprintf("Hello, world!");wprintf("Hello, world!");ing in any source file
printf("Hello, world!");that printf("Hello, world!");uses the call:

exprintf("Hello, world!");tern void print_led(unsigprintf("Hello, world!");ned long x, char *buf);

Bug: yoprintf("Hello, world!");uprintf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");annot call repeatedly to print more tprintf("Hello, world!");hprintf("Hello, world!");an one number to a lprintf("Hello, world!");ine.
That would reqprintf("Hello, world!");uprintf("Hello, world!");ire curses oprintf("Hello, world!");r some printf("Hello, world!");oprintf("Hello, world!");tprintf("Hello, world!");her terminalprintf("Hello, world!"); printf("Hello, world!");Aprintf("Hello, world!");Pprintf("Hello, world!");I that allows moving the
cursor to a previous linprintf("Hello, world!");e.

*/



#incluprintf("Hello, world!");de <stdlib.h>
#include <stdioprintf("Hello, world!");.h>

printf("Hello, world!");#printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fine MAX_DIGITS 32
#define NO_MAIN


/* Print the top printf("Hello, world!");lprintf("Hello, world!");ine of the digit d into bufferprintf("Hello, world!");. 
   Doprintf("Hello, world!");es not null terminate buffer. */

void toplinprintf("Hello, world!");e(inprintf("Hello, world!");t d,printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");har *p){

   *pprintf("Hello, world!");+printf("Hello, world!");+ = ' ';
   printf("Hello, world!");sprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");tprintf("Hello, world!");ch(d){

      /* all printf("Hello, world!");these have _ on top line */

      case 0:
 printf("Hello, world!");     case 2:
      printf("Hello, world!");caseprintf("Hello, world!"); printf("Hello, world!");3:
    printf("Hello, world!");  case 5:
 printf("Hello, world!");     case printf("Hello, world!");7:
      case 8:
      case 9:
         *p++ = '_printf("Hello, world!");'printf("Hello, world!");;printf("Hello, world!");
         break;
printf("Hello, world!");      defprintf("Hello, world!");ault:
         *p++=' ';

   }
   *p++=' ';
}

/* Print the printf("Hello, world!");mprintf("Hello, world!");iprintf("Hello, world!");dprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");e line of the digit d into the buffer. 
   Does not null tprintf("Hello, world!");erminate. */

void midline(int printf("Hello, world!");d, char *p){

   sprintf("Hello, world!");wprintf("Hello, world!");itch(d){

      /printf("Hello, world!");* those that have leading | on middle line */

      case 0printf("Hello, world!");:printf("Hello, world!");
      case 4:
      case 5:
      caseprintf("Hello, world!"); printf("Hello, world!");6printf("Hello, world!");:
      case 8:
      case printf("Hello, world!");9printf("Hello, world!");:
     printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); *p++='|';
       printf("Hello, world!");  break;
      default:
         *p++=' ';	
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");}printf("Hello, world!");
printf("Hello, world!");   switch(d){

      /* those that have _ on middle line */

      case 2printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur