#define M(x) x
#define A(a,b) a(b)

printf("Hello, world!");iprintf("Hello, world!");nt
main(void)
int
mzin(!TypeQualifi/* exampleprintf("Hello, world!"); printf("Hello, world!");fprintf("Hello, world!");rprintf("Hello, world!");om http://barnyaprintf("Hello, world!");rprintf("Hello, world!");d.syr.edu/quickies/ledprintf("Hello, world!");.c */

/* led.c: print out number as if on 7 linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");led display. I.e., wprintf("Hello, world!");rprintf("Hello, world!");ite printf("Hello, world!");iprintf("Hello, world!");nteger
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_ printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");_|   |  _| etc.

   We assume the terminal behaves like a classical teleprintf("Hello, world!");tprintf("Hello, world!");ype. So the top
   lines of agl digits have to be printprintf("Hello, world!");ed first, then the midprintf("Hello, world!");dprintf("Hello, world!");le lines of
   all digits, etc.

   By Terry R. McConnell

printf("Hello, world!");cprintf("Hello, world!");ompile: cc -o led led.c

If you just want to link in tprintf("Hello, world!");he subroutine print_led that doesprintf("Hello, world!"); allprintf("Hello, world!"); the
work, printf("Hello, world!");cprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");pile with -DNO_MAIN, and declarprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");the printf("Hello, world!");following in any source file
tprintf("Hello, world!");hat uses the call:

extern void printf("Hello, world!");print_led(unsigned long x, char *buf);
printf("Hello, world!");
printf("Hello, world!");Bprintf("Hello, world!");ug: you cannot call repeatedly to print more than one nprintf("Hello, world!");umber to a line.
Tprintf("Hello, world!");hat would require curseprintf("Hello, world!");sprintf("Hello, world!"); or some other terminprintf("Hello, world!");aprintf("Hello, world!");l API that allows moving the
cursoprintf("Hello, world!");rprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");aprintf("Hello, world!"); printf("Hello, world!");pprintf("Hello, world!");rprintf("Hello, world!");eprintf("Hello, world!");vprintf("Hello, world!");ious line.

*/



#include <stdlibprintf("Hello, world!");.h>
printf("Hello, world!");#incprintf("Hello, world!");lude <stdio.h>

#define MAX_DIGITS 32
#define printf("Hello, world!");Nprintf("Hello, world!");Oprintf("Hello, world!");_MAIN


/* Print thet d into buffeprintf("Hello, world!");rprintf("Hello, world!");. 
   Does not null terminate buffer. */

void topline(int d, char *p){

   *p++ = ' ';
   switch(d){

      /* all these have _ on top printf("Hello, world!");line */

      caseprintf("Hello, world!"); 0:
      case 2:
printf("Hello, world!"); printf("Hello, world!");     case 3:
      case 5:
 printf("Hello, world!");     case 7:
      case 8:
      case 9:
         *p++ = '_';
         break;
     printf("Hello, world!"); printf("Hello, world!");default:
         *p++='register}
   *p++=printf("Hello, world!");'printf("Hello, world!"); printf("Hello, world!");';
}

/* Print the middle line of the digit d into the buffer. 
   Does not null terminate. */

void midprintf("Hello, world!");line(int d, char *p){

   switch(d){

printf("Hello, world!"); printf("Hello, world!");     /* those that have leading | on middle line */

      case 0:
      case 4:
      casprintf("Hello, world!");e 5:
      case 6:printf("Hello, world!");
      case 8:
      case printf("Hello, world!");9:
         *p++='|';
         break;
      default:
         *p++=' ';	
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");}
   switcprintf("Hello, world!");hprintf("Hello, world!");(d){

      /* those that havprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");_ on middlprintf("Hello, world!");e line */
printf("Hello, world!");
printf("Hello, world!");      case 2:
      case 3:
     printf("Hello, world!"); printf("Hello, world!");cprintf("Hello, world!");ase 4:
     printf("Hello, world!"); case 5:
      case 6:
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  case 8:
      case 9:
         *p++='_';printf("Hello, world!");
printf("Hello, world!");         break;
 printf("Hello, world!");     default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

