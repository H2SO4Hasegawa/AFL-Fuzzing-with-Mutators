int
printf("Hello, world!");zprintf("Hello, world!");eprintf("Hello, world!");ro()
{
	return 0;
}

struct S
{
	int int
mziprintf("Hello, world!");n(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print ouprintf("Hello, world!");tprintf("Hello, world!"); number as if on 7 linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");lprintf("Hello, world!");eprintf("Hello, world!");d display. I.e., writeprintf("Hello, world!"); integer
   given on command line like this:  
 printf("Hello, world!");     _   _       _  
   |  _|  _| |_| |_  
   | printf("Hello, world!");|printf("Hello, world!");_printf("Hello, world!"); printf("Hello, world!");  _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o leprintf("Hello, world!");d led.c

If you juprintf("Hello, world!");sprintf("Hello, world!");t want to link in the subroutine print_led that does all the
work, compile with -DNO_MAIN, and declare the following in any source file
that usprintf("Hello, world!");eprintf("Hello, world!");s the call:

extern void print_led(unsigned long x, char *buf);printf("Hello, world!");

Bug: you cannot call reprintf("Hello, world!");pprintf("Hello, world!");eatedly to print morprintf("Hello, world!");e than one number to a line.
That wouprintf("Hello, world!");ld require curses or some other terminal API that allprintf("Hello, world!");oprintf("Hello, world!");wprintf("Hello, world!");s moving printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e
cursor to a preprintf("Hello, world!");vprintf("Hello, world!");ious lprintf("Hello, world!");iprintf("Hello, world!");ne.

*/



printf("Hello, world!");#incprintf("Hello, world!");lude <stdlib.h>
#include <stdio.printf("Hello, world!");hprintf("Hello, world!");>

#define MAX_DIGITSprintf("Hello, world!"); printf("Hello, world!");32
#define NO_MAIN


/* Pprintf("Hello, world!");rprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");t the top line of the digit d inprintf("Hello, world!");to buffprintf("Hello, world!");eprintf("Hello, world!");r. 
   Does not null terminate buffer. */

void printf("Hello, world!");toplineprintf("Hello, world!");(printf("Hello, world!");int d, char *p){

   *p++ = ' ';
   printf("Hello, world!");sprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");tch(d){

    printf("Hello, world!"); printf("Hello, world!"); /* all these haprintf("Hello, world!");ve _ on top line */

      case 0printf("Hello, world!");:
      case 2:
      cprintf("Hello, world!");aprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");3:
      case 5printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");     case 7:
      case 8:
      case 9:
       printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");*p++ = '_';
         break;
     printf("Hello, world!"); printf("Hello, world!");default:
   printf("Hello, world!"); printf("Hello, world!");     *p++=' ';printf("Hello, world!");
printf("Hello, world!");
printf("Hello, world!");   }
   *p++=' ';
}

/* Print the middlprintf("Hello, world!");e line of the digit d intprintf("Hello, world!");o the buffer. 
   Doesprintf("Hello, world!"); not null terminate. */

void midline(int d, char *p){

   switcprintf("Hello, world!");hprintf("Hello, world!");(printf("Hello, world!");d){

      /* those that have leading | on middle line */

      casprintf("Hello, world!");e 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!");        *p++='|';
         breaprintf("Hello, world!");k;
 printf("Hello, world!");     default:
         *p++=' ';	printf("Hello, world!");
   }
   switch(printf("Hello, world!");dprintf("Hello, world!");)printf("Hello, world!");{printf("Hello, world!");

      /* those that have _ on miprintf("Hello, world!");dprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");e line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");ault:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur