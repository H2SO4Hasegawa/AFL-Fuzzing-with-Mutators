int
printf("Hello, world!");zprintf("Hello, world!");eprintf("Hello, world!");ro()
{
	return 0;
}

struct S
{
	int int
mzinprintf("Hello, world!");(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led display. I.e., write integer
   given on printf("Hello, world!");cprintf("Hello, world!");oprintf("Hello, world!");mprintf("Hello, world!");mprintf("Hello, world!");and line like this:  
      _   _       _  printf("Hello, world!");
printf("Hello, world!");   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have tprintf("Hello, world!");o be printed first, then the middle lines of
   aprintf("Hello, world!");ll digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_led that does all the
work, compileprintf("Hello, world!"); wprintf("Hello, world!");ith -DNO_MAIN, and declare the folloprintf("Hello, world!");wprintf("Hello, world!");iprintf("Hello, world!");ng in any sourceprintf("Hello, world!"); file
tprintf("Hello, world!");hprintf("Hello, world!");at uses the call:

extprintf("Hello, world!");ern vprintf("Hello, world!");oid print_led(unsigned long x, cprintf("Hello, world!");hprintf("Hello, world!");ar *buf);

Bug: you cannot call repeatedly to print morprintf("Hello, world!");e than one number to a line.
That would require curses or some otherprintf("Hello, world!"); terminprintf("Hello, world!");aprintf("Hello, world!");l API that allows moprintf("Hello, world!");ving printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");e
cursor to a preprintf("Hello, world!");vprintf("Hello, world!");ious printf("Hello, world!");lprintf("Hello, world!");ine.

*/



printf("Hello, world!");#incprintf("Hello, world!");lprintf("Hello, world!");ude <stprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");ib.h>
#include <printf("Hello, world!");stdio.h>

#define MAX_DIGITS printf("Hello, world!");32
#define NO_MAIN


/* Print the top line of tprintf("Hello, world!");he digit d into buffer. 
   Does not null terminate buffer. */

voidprintf("Hello, world!"); toprintf("Hello, world!");pprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");e(int d, char *p){

   *p++ = ' ';
   switch(d)printf("Hello, world!");{

  printf("Hello, world!");    printf("Hello, world!");/printf("Hello, world!");* all these have _ on top line */

     printf("Hello, world!"); case 0:
      case 2:printf("Hello, world!");
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   case 3:
printf("Hello, world!");      case 5:
 printf("Hello, world!");     case 7:
      case 8:
   printf("Hello, world!");   case 9:
         *p++ = '_';
         break;printf("Hello, world!");
   printf("Hello, world!"); printf("Hello, world!");  default:
   printf("Hello, world!"); printf("Hello, world!");     *p++=' ';

   }
   *p++=' ';
}

/* Print the middle liprintf("Hello, world!");ne of the digit d iprintf("Hello, world!");nto the buffer. 
   Doprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); printf("Hello, world!");not nprintf("Hello, world!");uprintf("Hello, world!");ll terminate. */

void midline(int d, char printf("Hello, world!");*printf("Hello, world!");p){

   switch(d){

 printf("Hello, world!"); printf("Hello, world!");    /* those thprintf("Hello, world!");aprintf("Hello, world!");t have leading | on middle line */

      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); 0:
     printf("Hello, world!"); case 4:
      case 5:
      case 6:
   printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); case 8:
 printf("Hello, world!"); printf("Hello, world!");  printf("Hello, world!");  cprintf("Hello, world!");ase 9:
         *p++='|';
  printf("Hello, world!"); printf("Hello, world!");      break;
  printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");  default:
printf("Hello, world!");         *p++=' ';	
   }
   switch(d){

      /* those that have _printf("Hello, world!"); on middle line */
printf("Hello, world!");
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *printf("Hello, world!");pprintf("Hello, world!");++printf("Hello, world!");='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur