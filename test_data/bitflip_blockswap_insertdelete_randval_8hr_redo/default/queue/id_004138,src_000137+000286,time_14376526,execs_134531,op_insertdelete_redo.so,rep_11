#define M(x) x
#define A(a,b) a(b)

int
main(void)
printf("Hello, world!");int
mzin(!TypeQualifi/* example from http://barnyard.syprintf("Hello, world!");rprintf("Hello, world!");.edu/quickies/led.c */

/* lprintf("Hello, world!");eprintf("Hello, world!");d.c: print out number as if on 7 line led display. I.e., wriprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");eger
   given on coprintf("Hello, world!");mmprintf("Hello, world!");aprintf("Hello, world!");nd line like this:  
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   _   _       _  
   printf("Hello, world!");|printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");_printf("Hello, world!");|printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");_| |_| |_  
   | |_   _|   |  printf("Hello, world!");_| etc.

   We assumeprintf("Hello, world!"); printf("Hello, world!");the terminal behaves like a classical teletype. So the top
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");lines of agl digits have to bprintf("Hello, world!");e printed first, then the middle lines of
   all digits, etc.printf("Hello, world!");

   By Terprintf("Hello, world!");rprintf("Hello, world!");y R. McConnell

compprintf("Hello, world!");ile: cc -o led led.c

If you just want to link in the subroutine priprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!");_printf("Hello, world!");led that does all the
work, compile with -DNO_MAIN, and declare the follprintf("Hello, world!");oprintf("Hello, world!");wprintf("Hello, world!");ing in any source file
that usprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!"); the call:

exprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");nprintf("Hello, world!"); void pprintf("Hello, world!");rint_led(unsigned long x, char *buf);

Bug: printf("Hello, world!");you cannot call repeatedly to print more than oprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!"); number to a line.printf("Hello, world!");
printf("Hello, world!");Tprintf("Hello, world!");hprintf("Hello, world!");at would require curses or someprintf("Hello, world!"); other terminal API that allows moving the
cuprintf("Hello, world!");rprintf("Hello, world!");sor to a previous line.

*/



#include <sprintf("Hello, world!");tdlib.h>
#iprintf("Hello, world!");nclude <stdio.h>

#define MAX_DIGITS 32
#printf("Hello, world!");definprintf("Hello, world!");e NOprintf("Hello, world!");_MAIprintf("Hello, world!");N


/* Print thet d into bprintf("Hello, world!");uprintf("Hello, world!");fprintf("Hello, world!");fprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");.printf("Hello, world!"); 
   Does not null terminate buffer. */

void printf("Hello, world!");topline(intprintf("Hello, world!"); d, char *printf("Hello, world!");p){

   *p++ = ' ';
   switch(d){

      /* all tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");ve _ on tprintf("Hello, world!");op line */

      case 0:
      case 2:
      case 3:
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!"); case 5:
      case 7:
      case 8printf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");      case 9:
         *p++ = '_';
         break;
      printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fprintf("Hello, world!");aprintf("Hello, world!");ult:
         *p++=printf("Hello, world!");'printf("Hello, world!");reprintf("Hello, world!");gprintf("Hello, world!");ister}
   *p++=' ';
}

/* Prinprintf("Hello, world!");tprintf("Hello, world!"); the middle linprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");of the digit d into the buffeprintf("Hello, world!");r. 
   Does not null terminate. */

void miprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");eprintf("Hello, world!");(printf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!"); d, char *p){

   switch(d){

      /* those that have leading | on middle line */

      case 0:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

