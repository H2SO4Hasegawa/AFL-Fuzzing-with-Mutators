#define M(x) x
#define A(a,b) a(b)
printf("Hello, world!");
printf("Hello, world!");iprintf("Hello, world!");nt
main(void)
int
mzinprintf("Hello, world!");(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print ouprintf("Hello, world!");tprintf("Hello, world!"); number as if on 7 liprintf("Hello, world!");ne led display. I.e., write integer
   given on cprintf("Hello, world!");oprintf("Hello, world!");mmand line like this:  
 printf("Hello, world!");     _   _       _  
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");|printf("Hello, world!"); printf("Hello, world!"); _|  _| |_| |_  
   | |_   _|   |  _| etc.

   Weprintf("Hello, world!"); assume the terminal behaves like a classical teprintf("Hello, world!");letype. So the top
   lines of agl digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -printf("Hello, world!");o led led.c

If you just want to link in the printf("Hello, world!");subroutine print_led thaprintf("Hello, world!");tprintf("Hello, world!"); does all the
work, printf("Hello, world!");compile with -DNO_MAIN, and declare the followinprintf("Hello, world!");g in printf("Hello, world!");aprintf("Hello, world!");ny sourprintf("Hello, world!");cprintf("Hello, world!");e file
that uses printf("Hello, world!");tprintf("Hello, world!");he call:

extern void print_led(unsigned long x, cprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");r *printf("Hello, world!");buf);

Bug: you cannot call reprintf("Hello, world!");peateprintf("Hello, world!");dly printf("Hello, world!");to print more than one printf("Hello, world!");nprintf("Hello, world!");umber to a line.
That would require curses or some other terminal API that allows moving the
curprintf("Hello, world!");sprintf("Hello, world!");or to a previous line.

*/



#include <printf("Hello, world!");sprintf("Hello, world!");tprintf("Hello, world!");dprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");b.h>printf("Hello, world!");
#include <stdio.hprintf("Hello, world!");>

#define MAX_DIGprintf("Hello, world!");Iprintf("Hello, world!");Tprintf("Hello, world!");Sprintf("Hello, world!"); printf("Hello, world!");3printf("Hello, world!");2
#define NO_MAIN


/* Print printf("Hello, world!");thet d into buffer. 
   Does not null terminate buffer. */

vprintf("Hello, world!");oprintf("Hello, world!");id topline(iprintf("Hello, world!");nprintf("Hello, world!");tprintf("Hello, world!"); d, char *p){

   *p++ = ' ';
   switch(d)printf("Hello, world!");{printf("Hello, world!");

      printf("Hello, world!");/* aprintf("Hello, world!");ll these have _ on top line */

      case 0:printf("Hello, world!");
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
      caprintf("Hello, world!");se 9printf("Hello, world!");:printf("Hello, world!");
      printf("Hello, world!");   *p++ =printf("Hello, world!"); '_';
         break;
    printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");dprintf("Hello, world!");eprintf("Hello, world!");fault:
   printf("Hello, world!");      printf("Hello, world!");*printf("Hello, world!");p++='register}
   *p++=' ';
}

/* Print the middle line of the digitprintf("Hello, world!"); printf("Hello, world!");d into the buffer. 
   Does not nuprintf("Hello, world!");ll terminate. */
printf("Hello, world!");
void midline(int d, char *p){

   switch(d){

      /* those thprintf("Hello, world!");at have leading | on middprintf("Hello, world!");lprintf("Hello, world!");e line */

      caprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");0:
      case 4:
      cprintf("Hello, world!");ase 5:
      case 6:
     printf("Hello, world!"); case 8:
      case 9:
        printf("Hello, world!"); *p+printf("Hello, world!");+printf("Hello, world!");=printf("Hello, world!");'|';
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");      brprintf("Hello, world!");eak;
      default:
         *p++=' ';	
   }printf("Hello, world!");
   switch(d){

      /* those that have _ onprintf("Hello, world!"); printf("Hello, world!");middle line */
printf("Hello, world!");
printf("Hello, world!");      caseprintf("Hello, world!"); 2:
      case 3:
      case 4:
      case 5:
    printf("Hello, world!"); printf("Hello, world!"); case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

   ß  case
0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while*x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botl)ne(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   /* sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

