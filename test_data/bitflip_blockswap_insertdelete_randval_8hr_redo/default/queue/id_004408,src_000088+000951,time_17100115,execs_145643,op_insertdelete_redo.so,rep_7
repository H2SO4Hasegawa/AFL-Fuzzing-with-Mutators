int
zero()
{
	return 0;
printf("Hello, world!");}

struct S
{
	int int
mzin(!TypeQualifi/* example from http://barnyard.syr.edu/quickies/led.c */

/* led.c: print out number as if on 7 line led displprintf("Hello, world!");ay. I.e., writprintf("Hello, world!");e integer
   given on command line like this:  printf("Hello, world!");
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classicalprintf("Hello, world!"); teletype. So the top
 printf("Hello, world!");  printf("Hello, world!");lines of all digits have to be printed first, then the middle lines of
   all digits, etc.

   By Terry R. McConnell

compile: cc -o led led.c

If you just want to link in the subroutine print_leprintf("Hello, world!");dprintf("Hello, world!"); printf("Hello, world!");that does all the
work, compile with -DNO_MAIN, and declare the following in any source file
that usesprintf("Hello, world!"); printf("Hello, world!");tprintf("Hello, world!");he call:

exprintf("Hello, world!");tprintf("Hello, world!");eprintf("Hello, world!");rprintf("Hello, world!");n void print_led(unsignprintf("Hello, world!");eprintf("Hello, world!");dprintf("Hello, world!"); printf("Hello, world!");long x, char *bprintf("Hello, world!");uf);

Bug: you canprintf("Hello, world!");nprintf("Hello, world!");oprintf("Hello, world!");t call repeprintf("Hello, world!");aprintf("Hello, world!");tedly to print more than one nuprintf("Hello, world!");mprintf("Hello, world!");ber to a lineprintf("Hello, world!");.
That would require curses or some other termprintf("Hello, world!");inalprintf("Hello, world!"); API that allows mprintf("Hello, world!");oving the
cursor to a previous line.

*/



#include <stdlibprintf("Hello, world!");.printf("Hello, world!");h>
#include <stdprintf("Hello, world!");io.h>

#define MAX_DIGITS 32
#defprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");e NO_MAIN


/* Priprintf("Hello, world!");nt the top lineprintf("Hello, world!"); printf("Hello, world!");of thprintf("Hello, world!");eprintf("Hello, world!"); printf("Hello, world!");digit d intprintf("Hello, world!");o buprintf("Hello, world!");fprintf("Hello, world!");fprintf("Hello, world!");eprintf("Hello, world!");r. 
   Does not null terminate buffer. */

void printf("Hello, world!");tprintf("Hello, world!");oprintf("Hello, world!");pprintf("Hello, world!");lprintf("Hello, world!");iprintf("Hello, world!");nprintf("Hello, world!");e(int d, char *p){
printf("Hello, world!");
printf("Hello, world!");   *pprintf("Hello, world!");++ = ' ';
   switch(d){printf("Hello, world!");
printf("Hello, world!");
      printf("Hello, world!");/* all these have _ on top line */

      case 0:
      case 2:
      caseprintf("Hello, world!"); 3:
      case 5:
      case 7:
      case 8:
    printf("Hello, world!");  case 9:
        printf("Hello, world!"); *p++ = '_';
     printf("Hello, world!");    break;
      default:
         *p++=' ';

   }
   *p++=' ';
}

/* Print the middle lprintf("Hello, world!");ine of the digit d into the buffer. 
   Does notprintf("Hello, world!"); null terminate. */

vprintf("Hello, world!");oid midline(int d, chaprintf("Hello, world!");rprintf("Hello, world!"); printf("Hello, world!");*p){

   switch(d){

      /printf("Hello, world!");*printf("Hello, world!"); printf("Hello, world!");those that have leprintf("Hello, world!");aprintf("Hello, world!");dprintf("Hello, world!");ing | on middle line */

      case 0printf("Hello, world!");:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='|';
printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");       break;
      default:
  printf("Hello, world!");       *p++=' ';	
 printf("Hello, world!");  }
   switch(d){

      /* those that have _ on middle line */

printf("Hello, world!"); printf("Hello, world!");     case 2:
      case printf("Hello, world!");3:
      case 4:
      caseprintf("Hello, world!"); printf("Hello, world!");5:
      case 6:printf("Hello, world!");
printf("Hello, world!");      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
  printf("Hello, world!"); switch(d){

      /* those that have cloprintf("Hello, world!");sing | on middle line */

      caprintf("Hello, world!");se 0:
      case 1:
      case 2:
printf("Hello, world!");      case3:
      case 4:
      case 7:
 printf("Hello, world!");     case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur