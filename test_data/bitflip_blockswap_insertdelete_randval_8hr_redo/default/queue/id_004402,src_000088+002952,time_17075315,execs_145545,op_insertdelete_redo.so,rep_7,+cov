printf("Hello, world!");iprintf("Hello, world!");nt
zero()
{
	return 0;
}

struct S
{
	int int
mzin(!TypeQualifi/* example printf("Hello, world!");fprintf("Hello, world!");rprintf("Hello, world!");om http://barnyard.syr.edu/quickies/led.printf("Hello, world!");c */

/* led.c: prinprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");oprintf("Hello, world!");uprintf("Hello, world!");t number as if on 7 line led display. I.e., writeprintf("Hello, world!"); printf("Hello, world!");iprintf("Hello, world!");nteger
   given on command line like this:  
      _   _       _  
   |  _|  _| |_| |_  
   | |_   _|   |  _| etc.

   We assume the terminal behaves like a classical teletype. So the top
   lines of all digits have tprintf("Hello, world!");oprintf("Hello, world!"); printf("Hello, world!");bprintf("Hello, world!");e printed first, then the middle lines of
   all diprintf("Hello, world!");gitprintf("Hello, world!");sprintf("Hello, world!");,printf("Hello, world!"); printf("Hello, world!");eprintf("Hello, world!");tprintf("Hello, world!");c.

   By Terry R. McConnell

compile: cc -o led led.c

Ifprintf("Hello, world!"); you juprintf("Hello, world!");st want to link inprintf("Hello, world!"); theprintf("Hello, world!"); printf("Hello, world!");subroutine print_led printf("Hello, world!");tprintf("Hello, world!");hprintf("Hello, world!");aprintf("Hello, world!");tprintf("Hello, world!"); printf("Hello, world!");doprintf("Hello, world!");es all printf("Hello, world!");tprintf("Hello, world!");he
work, compile with -DNO_MAIN, and declare the foprintf("Hello, world!");lprintf("Hello, world!");lowing iprintf("Hello, world!");n anprintf("Hello, world!");y source file
that uses the call:

extern voidprintf("Hello, world!"); print_led(unsigned long x, char *buf);

Bprintf("Hello, world!");ug: printf("Hello, world!");yprintf("Hello, world!");oprintf("Hello, world!");u cannot call repeatedly to priprintf("Hello, world!");nt more thaprintf("Hello, world!");nprintf("Hello, world!"); one number to a line.
Thprintf("Hello, world!");aprintf("Hello, world!");t wouldprintf("Hello, world!"); require curses orprintf("Hello, world!"); printf("Hello, world!");sprintf("Hello, world!");ome otherprintf("Hello, world!"); terminal API that allows moving the
cursor to a previprintf("Hello, world!");oprintf("Hello, world!");uprintf("Hello, world!");s line.

*/



#include <stdprintf("Hello, world!");lib.h>
#include <sprintf("Hello, world!");tdio.h>

#define MAX_DIGITS 32
#define NO_MAIN


/* Print thprintf("Hello, world!");eprintf("Hello, world!"); top line of theprintf("Hello, world!"); digit d into buffeprintf("Hello, world!");rprintf("Hello, world!");.printf("Hello, world!"); printf("Hello, world!");
   Does notprintf("Hello, world!"); printf("Hello, world!");nprintf("Hello, world!");uprintf("Hello, world!");ll tprintf("Hello, world!");erminate buffer. *printf("Hello, world!");/

void topline(int d, char *p){

   *p++ = ' ';
  printf("Hello, world!"); switch(d){

      /* all tprintf("Hello, world!");hprintf("Hello, world!");eprintf("Hello, world!");sprintf("Hello, world!");eprintf("Hello, world!"); have _ on top line */

      case 0:
printf("Hello, world!"); printf("Hello, world!");     case 2:
      case 3:
      case 5:
      case 7:
printf("Hello, world!");      case 8:
     printf("Hello, world!"); case 9:
         *p++ = printf("Hello, world!");'_';
         break;
 printf("Hello, world!"); printf("Hello, world!"); printf("Hello, world!");   defaulprintf("Hello, world!");tprintf("Hello, world!");:printf("Hello, world!");
printf("Hello, world!");         *p++=' ';

   printf("Hello, world!");}
   *p++=' ';
}

/* Print the middle line of the digit d into the buffer. 
   Does not null terminaprintf("Hello, world!");te. */

void midline(int printf("Hello, world!");dprintf("Hello, world!");, charprintf("Hello, world!"); printf("Hello, world!");*printf("Hello, world!");pprintf("Hello, world!");){

   swiprintf("Hello, world!");tch(d){
printf("Hello, world!");
printf("Hello, world!");      /* those that have leading | on miprintf("Hello, world!");ddleprintf("Hello, world!"); line */

      case 0:
      case 4:
      cprintf("Hello, world!");ase 5:
      case 6:
      case 8:
     printf("Hello, world!"); case 9:
         *p++printf("Hello, world!");='|';
         break;
      default:
         *p++=' ';	
   }
 printf("Hello, world!");  switch(d){

      /* those that have _ on middle line */

      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on middle line */

      case 0:
      case 1:
      case 2:
      case3:
      case 4:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Print the bottom line of the digit d. Does not null terminate. */

void botline(int d, char *p){


   switch(d){

      /* those that have leading | on bottom line */

      case 0:
      case 2:
      case 6:
      case 8:
         *p++='|';
         break;
      default:
         *p++=' ';	
   }
   switch(d){

      /* those that have _ on bottom line */

      case 0:
      case 2:
      case 3:
      case 5:
      case 6:
      case 8:
         *p++='_';
         break;
      default:
         *p++=' ';

   }
   switch(d){

      /* those that have closing | on bottom line */

      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
         *p++='|';
         break;
      default:
         *p++=' ';

   }
}

/* Write the led representation of integer to string buffer. */

void print_led(unsigned long x, char *buf)
{

   int i=0,n;
   static int d[MAX_DIGITS];


   /* extract digits from x */

   n = ( x == 0L ? 1 : 0 );  /* 0 is a digit, hence a special case */

   while(x){
      d[n++] = (int)(x%10L);
      if(n >= MAX_DIGITS)break;
      x = x/10L;
   }

   /* print top lines of all digits */

   for(i=n-1;i>=0;i--){
      topline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n'; /* move teletype to next line */

   /* print middle lines of all digits */

   for(i=n-1;i>=0;i--){
      midline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';

   /* print bottom lines of all digits */

   for(i=n-1;i>=0;i--){
      botline(d[i],buf);
      buf += 3;
      *buf++=' ';
   }
   *buf++='\n';
   *buf='\0';
}

int main()
{
   char buf[5*MAX_DIGITS];
   print_led(1234567, buf);
   printf("%s\n",buf);

   return 0;
}

#ifndef NO_MAIN
int main(int argc, char **argv)
{

   int i=0,n;
   long x;
   static int d[MAX_DIGITS];
   char buf[5*MAX_DIGITS];

   if(argc != 2){
      fprintf(stderr,"led: usage: led integer\n");
      return 1;
   }

   /* fetch argument from command line */

   x = atol(argv[1]);

   / sanity check */

   if(x<0){
      fprintf(stderr,"led: %d must be non-negative\n",x);
      return 1;
   }

   print_led(x,buf);
   printf("%s\n",buf);

   retur